<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>关于Pinia</title>
      <link href="/2024/11/10/%E5%85%B3%E4%BA%8EPinia/"/>
      <url>/2024/11/10/%E5%85%B3%E4%BA%8EPinia/</url>
      
        <content type="html"><![CDATA[<p>参考：<a href="https://pinia.vuejs.org/zh/getting-started.html">https://pinia.vuejs.org/zh/getting-started.html</a></p><h1 id="Store-是什么？"><a href="#Store-是什么？" class="headerlink" title="Store 是什么？"></a>Store 是什么？</h1><p>Store (如 Pinia) 是一个保存状态和业务逻辑的实体，它并不与你的组件树绑定。换句话说，它承载着全局状态。它有点像一个永远存在的组件，每个组件都可以读取和写入它。它有三个概念，state、getter 和 action，我们可以假设这些概念相当于组件中的 data、 computed 和 methods。</p><h1 id="应该在什么时候使用-Store"><a href="#应该在什么时候使用-Store" class="headerlink" title="应该在什么时候使用 Store?"></a>应该在什么时候使用 Store?</h1><p>一个 Store 应该包含可以在整个应用中访问的数据。这包括在许多地方使用的数据，例如显示在导航栏中的用户信息，以及需要通过页面保存的数据，例如一个非常复杂的多步骤表单。</p><p>另一方面，你应该避免在 Store 中引入那些原本可以在组件中保存的本地数据，例如，一个元素在页面中的可见性。</p><h1 id="基本使用方法"><a href="#基本使用方法" class="headerlink" title="基本使用方法"></a>基本使用方法</h1><p>首先<code>npm install pinia</code><br>然后在入口文件中引入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import &#123; createPinia &#125; from &#x27;pinia&#x27;</span><br><span class="line">const pinia = createPinia()</span><br><span class="line">const app = createApp(App)</span><br><span class="line">app.use(pinia)</span><br><span class="line">app.mount(&#x27;#app&#x27;)</span><br></pre></td></tr></table></figure><p>以硅谷甄选为例，我们把store放入src&#x2F;store中（大仓库），而store下的modules可以放许多小仓库<br>一个小仓库：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">//创建用户相关的小仓库</span><br><span class="line">import &#123; defineStore &#125; from &#x27;pinia&#x27;</span><br><span class="line">import &#123; reqLogin &#125; from &#x27;../../api/user&#x27;</span><br><span class="line">import type &#123; loginForm &#125; from &#x27;../../api/user/type&#x27;</span><br><span class="line">//创建用户小仓库</span><br><span class="line">let useUserStore = defineStore(&#x27;User&#x27;, &#123;</span><br><span class="line">  //小仓库，存储数据的地方</span><br><span class="line">  state: () =&gt; &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      token: localStorage.getItem(&quot;TOKEN&quot;),</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  //异步|逻辑的地方</span><br><span class="line">  actions: &#123;</span><br><span class="line">    async userLogin(data: loginForm) &#123;</span><br><span class="line">      //用户登录的方法</span><br><span class="line">      let result = await reqLogin(data)</span><br><span class="line">      //登陆成功200</span><br><span class="line">      if (result.code == 200) &#123;</span><br><span class="line">        this.token = result.data.token</span><br><span class="line">        localStorage.setItem(&quot;TOKEN&quot;, result.data.token)</span><br><span class="line">        return &#x27;ok&#x27;</span><br><span class="line">      &#125; else &#123;//失败201 </span><br><span class="line">        return Promise.reject(new Error(result.data.msg))</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  getters: &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">//对外暴露获取小仓库的方法</span><br><span class="line">export default useUserStore</span><br></pre></td></tr></table></figure><p>其中<br><code> localStorage.setItem(&quot;TOKEN&quot;, result.data.token)</code>setItem 是 localStorage 对象的一个方法，用于将数据保存到本地存储中。它接受两个参数：一个键（key）和一个值（value）。键和值都应该是字符串。如果值不是字符串，它会被自动转换成字符串。<br><code>let result = await reqLogin(data)</code>result接收的是reqLogin函数的返回值<br><code>reqLogin = (data: loginForm) =&gt; requests.post&lt;any, loginResponseData&gt;(API.LOGIN_URL, data)</code>,<code>loginResponseData</code>类型包括code: number,data:dataType其中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">interface dataType &#123;</span><br><span class="line">  token: string</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以下面是result.data.token<br>async函数会返回一个promise表示状态，而该状态取决于async函数的返回值<br>Promise 对象：<br>Promise 是 JavaScript 中用于异步编程的一个对象，它代表了一个可能现在还不可用，但将来某个时刻会变得可用的值。<br>Promise 有三种状态：pending（进行中）、fulfilled（已成功）和 rejected（已失败）。<br>Promise.reject 方法：<br>Promise.reject 是 Promise 构造函数的一个静态方法，用于返回一个状态为 rejected 的新 Promise 实例。<br>它接受一个参数，这个参数通常是一个错误对象或错误信息的字符串，表示 Promise 被拒绝的原因。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>guigu2</title>
      <link href="/2024/11/10/guigu2/"/>
      <url>/2024/11/10/guigu2/</url>
      
        <content type="html"><![CDATA[<h2 id="login组件的静态页面"><a href="#login组件的静态页面" class="headerlink" title="login组件的静态页面"></a>login组件的静态页面</h2><h3 id="需要掌握的element插件的使用"><a href="#需要掌握的element插件的使用" class="headerlink" title="需要掌握的element插件的使用"></a>需要掌握的element插件的使用</h3><p><a href="https://element-plus.org/zh-CN/component/input.html">https://element-plus.org/zh-CN/component/input.html</a><br>如果是组件的话需要引入，并且要动态绑定，例如：<br><code>&lt;el-input type=&quot;password&quot; :show-password=true  :prefix-icon=&quot;Unlock&quot; v-model=&quot;loginForm.password&quot;&gt;&lt;/el-input&gt;</code></p><h2 id="try…catch"><a href="#try…catch" class="headerlink" title="try…catch"></a>try…catch</h2><h3 id="try-块"><a href="#try-块" class="headerlink" title="try 块"></a>try 块</h3><p>try 块包含了可能会产生错误的代码。当 try 块中的代码执行时，如果抛出了错误，并且这个错误没有被 try 块内部的任何代码捕获，那么程序的控制流就会跳转到与 try 块相关联的 catch 块（如果有的话）。</p><h3 id="catch-块"><a href="#catch-块" class="headerlink" title="catch 块"></a>catch 块</h3><p>catch 块紧跟在 try 块之后，并且只会在 try 块中的代码抛出一个错误时执行。catch 块通常包含用于处理错误的代码，比如记录错误信息、清理资源、向用户显示错误消息等。<br>在 catch 块中，你可以访问一个特殊的变量（通常命名为 error 或 e），它包含了错误的详细信息。这个变量是 try 块中抛出的错误对象的一个实例。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">try&#123;</span><br><span class="line">  await useStore.userLogin(loginForm)</span><br><span class="line">  //编程式导航 </span><br><span class="line">  $router.push(&#x27;/&#x27;)</span><br><span class="line">  ElNotification(&#123;</span><br><span class="line">    type: &#x27;success&#x27;,</span><br><span class="line">    message:&#x27;登录成功&#x27;</span><br><span class="line">  &#125;)</span><br><span class="line">  IsSuccess.value=false</span><br><span class="line">&#125;catch(error)&#123;</span><br><span class="line">  //登陆失败</span><br><span class="line">  IsSuccess.value=false</span><br><span class="line">  ElNotification(&#123;</span><br><span class="line">    type: &#x27;error&#x27;,</span><br><span class="line">    message: &#x27;登录失败&#x27;,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中<code>useStore.userLogin(loginForm)</code>会返回正确或错误信息，如果返回的是正确的，那么就把try中的代码执行完；反之，就执行catch块中的；ElNotification是el组件库；<br>.then(result &#x3D;&gt; { … }) 方法在 Promise 成功解决时被调用，result 是 userLogin 函数解决时返回的值。<br>.catch(error &#x3D;&gt; { … }) 方法在 Promise 被拒绝时被调用，error 是拒绝的原因。<br>转化成.then的形式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">const login = () =&gt; &#123;</span><br><span class="line">  // 开始加载，假设 IsSuccess 是一个响应式引用</span><br><span class="line">  IsSuccess.value = true;</span><br><span class="line">  // 调用仓库的登录请求，并处理 Promise</span><br><span class="line">  useStore.userLogin(loginForm)</span><br><span class="line">    .then(result =&gt; &#123;</span><br><span class="line">      // 请求成功后的操作</span><br><span class="line">      // 编程式导航到首页</span><br><span class="line">      $router.push(&#x27;/&#x27;);</span><br><span class="line">      // 显示登录成功的通知</span><br><span class="line">      ElNotification(&#123;</span><br><span class="line">        type: &#x27;success&#x27;,</span><br><span class="line">        message: &#x27;登录成功&#x27;</span><br><span class="line">      &#125;);</span><br><span class="line">      IsSuccess.value = false;</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(error =&gt; &#123;</span><br><span class="line">      // 请求失败后的操作</span><br><span class="line">      IsSuccess.value = false;</span><br><span class="line">      // 显示登录失败的通知</span><br><span class="line">      ElNotification(&#123;</span><br><span class="line">        type: &#x27;error&#x27;,</span><br><span class="line">        message: &#x27;登录失败&#x27; </span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 硅谷甄选 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>guigu</title>
      <link href="/2024/11/10/guigu/"/>
      <url>/2024/11/10/guigu/</url>
      
        <content type="html"><![CDATA[<h2 id="应用Element-plus插件"><a href="#应用Element-plus插件" class="headerlink" title="应用Element-plus插件"></a>应用Element-plus插件</h2><p>插件被重复使用,国际化应用失败也是这里出错<br><img src="/2024/11/10/guigu/4.png" alt="alt text"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.use(ElementPlus)</span><br><span class="line">app.use(ElementPlus, &#123;</span><br><span class="line">  locale: zhCn,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="安装sass遇到的问题"><a href="#安装sass遇到的问题" class="headerlink" title="安装sass遇到的问题"></a>安装sass遇到的问题</h2><p><img src="/2024/11/10/guigu/image.png" alt="alt text"><br>我们目前在组件内部已经可以使用scss样式,因为在配置styleLint工具的时候，项目当中已经安装过sass sass-loader,因此我们再组件内可以使用scss语法！！！需要加上lang&#x3D;”scss”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;style scoped lang=&quot;scss&quot;&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>接下来我们为项目添加一些全局的样式<br>在src&#x2F;styles目录下创建一个index.scss文件，当然项目中需要用到清除默认样式，因此在index.scss引入reset.scss</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@import reset.scss</span><br></pre></td></tr></table></figure><p>在入口文件引入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#x27;@/styles&#x27;</span><br></pre></td></tr></table></figure><p>但是你会发现在src&#x2F;styles&#x2F;index.scss全局样式文件中没有办法使用$变量.因此需要给项目中引入全局变量$.<br>在style&#x2F;variable.scss创建一个variable.scss文件！<br>在vite.config.ts文件配置如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">export default defineConfig((config) =&gt; &#123;</span><br><span class="line">css: &#123;</span><br><span class="line">      preprocessorOptions: &#123;</span><br><span class="line">        scss: &#123;</span><br><span class="line">          javascriptEnabled: true,</span><br><span class="line">          additionalData: &#x27;@import &quot;./src/styles/variable.scss&quot;;&#x27;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong><code>@import &quot;./src/styles/variable.less&quot;;</code>后面的<code>;</code>不要忘记，不然会报错</strong>!</p><h3 id="治标不治本的两个方法："><a href="#治标不治本的两个方法：" class="headerlink" title="治标不治本的两个方法："></a>治标不治本的两个方法：</h3><p>1.把sass变量在需要使用的组件中再次声明<br><img src="/2024/11/10/guigu/3.png" alt="alt text"><br>2.把@use换成@import 但会有警告，因为@import已经弃用</p><h2 id="找不到模块问题"><a href="#找不到模块问题" class="headerlink" title="找不到模块问题"></a>找不到模块问题</h2><p><img src="/2024/11/10/guigu/2.png" alt="alt text"><br>在vue3项目里，ts文件是识别不了vue文件<br>找到项目的env.d.ts文件<br>加上</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">declare module &quot;*.vue&quot; &#123;</span><br><span class="line">  import type &#123; DefineComponent &#125; from &quot;vue&quot;;</span><br><span class="line">  const vueComponent: DefineComponent&lt;&#123;&#125;, &#123;&#125;, any&gt;;</span><br><span class="line">  export default vueComponent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="moke接口"><a href="#moke接口" class="headerlink" title="moke接口"></a>moke接口</h2><p>安装依赖:<a href="https://www.npmjs.com/package/vite-plugin-mock">https://www.npmjs.com/package/vite-plugin-mock</a><br>通过命令行 npm install -D vite-plugin-mock mockjs 安装的vite-plugin-mock 之后发现再vite.config.ts里边报错<br>viteMockServe({ localEnabled: command &#x3D;&#x3D;&#x3D; ‘serve’, })  类型“{ localEnabled: boolean; }”的参数不能赋给类型“ViteMockOptions”的参数。<br>对象字面量只能指定已知属性，并且“localEnabled”不在类型“ViteMockOptions”中。<br>解决办法：<br>卸载vite-plugin-mock</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall vite-plugin-mock</span><br></pre></td></tr></table></figure><p>安装 2.9.6版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install mockjs vite-plugin-mock@2.9.6 -D</span><br></pre></td></tr></table></figure><p>为啥发送get 请求就获取不到信息</p><h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><p><strong>项目开发过程中，至少会经历开发环境、测试环境和生产环境(即正式环境)三个阶段。不同阶段请求的状态(如接口地址等)不尽相同，若手动切换接口地址是相当繁琐且易出错的。于是环境变量配置的需求就应运而生，我们只需做简单的配置，把环境状态切换的工作交给代码。</strong></p><p>开发环境（development）<br>顾名思义，开发使用的环境，每位开发人员在自己的dev分支上干活，开发到一定程度，同事会合并代码，进行联调。</p><p>测试环境（testing）<br>测试同事干活的环境啦，一般会由测试同事自己来部署，然后在此环境进行测试</p><p>生产环境（production）<br>生产环境是指正式提供对外服务的，一般会关掉错误报告，打开错误日志。(正式提供给客户使用的环境。)</p><p>注意:一般情况下，一个环境对应一台服务器,也有的公司开发与测试环境是一台服务器！！！</p><p>项目根目录分别添加 开发、生产和测试环境的文件!</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.env.development</span><br><span class="line">.env.production</span><br><span class="line">.env.test</span><br></pre></td></tr></table></figure><p>文件内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 变量必须以 VITE_ 为前缀才能暴露给外部读取</span><br><span class="line">NODE_ENV = &#x27;development&#x27;</span><br><span class="line">VITE_APP_TITLE = &#x27;硅谷甄选运营平台&#x27;</span><br><span class="line">VITE_APP_BASE_API = &#x27;/dev-api&#x27;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">NODE_ENV = &#x27;production&#x27;</span><br><span class="line">VITE_APP_TITLE = &#x27;硅谷甄选运营平台&#x27;</span><br><span class="line">VITE_APP_BASE_API = &#x27;/prod-api&#x27;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 变量必须以 VITE_ 为前缀才能暴露给外部读取</span><br><span class="line">NODE_ENV = &#x27;test&#x27;</span><br><span class="line">VITE_APP_TITLE = &#x27;硅谷甄选运营平台&#x27;</span><br><span class="line">VITE_APP_BASE_API = &#x27;/test-api&#x27;</span><br></pre></td></tr></table></figure><p>配置运行命令：package.json</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">   &quot;dev&quot;: &quot;vite --open&quot;,</span><br><span class="line">   &quot;build:test&quot;: &quot;vue-tsc &amp;&amp; vite build --mode test&quot;,</span><br><span class="line">   &quot;build:pro&quot;: &quot;vue-tsc &amp;&amp; vite build --mode production&quot;,</span><br><span class="line">   &quot;preview&quot;: &quot;vite preview&quot;</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure><p>通过import.meta.env获取环境变量</p><h2 id="axios-二次封装"><a href="#axios-二次封装" class="headerlink" title="axios 二次封装"></a>axios 二次封装</h2><p>目的：<br>1:使用请求拦截器，可以在请求拦截器中处理一些业务(开始进度条、请求头携带公共参数)<br>2:使用响应拦截器，可以在响应拦截器中处理一些业务(进度条结束、简化服务器返回的数据、处理http网络错误)<br>在根目录下创建utils&#x2F;request.ts<br>&#x2F;&#x2F;进行axios二次封装：使用请求与响应拦截器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">import axios from &#x27;axios&#x27;</span><br><span class="line">import Nprogress from &#x27;nprogress&#x27;</span><br><span class="line">import &#x27;nprogress/nprogress.css&#x27;</span><br><span class="line">import &#123; ElMessage &#125; from &#x27;element-plus&#x27;;</span><br><span class="line">let requests = axios.create(&#123;</span><br><span class="line">  //基础路径</span><br><span class="line">  baseURL: import.meta.env.VITE_APP_BASE_API,</span><br><span class="line">  timeout: 5000//超时时间设置</span><br><span class="line">&#125;);</span><br><span class="line">//第二步，给axios添加请求和响应拦截器</span><br><span class="line">requests.interceptors.request.use((config) =&gt; &#123;</span><br><span class="line">  //config,有headers请求头属性，给服务器携带公共参数</span><br><span class="line">  Nprogress.start();//核心代码</span><br><span class="line">  //返回配置对象</span><br><span class="line">  return config</span><br><span class="line">&#125;)</span><br><span class="line">//第三步：响应拦截器</span><br><span class="line">requests.interceptors.response.use((response) =&gt; &#123;</span><br><span class="line">  Nprogress.done()    //核心代</span><br><span class="line">  //成功的回调</span><br><span class="line">  //简化数据</span><br><span class="line">  return response.data</span><br><span class="line">&#125;, (error) =&gt; &#123;</span><br><span class="line">  //失败的回调</span><br><span class="line">  //定义一个变量，存储网络错误信息</span><br><span class="line">  let msg = &#x27;&#x27;;</span><br><span class="line">  let status = error.response.status;</span><br><span class="line">  switch (status) &#123;</span><br><span class="line">    case 401:</span><br><span class="line">      msg = &quot;token过期&quot;;</span><br><span class="line">      break;</span><br><span class="line">    case 403:</span><br><span class="line">      msg = &#x27;无权访问&#x27;;</span><br><span class="line">      break;</span><br><span class="line">    case 404:</span><br><span class="line">      msg = &quot;请求地址错误&quot;;</span><br><span class="line">      break;</span><br><span class="line">    case 500:</span><br><span class="line">      msg = &quot;服务器出现问题&quot;;</span><br><span class="line">      break;</span><br><span class="line">    default:</span><br><span class="line">      msg = &quot;无网络&quot;;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">//这段代码是使用 Element Plus UI 库中的 ElMessage 组件来显示一个错误消息，并且返回一个被拒绝的 Promise 对象。</span><br><span class="line">  ElMessage(&#123;</span><br><span class="line">    type: &#x27;error&#x27;,</span><br><span class="line">    message: msg</span><br><span class="line">  &#125;)</span><br><span class="line">  return Promise.reject(error);</span><br><span class="line">&#125;)</span><br><span class="line">export default requests;</span><br></pre></td></tr></table></figure><h2 id="进度条"><a href="#进度条" class="headerlink" title="进度条"></a>进度条</h2><p>1.安装依赖。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm i nprogress -S</span><br></pre></td></tr></table></figure><p>2.引入进度条。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import Nprogress from &#x27;nprogress&#x27;</span><br><span class="line">import &#x27;nprogress/nprogress.css&#x27;</span><br></pre></td></tr></table></figure><p>3.使用。<br>发送请求时，在request方法添加进度条。<br>&#x2F;&#x2F; request拦截器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">service.interceptors.request.use(</span><br><span class="line">    config =&gt; &#123;</span><br><span class="line">        Nprogress.start();//核心代码</span><br><span class="line">        return config;</span><br><span class="line">    &#125;, error =&gt; &#123;</span><br><span class="line">        Promise.reject(error);</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>请求响应时，在response方法撤销进度条。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// respone拦截器</span><br><span class="line">  Nprogress.done()    //核心代码</span><br></pre></td></tr></table></figure><h2 id="API接口统一管理"><a href="#API接口统一管理" class="headerlink" title="API接口统一管理"></a>API接口统一管理</h2><p>在&#x2F;src&#x2F;api&#x2F;user下<br>index.ts</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import requests from &quot;../../utils/request&quot;;</span><br><span class="line">import type &#123; loginForm, loginResponseData, userResponseData &#125; from &#x27;./type&#x27;</span><br><span class="line">//统一管理接口</span><br><span class="line">enum API &#123;</span><br><span class="line">  LOGIN_URL = &quot;/user/login&quot;,</span><br><span class="line">  USERINFO_URL = &quot;/user/info&quot;</span><br><span class="line">&#125;</span><br><span class="line">//暴露请求函数</span><br><span class="line">//登录接口方法</span><br><span class="line">export const reqLogin = (data: loginForm) =&gt; requests.post&lt;any, loginResponseData&gt;(API.LOGIN_URL, data)</span><br><span class="line">//获取用户信息接口方法</span><br><span class="line">export const reqUserInfo = requests.get&lt;any, userResponseData&gt;(API.USERINFO_URL)</span><br></pre></td></tr></table></figure><p>type.ts文件中定义相关数据类型</p>]]></content>
      
      
      
        <tags>
            
            <tag> 硅谷甄选 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Element el-row,el-col布局</title>
      <link href="/2024/11/10/Element-el-row-el-col%E5%B8%83%E5%B1%80/"/>
      <url>/2024/11/10/Element-el-row-el-col%E5%B8%83%E5%B1%80/</url>
      
        <content type="html"><![CDATA[<p>element的布局方式与bootstrap原理是一样的，将网页划分成若干行，然后每行等分为若干列，基于这样的方式进行布局，形象的成为栅栏布局。<br>区别是element可将每行划分为24个分栏，而bootstrap是划分为12个分栏，从使用角度，还是24个分栏更加精细。</p><h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h2><p>首先每行使用<el-row>标签标识，然后每行内的列使用<el-col>标识，至于每列整行的宽度比例，则使用:span属性进行设置。</el-col></el-row></p><h3 id="分栏间隔"><a href="#分栏间隔" class="headerlink" title="分栏间隔"></a>分栏间隔</h3><p>有时候想为不同分栏之间设定一定的间隔，可以使用<el-row>标签的:gutter属性，注意默认间隔为0。<br>以下写法不生效：</el-row></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;span&gt;分栏间隔 无效&lt;/span&gt;</span><br><span class="line">    &lt;el-row :gutter=&quot;50&quot;&gt;</span><br><span class="line">      &lt;el-col :span=&quot;8&quot; class=&quot;lightgreen-box&quot;&gt;示例2&lt;/el-col&gt;</span><br><span class="line">      &lt;el-col :span=&quot;8&quot; class=&quot;orange-box&quot;&gt;示例2&lt;/el-col&gt;</span><br><span class="line">      &lt;el-col :span=&quot;8&quot; class=&quot;lightgreen-box&quot;&gt;示例2&lt;/el-col&gt;</span><br><span class="line">    &lt;/el-row&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;span&gt;分栏间隔 有效&lt;/span&gt;</span><br><span class="line">    &lt;el-row :gutter=&quot;24&quot;&gt;</span><br><span class="line">      &lt;el-col :span=&quot;8&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;lightgreen-box&quot;&gt;示例3&lt;/div&gt;</span><br><span class="line">      &lt;/el-col&gt;</span><br><span class="line">      &lt;el-col :span=&quot;8&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;orange-box&quot;&gt;示例3&lt;/div&gt;</span><br><span class="line">      &lt;/el-col&gt;</span><br><span class="line">      &lt;el-col :span=&quot;8&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;lightgreen-box&quot;&gt;示例3&lt;/div&gt;</span><br><span class="line">      &lt;/el-col&gt;</span><br><span class="line">    &lt;/el-row&gt;</span><br></pre></td></tr></table></figure><h3 id="分栏偏移"><a href="#分栏偏移" class="headerlink" title="分栏偏移"></a>分栏偏移</h3><p>有时候想让某个分栏不从左边显示，而是直接显示到中间或者右侧，例如右侧导航栏，我们希望它处于右侧且占据页面1&#x2F;3的宽度。此时可以借助offset属性来实现，表示偏移量。<br>此时，想占据1&#x2F;3宽度，则:span应为8，偏移量应为24-8&#x3D;16，所以代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;span&gt;分栏偏移&lt;/span&gt;</span><br><span class="line">    &lt;el-row&gt;</span><br><span class="line">      &lt;el-col :span=&quot;8&quot; :offset=&quot;16&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;lightgreen-box&quot;&gt;示例4&lt;/div&gt;</span><br><span class="line">      &lt;/el-col&gt;</span><br><span class="line">    &lt;/el-row&gt;</span><br><span class="line">    &lt;el-divider&gt;&lt;/el-divider&gt;//分割线</span><br></pre></td></tr></table></figure><p>更具体的用法<br><a href="https://element-plus.org/zh-CN/component/layout.html">https://element-plus.org/zh-CN/component/layout.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Element组件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript</title>
      <link href="/2024/11/07/TypeScript/"/>
      <url>/2024/11/07/TypeScript/</url>
      
        <content type="html"><![CDATA[<h2 id="编译TypeScript"><a href="#编译TypeScript" class="headerlink" title="编译TypeScript"></a>编译TypeScript</h2><h3 id="命令行编译"><a href="#命令行编译" class="headerlink" title="命令行编译"></a>命令行编译</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tesc index</span><br></pre></td></tr></table></figure><h3 id="自动化编译"><a href="#自动化编译" class="headerlink" title="自动化编译"></a>自动化编译</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tesc init</span><br><span class="line">tesc --watch (监视所有文件)</span><br></pre></td></tr></table></figure><h3 id="tsconfig-json文件"><a href="#tsconfig-json文件" class="headerlink" title="tsconfig.json文件"></a>tsconfig.json文件</h3><p>当出现错误时，不进行转换</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;noEmitOnError&quot;: true,   </span><br></pre></td></tr></table></figure><h2 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h2><p><a href="./TypeScript/1.png"></a><a href="./TypeScript/2.png"></a></p><h3 id="类型声明"><a href="#类型声明" class="headerlink" title="类型声明"></a>类型声明</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">let a: string</span><br><span class="line">let b: number</span><br><span class="line">let c: boolean</span><br><span class="line">let d: &#x27;hello&#x27; //字面量类型以后只能存hello</span><br><span class="line">function count(x: number, y: number): number &#123;</span><br><span class="line">  return x + y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意:string 和 String 不一样，后者是包装对象<br><a href="./TypeScript/3.png"></a><br><a href="./TypeScript/4.png"></a></p><h3 id="any"><a href="#any" class="headerlink" title="any"></a>any</h3><p>任意类型，不进行类型检查</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let a: any</span><br><span class="line">//或let a </span><br><span class="line">a = 99</span><br><span class="line">a =&#x27;swjnswj&#x27;</span><br><span class="line">a =true</span><br></pre></td></tr></table></figure><p>any类型的变量可以赋值给任意类型的变量</p><h3 id="unknown"><a href="#unknown" class="headerlink" title="unknown"></a>unknown</h3><p>这样写是不行的即使此时s的值是个字符串</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">let s:unknown</span><br><span class="line">s=2</span><br><span class="line">s=true</span><br><span class="line">s = &#x27;as&#x27;</span><br><span class="line">let x: string</span><br><span class="line">x=s</span><br></pre></td></tr></table></figure><p>方法一</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if(typeof s === &#x27;string&#x27;)&#123;</span><br><span class="line">  x=s</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法二：断言的两种形式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = s as string </span><br><span class="line">x = &lt;string&gt;s</span><br></pre></td></tr></table></figure><h3 id="never"><a href="#never" class="headerlink" title="never"></a>never</h3><p>通常对函数做限制,不能用于变量（没意义）<br>js中如果不写返回值则返回undefined</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function demo():never&#123;</span><br><span class="line">  demo()</span><br><span class="line">  throw new Error(&#x27;程序运行异常！&#x27;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="void"><a href="#void" class="headerlink" title="void"></a>void</h3><p>通常用于限制函数返回值<br><a href="./TypeScript/5.png"></a><a href="./TypeScript/6.png"></a></p><h3 id="object"><a href="#object" class="headerlink" title="object"></a>object</h3><p><a href="./TypeScript/7.png"></a><a href="./TypeScript/8.png"></a></p><h3 id="声明一个对象类型"><a href="#声明一个对象类型" class="headerlink" title="声明一个对象类型"></a>声明一个对象类型</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">let person: &#123;</span><br><span class="line">  name: string</span><br><span class="line">  age?:number</span><br><span class="line">  [key:string]:any//索引签名</span><br><span class="line">&#125;</span><br><span class="line">person = &#123;name:&#x27;wyh&#x27;,age: 18&#125;</span><br><span class="line">person = &#123;name:&#x27;cyj&#x27;&#125;</span><br><span class="line">person = &#123;name:&#x27;cyj&#x27;;place:&#x27;河南&#x27;&#125;</span><br></pre></td></tr></table></figure><h3 id="声明一个函数类型"><a href="#声明一个函数类型" class="headerlink" title="声明一个函数类型"></a>声明一个函数类型</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let count: (a: number, b: number) =&gt; number</span><br><span class="line">count = (x,y) =&gt;&#123;</span><br><span class="line">  return x+y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="声明一个数组类型"><a href="#声明一个数组类型" class="headerlink" title="声明一个数组类型"></a>声明一个数组类型</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let arr: string[]</span><br><span class="line">let arr2: Array&lt;number&gt;</span><br><span class="line">arr =[&#x27;1&#x27;,&#x27;s&#x27;]</span><br><span class="line">arr2 =[100,200]</span><br></pre></td></tr></table></figure><h2 id="元组-tuple"><a href="#元组-tuple" class="headerlink" title="元组 tuple"></a>元组 tuple</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">let arr1: [string,number]</span><br><span class="line">let arr2: [string,boolean?]</span><br><span class="line">let arr3: [number,...string[]]</span><br><span class="line"></span><br><span class="line">arr1 = [&#x27;hello&#x27;,12]</span><br><span class="line">arr2 = [&#x27;hello&#x27;,false]</span><br><span class="line">arr3 = [1,&#x27;a&#x27;]</span><br></pre></td></tr></table></figure><h2 id="enum"><a href="#enum" class="headerlink" title="enum"></a>enum</h2><p>可以定义一组命名常量,数字递增，反向映射，枚举中的属性是只读的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">enum Direction &#123;</span><br><span class="line">  up,</span><br><span class="line">  down,</span><br><span class="line">  left,</span><br><span class="line">  right</span><br><span class="line">&#125;</span><br><span class="line">console.log(Direction.down)</span><br><span class="line">console.log(Direction[0])</span><br></pre></td></tr></table></figure><p>字符串枚举没有反向映射</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">enum Direction &#123;</span><br><span class="line">  up=&quot;up&quot;,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>常量枚举，js中代码量减少</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const enum Direction &#123;</span><br><span class="line">  up,</span><br><span class="line">  down,</span><br><span class="line">  left,</span><br><span class="line">  right</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="type-联合类型"><a href="#type-联合类型" class="headerlink" title="type 联合类型"></a>type 联合类型</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">type Status = number | string</span><br><span class="line">type Gender = &#x27;男&#x27; | &#x27;女&#x27;</span><br><span class="line">function print(data:Status):void&#123;</span><br><span class="line">  console.log(data)</span><br><span class="line">&#125;</span><br><span class="line">print(404)</span><br><span class="line">print(&#x27;404&#x27;)</span><br></pre></td></tr></table></figure><h2 id="type-并且类型"><a href="#type-并且类型" class="headerlink" title="type 并且类型"></a>type 并且类型</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">type Area = &#123;</span><br><span class="line">  height: number;</span><br><span class="line">  width: number;</span><br><span class="line">&#125;</span><br><span class="line">type Address = &#123;</span><br><span class="line">  num:number;</span><br><span class="line">  cell:number</span><br><span class="line">&#125;</span><br><span class="line">type House = Area &amp; Address</span><br><span class="line">const house:House = &#123;</span><br><span class="line">  height: 122,</span><br><span class="line">  width: 222,</span><br><span class="line">  num: 23,</span><br><span class="line">  cell: 3</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="特殊情况void-不奏效"><a href="#特殊情况void-不奏效" class="headerlink" title="特殊情况void 不奏效"></a>特殊情况void 不奏效</h2><p><a href="./TypeScript/9.png"></a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>About Vue3</title>
      <link href="/2024/11/07/About-Vue3/"/>
      <url>/2024/11/07/About-Vue3/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="创建一个vue3的项目"><a href="#创建一个vue3的项目" class="headerlink" title="创建一个vue3的项目"></a>创建一个vue3的项目</h2><h3 id="用vite"><a href="#用vite" class="headerlink" title="用vite"></a>用vite</h3><p>1.npm init vite-app vue3_vite（项目名称）<br>2.进入vue3_vite文件夹，安装依赖npm i<br>3.启动项目 npm run dev</p><h3 id="vue-cli"><a href="#vue-cli" class="headerlink" title="vue-cli"></a>vue-cli</h3><p>1.vue create vue_test<br>2.cd ,npm run serve</p><p><img src="/2024/11/07/About-Vue3/image.png" alt="alt text"><br><img src="/2024/11/07/About-Vue3/image-1.png" alt="alt text"><br><img src="/2024/11/07/About-Vue3/image-2.png" alt="alt text"><br>如果用ref监测一个对象类型的数据，那么ref 会求助reactive 把数据转换为 proxy类型的，<br>用reactive的话，数据直接就是proxy对象，就不用.value</p><p><img src="/2024/11/07/About-Vue3/image-3.png" alt="alt text"><br>下面为vue3内部的响应式的配置，Vue3可以直接对数据进行增删改查<br><img src="/2024/11/07/About-Vue3/image-4.png" alt="alt text"><br>其中，target 指 person,propName指所改的属性值<br><img src="/2024/11/07/About-Vue3/image-5.png" alt="alt text"></p><h2 id="ref和reactive对比："><a href="#ref和reactive对比：" class="headerlink" title="ref和reactive对比："></a>ref和reactive对比：</h2><p><img src="/2024/11/07/About-Vue3/image-6.png" alt="alt text"></p><h3 id="vue2-props，插槽-补充"><a href="#vue2-props，插槽-补充" class="headerlink" title="vue2 props，插槽 补充"></a>vue2 props，插槽 补充</h3><p>如果用props传数据的话，并且接收的话，那么会在vc实例对象上出现，但是不接收的话，就会出现在$attrs上<br>如果没有接收插槽的话，页面只是不显示，但是确实已经出现在组件实例对象的vc身上的$slots中<br><img src="/2024/11/07/About-Vue3/image-9.png" alt="alt text"><br><img src="/2024/11/07/About-Vue3/image-7.png" alt="alt text"><br>外部给组件传参时，并且数据是响应式的<br><img src="/2024/11/07/About-Vue3/image-8.png" alt="alt text"></p><p><img src="/2024/11/07/About-Vue3/image-10.png" alt="alt text"></p><h2 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h2><p>计算属性（computed properties）的定义是通过一个函数来创建的，但这个函数返回一个对象，这个对象描述了计算属性的 getter 和可选的 setter。</p><h4 id="简写形式"><a href="#简写形式" class="headerlink" title="简写形式"></a>简写形式</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2&gt;一个人的信息&lt;/h2&gt;</span><br><span class="line">  姓：&lt;input type=&quot;text&quot; v-model=&quot;person.firstname&quot;&gt;</span><br><span class="line">  名：&lt;input type=&quot;text&quot; v-model=&quot;person.lastname&quot;&gt;</span><br><span class="line">  全名：&lt;h4&gt;&#123;&#123;person.fullName&#125;&#125;&lt;/h4&gt;</span><br><span class="line">  全名：&lt;input type=&quot;text&quot; v-model=&quot;person.fullName&quot;&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123;reactive&#125; from &#x27;vue&#x27;</span><br><span class="line">import &#123;computed&#125; from &#x27;vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;App&#x27;,</span><br><span class="line">  setup()&#123;</span><br><span class="line">    let person = reactive(&#123;</span><br><span class="line">      firstname: &#x27;张&#x27;,</span><br><span class="line">      lastname: &#x27;三&#x27;</span><br><span class="line">    &#125;)</span><br><span class="line">    let fullName = computed(</span><br><span class="line">      ()=&gt;&#123;</span><br><span class="line">        return person.firstname + &#x27;-&#x27; + person.lastname</span><br><span class="line">      &#125;</span><br><span class="line">    ) </span><br><span class="line">    return &#123;</span><br><span class="line">      person,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的计算属性只可读，不可更改，也就是说最后一个文本框里的值不可以输入或删除<br>还可以这样写，相当于直接给person追加了一个属性</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">person.fullName = computed(</span><br><span class="line">()=&gt;&#123;</span><br><span class="line">  return person.firstname + &#x27;-&#x27; + person.lastname</span><br><span class="line">&#125;) </span><br></pre></td></tr></table></figure><h4 id="完整版"><a href="#完整版" class="headerlink" title="完整版"></a>完整版</h4><p>完整版中fullName不再是person中的属性，因此在组件中引用时不必再加上person.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">let fullName=computed(&#123;</span><br><span class="line">get()&#123;</span><br><span class="line">  return person.firstname + &#x27;-&#x27; + person.lastname</span><br><span class="line">&#125;,</span><br><span class="line">set(value)&#123;</span><br><span class="line">  const nameArr = value.split(&#x27;-&#x27;)</span><br><span class="line">  person.firstname=nameArr[0]</span><br><span class="line">  person.lastname=nameArr[1]</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">return &#123;</span><br><span class="line">  person,</span><br><span class="line">  fullName</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="watch监视"><a href="#watch监视" class="headerlink" title="watch监视"></a>watch监视</h2><p>watch写在setup()里面<br>基本代码<br>这里面注意两个容易出错的点：<br>1.函数直接定义即可<br>2.ref类型的数据需要加.value</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2&gt;当前求和为：&#123;&#123;sum&#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;button @click=&quot;sum++&quot;&gt;点我+1&lt;/button&gt;</span><br><span class="line">  &lt;hr&gt;</span><br><span class="line">  &lt;h2&gt;当前的信息为&#123;&#123; msg &#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;button @click=&quot;changemsg&quot;&gt;修改信息&lt;/button&gt;</span><br><span class="line">  &lt;hr&gt;</span><br><span class="line">  &lt;h2&gt;姓名：&#123;&#123; person.name &#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;h2&gt;年龄：&#123;&#123; person.age &#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;h2&gt;薪资：&#123;&#123; person.salary &#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;button @click=&quot;changename&quot;&gt;修改姓名&lt;/button&gt;</span><br><span class="line">  &lt;button @click=&quot;person.age++&quot;&gt;增长年龄&lt;/button&gt;</span><br><span class="line">  &lt;button @click=&quot;person.salary++&quot;&gt;涨薪&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123;reactive,watch,ref&#125; from &#x27;vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;App&#x27;,</span><br><span class="line">  setup()&#123;</span><br><span class="line">    let sum=ref(0)</span><br><span class="line">    let msg=ref(&#x27;你好&#x27;)</span><br><span class="line">    let person=reactive(&#123;</span><br><span class="line">      name:&#x27;张三&#x27;,</span><br><span class="line">      age:18,</span><br><span class="line">      salary:20</span><br><span class="line">    &#125;)</span><br><span class="line">    let changemsg =()=&gt;msg.value += &#x27;!&#x27;</span><br><span class="line">    let changename =()=&gt;person.name += &#x27;!&#x27;</span><br><span class="line">    return &#123;</span><br><span class="line">      sum,</span><br><span class="line">      msg,</span><br><span class="line">      changemsg,</span><br><span class="line">      changename,</span><br><span class="line">      person</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="1-监视ref-所定义的一个响应式数据"><a href="#1-监视ref-所定义的一个响应式数据" class="headerlink" title="1.监视ref 所定义的一个响应式数据"></a>1.监视ref 所定义的一个响应式数据</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">watch(sum,(newValue,oldValue)=&gt;&#123;</span><br><span class="line">  console.log(&#x27;sum变了&#x27;,newValue,oldValue)</span><br><span class="line">&#125;,&#123;immediate:true&#125;)</span><br></pre></td></tr></table></figure><p><img src="/2024/11/07/About-Vue3/image-11.png"></p><h4 id="2-监视ref-所定义的多个响应式数据"><a href="#2-监视ref-所定义的多个响应式数据" class="headerlink" title="2.监视ref 所定义的多个响应式数据"></a>2.监视ref 所定义的多个响应式数据</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">watch([sum,msg],(newValue,oldValue)=&gt;&#123;</span><br><span class="line">  console.log(&#x27;sum,msg变了&#x27;,newValue,oldValue)</span><br><span class="line">&#125;,&#123;immediate:true&#125;)</span><br></pre></td></tr></table></figure><p><img src="/2024/11/07/About-Vue3/image-12.png" alt="alt text"></p><h4 id="3-监视reactive-所定义的一个响应式数据的全部属性"><a href="#3-监视reactive-所定义的一个响应式数据的全部属性" class="headerlink" title="3.监视reactive 所定义的一个响应式数据的全部属性"></a>3.监视reactive 所定义的一个响应式数据的全部属性</h4><h5 id="注意1-此处无法正确的获取oldValue-2-强制开启了深度监视"><a href="#注意1-此处无法正确的获取oldValue-2-强制开启了深度监视" class="headerlink" title="注意1.此处无法正确的获取oldValue  2.强制开启了深度监视"></a>注意1.此处无法正确的获取oldValue  2.强制开启了深度监视</h5><p>就算person中还有一个对象，也会被监视到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">watch(person,(newValue,oldValue)=&gt;&#123;</span><br><span class="line">  console.log(&#x27;person变了&#x27;,newValue,oldValue)</span><br><span class="line">&#125;,&#123;deep:false&#125;)</span><br></pre></td></tr></table></figure><p><img src="/2024/11/07/About-Vue3/image-13.png" alt="alt text"></p><h4 id="4-监视reactive-所定义的一个响应式数据的某个属性—写成函数的形式"><a href="#4-监视reactive-所定义的一个响应式数据的某个属性—写成函数的形式" class="headerlink" title="4.监视reactive 所定义的一个响应式数据的某个属性—写成函数的形式"></a>4.监视reactive 所定义的一个响应式数据的某个属性—写成函数的形式</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">watch(()=&gt;person.age,(newValue,oldValue)=&gt;&#123;</span><br><span class="line">  console.log(&#x27;person  age变了&#x27;,newValue,oldValue)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="5-监视reactive-所定义的一个响应式数据的某些属性"><a href="#5-监视reactive-所定义的一个响应式数据的某些属性" class="headerlink" title="5.监视reactive 所定义的一个响应式数据的某些属性"></a>5.监视reactive 所定义的一个响应式数据的某些属性</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">watch([()=&gt;person.name,()=&gt;person.age],(newValue,oldValue)=&gt;&#123;</span><br><span class="line">  console.log(&#x27;name age变了&#x27;,newValue,oldValue)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="特殊情况"><a href="#特殊情况" class="headerlink" title="特殊情况"></a>特殊情况</h4><p>更改一下配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">setup()&#123;</span><br><span class="line">let sum=ref(0)</span><br><span class="line">let msg=ref(&#x27;你好&#x27;)</span><br><span class="line">let person=reactive(&#123;</span><br><span class="line">  name:&#x27;张三&#x27;,</span><br><span class="line">  age:18,</span><br><span class="line">  salary:20,</span><br><span class="line">  job:&#123;</span><br><span class="line">    j1:&#123;</span><br><span class="line">      j1s:9999</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里必须加上{deep:true}，否则监视不到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">watch(()=&gt;person.job,(newValue,oldValue)=&gt;&#123;</span><br><span class="line">  console.log(&#x27;job变了&#x27;,newValue,oldValue)</span><br><span class="line">&#125;,&#123;deep:true&#125;)</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><img src="/2024/11/07/About-Vue3/image-14.png" alt="alt text"><br>监视ref普通数据类型时，不用加.value,但如果是person（对象）就要加注意是ref类型时</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">法一：加上.value就相当于监视的是reactive所监视的数据</span><br><span class="line">watch(person.value,(newValue,oldValue)=&gt;&#123;</span><br><span class="line">  console.log(&#x27;person变了&#x27;,newValue,oldValue)</span><br><span class="line">&#125;,&#123;deep:false&#125;)</span><br><span class="line">法二：</span><br><span class="line">watch(person.value,(newValue,oldValue)=&gt;&#123;</span><br><span class="line">  console.log(&#x27;person变了&#x27;,newValue,oldValue)</span><br><span class="line">&#125;,&#123;deep:true&#125;)</span><br></pre></td></tr></table></figure><h3 id="watchEffect"><a href="#watchEffect" class="headerlink" title="watchEffect"></a>watchEffect</h3><p><img src="/2024/11/07/About-Vue3/image-15.png" alt="alt text"></p><h2 id="hook"><a href="#hook" class="headerlink" title="hook"></a>hook</h2><p><img src="/2024/11/07/About-Vue3/image-16.png" alt="alt text"><br>就是把一些api封装，复用</p><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p><img src="/2024/11/07/About-Vue3/image-17.png" alt="alt text"><br>组合API就是把生命周期钩子写到setup中还要引入，如果写到setup外，就写箭头前面的名字<br>组合式API生命钩子的使用时期，比配置项的方法写优先级更高</p><p><img src="/2024/11/07/About-Vue3/image-18.png" alt="alt text"></p><h2 id="props"><a href="#props" class="headerlink" title="props"></a>props</h2><p><img src="/2024/11/07/About-Vue3/image-19.png" alt="alt text"></p><h2 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h2><h4 id="原生dom事件"><a href="#原生dom事件" class="headerlink" title="原生dom事件"></a>原生dom事件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;pre @click=&quot;handler&quot;&gt;12345&lt;/pre&gt;</span><br><span class="line">&lt;pre @click=&quot;handler1(1,2,3,4,$event)&quot;&gt;12345&lt;/pre&gt;</span><br></pre></td></tr></table></figure><p>注意，必须是$event</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const handler = (event)=&gt;&#123;</span><br><span class="line">  console.log(event)</span><br><span class="line">&#125;   </span><br><span class="line">function handler1(p1,p2,p3,p4,p5)&#123;</span><br><span class="line">  console.log(p1,p2,p3,p4,p5)</span><br><span class="line">  //第五个参数是事件</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="组件也可以绑定原生DOM事件"><a href="#组件也可以绑定原生DOM事件" class="headerlink" title="组件也可以绑定原生DOM事件"></a>组件也可以绑定原生DOM事件</h4><p>但如果子组件接收了的话，就是自定义事件<br>注意一个问题，父组件给子组件绑定一个自定义事件，实际上是给子组件的<font color="Red">根组件</font>绑定，在本例中就是给.son绑定,所以你点击子组件的任意一处都会触发事件，利用了事件委托</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;FirstChild @click=&quot;handler2&quot;/&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function handler2()&#123;</span><br><span class="line">  console.log(123)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>子组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;son&quot;&gt;</span><br><span class="line">  &lt;h2&gt;姓名1是:&#123;&#123; name &#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;button @click=&quot;get&quot;&gt;点我获取姓名&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h4 id="自定义事件：子给父传递数组"><a href="#自定义事件：子给父传递数组" class="headerlink" title="自定义事件：子给父传递数组"></a>自定义事件：子给父传递数组</h4><p>父组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;SecChild @xxx=&quot;handler3&quot;/&gt;</span><br></pre></td></tr></table></figure><p>父组件中的回调</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function handler3(p1)&#123;</span><br><span class="line"> console.log(p1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>子组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;son2&quot;&gt;</span><br><span class="line">    &lt;h2&gt;22222&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;handler&quot;&gt;自定义&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>利用defineEmits方法返回<font color="Purple">函数</font>触发自定义事件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">//不需要引入</span><br><span class="line">let emit=defineEmits([&#x27;xxx&#x27;])</span><br><span class="line">function handler()&#123;</span><br><span class="line">  emit(&#x27;xxx&#x27;,&#x27;xs&#x27;)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>在Vue3中，子组件给父组件传递数据需要通过自定义事件进行。在父组件中，形式和Vue2相同，就是在组件实例对象上绑定一个事件并且让他的值等于父组件的一个回调函数。<br>而在子组件中，我们需要通过emit&#x3D;defineEmits([‘xxx’])得到在父组件中绑定的事件，然后就可以直接传参。父组件的回调函数接受的参数就是子组件调用自定义事件所传的参数<br>@xxx&#x3D;”handler3”<br>这里的 xxx 并不是一个变量或响应式属性，而是一个事件名。当子组件通过 this.$emit(‘xxx’, …) 触发这个事件时，不管 xxx 这个字符串本身是否变化，只要事件名匹配，父组件中对应的监听器就会触发，并调用 handler3 方法。</p><h2 id="全局事件总线"><a href="#全局事件总线" class="headerlink" title="全局事件总线"></a>全局事件总线</h2><p>1.npm install mitt –save<br>2.在main.js中<br>import mitt from ‘mitt’<br>const $bus &#x3D; mitt()<br>export default $bus<br>组件一：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import $bus from &#x27;../main&#x27;</span><br><span class="line">import &#123; onMounted &#125; from &#x27;vue&#x27;;</span><br><span class="line">onMounted(()=&gt;&#123;</span><br><span class="line">  $bus.on(&#x27;car&#x27;,(car)=&gt;&#123;</span><br><span class="line">    console.log(car)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>组件2:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;son2&quot;&gt;</span><br><span class="line">    &lt;h2&gt;我是2&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;send&quot;&gt;给我姐姐&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import $bus from &#x27;../main&#x27;</span><br><span class="line"></span><br><span class="line">function send()&#123;</span><br><span class="line">  $bus.emit(&#x27;car&#x27;,&#123;car:&#x27;123&#x27;&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇博客~</title>
      <link href="/2024/11/06/MyFirstBlog/"/>
      <url>/2024/11/06/MyFirstBlog/</url>
      
        <content type="html"><![CDATA[<p>在隔窗老师的帮助下，我的博客终于搭建完毕！感谢隔窗老师！！！</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
