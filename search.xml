<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Element el-row,el-col布局</title>
      <link href="/2024/11/10/Element-el-row-el-col%E5%B8%83%E5%B1%80/"/>
      <url>/2024/11/10/Element-el-row-el-col%E5%B8%83%E5%B1%80/</url>
      
        <content type="html"><![CDATA[<p>element的布局方式与bootstrap原理是一样的，将网页划分成若干行，然后每行等分为若干列，基于这样的方式进行布局，形象的成为栅栏布局。<br>区别是element可将每行划分为24个分栏，而bootstrap是划分为12个分栏，从使用角度，还是24个分栏更加精细。</p><h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h2><p>首先每行使用<el-row>标签标识，然后每行内的列使用<el-col>标识，至于每列整行的宽度比例，则使用:span属性进行设置。</el-col></el-row></p><h3 id="分栏间隔"><a href="#分栏间隔" class="headerlink" title="分栏间隔"></a>分栏间隔</h3><p>有时候想为不同分栏之间设定一定的间隔，可以使用<el-row>标签的:gutter属性，注意默认间隔为0。<br>以下写法不生效：</el-row></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;span&gt;分栏间隔 无效&lt;/span&gt;</span><br><span class="line">    &lt;el-row :gutter=&quot;50&quot;&gt;</span><br><span class="line">      &lt;el-col :span=&quot;8&quot; class=&quot;lightgreen-box&quot;&gt;示例2&lt;/el-col&gt;</span><br><span class="line">      &lt;el-col :span=&quot;8&quot; class=&quot;orange-box&quot;&gt;示例2&lt;/el-col&gt;</span><br><span class="line">      &lt;el-col :span=&quot;8&quot; class=&quot;lightgreen-box&quot;&gt;示例2&lt;/el-col&gt;</span><br><span class="line">    &lt;/el-row&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;span&gt;分栏间隔 有效&lt;/span&gt;</span><br><span class="line">    &lt;el-row :gutter=&quot;24&quot;&gt;</span><br><span class="line">      &lt;el-col :span=&quot;8&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;lightgreen-box&quot;&gt;示例3&lt;/div&gt;</span><br><span class="line">      &lt;/el-col&gt;</span><br><span class="line">      &lt;el-col :span=&quot;8&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;orange-box&quot;&gt;示例3&lt;/div&gt;</span><br><span class="line">      &lt;/el-col&gt;</span><br><span class="line">      &lt;el-col :span=&quot;8&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;lightgreen-box&quot;&gt;示例3&lt;/div&gt;</span><br><span class="line">      &lt;/el-col&gt;</span><br><span class="line">    &lt;/el-row&gt;</span><br></pre></td></tr></table></figure><h3 id="分栏偏移"><a href="#分栏偏移" class="headerlink" title="分栏偏移"></a>分栏偏移</h3><p>有时候想让某个分栏不从左边显示，而是直接显示到中间或者右侧，例如右侧导航栏，我们希望它处于右侧且占据页面1&#x2F;3的宽度。此时可以借助offset属性来实现，表示偏移量。<br>此时，想占据1&#x2F;3宽度，则:span应为8，偏移量应为24-8&#x3D;16，所以代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;span&gt;分栏偏移&lt;/span&gt;</span><br><span class="line">    &lt;el-row&gt;</span><br><span class="line">      &lt;el-col :span=&quot;8&quot; :offset=&quot;16&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;lightgreen-box&quot;&gt;示例4&lt;/div&gt;</span><br><span class="line">      &lt;/el-col&gt;</span><br><span class="line">    &lt;/el-row&gt;</span><br><span class="line">    &lt;el-divider&gt;&lt;/el-divider&gt;//分割线</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Element组件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript</title>
      <link href="/2024/11/07/TypeScript/"/>
      <url>/2024/11/07/TypeScript/</url>
      
        <content type="html"><![CDATA[<h2 id="编译TypeScript"><a href="#编译TypeScript" class="headerlink" title="编译TypeScript"></a>编译TypeScript</h2><h3 id="命令行编译"><a href="#命令行编译" class="headerlink" title="命令行编译"></a>命令行编译</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tesc index</span><br></pre></td></tr></table></figure><h3 id="自动化编译"><a href="#自动化编译" class="headerlink" title="自动化编译"></a>自动化编译</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tesc init</span><br><span class="line">tesc --watch (监视所有文件)</span><br></pre></td></tr></table></figure><h3 id="tsconfig-json文件"><a href="#tsconfig-json文件" class="headerlink" title="tsconfig.json文件"></a>tsconfig.json文件</h3><p>当出现错误时，不进行转换</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;noEmitOnError&quot;: true,   </span><br></pre></td></tr></table></figure><h2 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h2><p><a href="./TypeScript/1.png"></a><a href="./TypeScript/2.png"></a></p><h3 id="类型声明"><a href="#类型声明" class="headerlink" title="类型声明"></a>类型声明</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">let a: string</span><br><span class="line">let b: number</span><br><span class="line">let c: boolean</span><br><span class="line">let d: &#x27;hello&#x27; //字面量类型以后只能存hello</span><br><span class="line">function count(x: number, y: number): number &#123;</span><br><span class="line">  return x + y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意:string 和 String 不一样，后者是包装对象<br><a href="./TypeScript/3.png"></a><br><a href="./TypeScript/4.png"></a></p><h3 id="any"><a href="#any" class="headerlink" title="any"></a>any</h3><p>任意类型，不进行类型检查</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let a: any</span><br><span class="line">//或let a </span><br><span class="line">a = 99</span><br><span class="line">a =&#x27;swjnswj&#x27;</span><br><span class="line">a =true</span><br></pre></td></tr></table></figure><p>any类型的变量可以赋值给任意类型的变量</p><h3 id="unknown"><a href="#unknown" class="headerlink" title="unknown"></a>unknown</h3><p>这样写是不行的即使此时s的值是个字符串</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">let s:unknown</span><br><span class="line">s=2</span><br><span class="line">s=true</span><br><span class="line">s = &#x27;as&#x27;</span><br><span class="line">let x: string</span><br><span class="line">x=s</span><br></pre></td></tr></table></figure><p>方法一</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if(typeof s === &#x27;string&#x27;)&#123;</span><br><span class="line">  x=s</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法二：断言的两种形式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = s as string </span><br><span class="line">x = &lt;string&gt;s</span><br></pre></td></tr></table></figure><h3 id="never"><a href="#never" class="headerlink" title="never"></a>never</h3><p>通常对函数做限制,不能用于变量（没意义）<br>js中如果不写返回值则返回undefined</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function demo():never&#123;</span><br><span class="line">  demo()</span><br><span class="line">  throw new Error(&#x27;程序运行异常！&#x27;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="void"><a href="#void" class="headerlink" title="void"></a>void</h3><p>通常用于限制函数返回值<br><a href="./TypeScript/5.png"></a><a href="./TypeScript/6.png"></a></p><h3 id="object"><a href="#object" class="headerlink" title="object"></a>object</h3><p><a href="./TypeScript/7.png"></a><a href="./TypeScript/8.png"></a></p><h3 id="声明一个对象类型"><a href="#声明一个对象类型" class="headerlink" title="声明一个对象类型"></a>声明一个对象类型</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">let person: &#123;</span><br><span class="line">  name: string</span><br><span class="line">  age?:number</span><br><span class="line">  [key:string]:any//索引签名</span><br><span class="line">&#125;</span><br><span class="line">person = &#123;name:&#x27;wyh&#x27;,age: 18&#125;</span><br><span class="line">person = &#123;name:&#x27;cyj&#x27;&#125;</span><br><span class="line">person = &#123;name:&#x27;cyj&#x27;;place:&#x27;河南&#x27;&#125;</span><br></pre></td></tr></table></figure><h3 id="声明一个函数类型"><a href="#声明一个函数类型" class="headerlink" title="声明一个函数类型"></a>声明一个函数类型</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let count: (a: number, b: number) =&gt; number</span><br><span class="line">count = (x,y) =&gt;&#123;</span><br><span class="line">  return x+y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="声明一个数组类型"><a href="#声明一个数组类型" class="headerlink" title="声明一个数组类型"></a>声明一个数组类型</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let arr: string[]</span><br><span class="line">let arr2: Array&lt;number&gt;</span><br><span class="line">arr =[&#x27;1&#x27;,&#x27;s&#x27;]</span><br><span class="line">arr2 =[100,200]</span><br></pre></td></tr></table></figure><h2 id="元组-tuple"><a href="#元组-tuple" class="headerlink" title="元组 tuple"></a>元组 tuple</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">let arr1: [string,number]</span><br><span class="line">let arr2: [string,boolean?]</span><br><span class="line">let arr3: [number,...string[]]</span><br><span class="line"></span><br><span class="line">arr1 = [&#x27;hello&#x27;,12]</span><br><span class="line">arr2 = [&#x27;hello&#x27;,false]</span><br><span class="line">arr3 = [1,&#x27;a&#x27;]</span><br></pre></td></tr></table></figure><h2 id="enum"><a href="#enum" class="headerlink" title="enum"></a>enum</h2><p>可以定义一组命名常量,数字递增，反向映射，枚举中的属性是只读的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">enum Direction &#123;</span><br><span class="line">  up,</span><br><span class="line">  down,</span><br><span class="line">  left,</span><br><span class="line">  right</span><br><span class="line">&#125;</span><br><span class="line">console.log(Direction.down)</span><br><span class="line">console.log(Direction[0])</span><br></pre></td></tr></table></figure><p>字符串枚举没有反向映射</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">enum Direction &#123;</span><br><span class="line">  up=&quot;up&quot;,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>常量枚举，js中代码量减少</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const enum Direction &#123;</span><br><span class="line">  up,</span><br><span class="line">  down,</span><br><span class="line">  left,</span><br><span class="line">  right</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="type-联合类型"><a href="#type-联合类型" class="headerlink" title="type 联合类型"></a>type 联合类型</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">type Status = number | string</span><br><span class="line">type Gender = &#x27;男&#x27; | &#x27;女&#x27;</span><br><span class="line">function print(data:Status):void&#123;</span><br><span class="line">  console.log(data)</span><br><span class="line">&#125;</span><br><span class="line">print(404)</span><br><span class="line">print(&#x27;404&#x27;)</span><br></pre></td></tr></table></figure><h2 id="type-并且类型"><a href="#type-并且类型" class="headerlink" title="type 并且类型"></a>type 并且类型</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">type Area = &#123;</span><br><span class="line">  height: number;</span><br><span class="line">  width: number;</span><br><span class="line">&#125;</span><br><span class="line">type Address = &#123;</span><br><span class="line">  num:number;</span><br><span class="line">  cell:number</span><br><span class="line">&#125;</span><br><span class="line">type House = Area &amp; Address</span><br><span class="line">const house:House = &#123;</span><br><span class="line">  height: 122,</span><br><span class="line">  width: 222,</span><br><span class="line">  num: 23,</span><br><span class="line">  cell: 3</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="特殊情况void-不奏效"><a href="#特殊情况void-不奏效" class="headerlink" title="特殊情况void 不奏效"></a>特殊情况void 不奏效</h2><p><a href="./TypeScript/9.png"></a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>About Vue3</title>
      <link href="/2024/11/07/About-Vue3/"/>
      <url>/2024/11/07/About-Vue3/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="创建一个vue3的项目"><a href="#创建一个vue3的项目" class="headerlink" title="创建一个vue3的项目"></a>创建一个vue3的项目</h2><h3 id="用vite"><a href="#用vite" class="headerlink" title="用vite"></a>用vite</h3><p>1.npm init vite-app vue3_vite（项目名称）<br>2.进入vue3_vite文件夹，安装依赖npm i<br>3.启动项目 npm run dev</p><h3 id="vue-cli"><a href="#vue-cli" class="headerlink" title="vue-cli"></a>vue-cli</h3><p>1.vue create vue_test<br>2.cd ,npm run serve</p><p><img src="/2024/11/07/About-Vue3/image.png" alt="alt text"><br><img src="/2024/11/07/About-Vue3/image-1.png" alt="alt text"><br><img src="/2024/11/07/About-Vue3/image-2.png" alt="alt text"><br>如果用ref监测一个对象类型的数据，那么ref 会求助reactive 把数据转换为 proxy类型的，<br>用reactive的话，数据直接就是proxy对象，就不用.value</p><p><img src="/2024/11/07/About-Vue3/image-3.png" alt="alt text"><br>下面为vue3内部的响应式的配置，Vue3可以直接对数据进行增删改查<br><img src="/2024/11/07/About-Vue3/image-4.png" alt="alt text"><br>其中，target 指 person,propName指所改的属性值<br><img src="/2024/11/07/About-Vue3/image-5.png" alt="alt text"></p><h2 id="ref和reactive对比："><a href="#ref和reactive对比：" class="headerlink" title="ref和reactive对比："></a>ref和reactive对比：</h2><p><img src="/2024/11/07/About-Vue3/image-6.png" alt="alt text"></p><h3 id="vue2-props，插槽-补充"><a href="#vue2-props，插槽-补充" class="headerlink" title="vue2 props，插槽 补充"></a>vue2 props，插槽 补充</h3><p>如果用props传数据的话，并且接收的话，那么会在vc实例对象上出现，但是不接收的话，就会出现在$attrs上<br>如果没有接收插槽的话，页面只是不显示，但是确实已经出现在组件实例对象的vc身上的$slots中<br><img src="/2024/11/07/About-Vue3/image-9.png" alt="alt text"><br><img src="/2024/11/07/About-Vue3/image-7.png" alt="alt text"><br>外部给组件传参时，并且数据是响应式的<br><img src="/2024/11/07/About-Vue3/image-8.png" alt="alt text"></p><p><img src="/2024/11/07/About-Vue3/image-10.png" alt="alt text"></p><h2 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h2><p>计算属性（computed properties）的定义是通过一个函数来创建的，但这个函数返回一个对象，这个对象描述了计算属性的 getter 和可选的 setter。</p><h4 id="简写形式"><a href="#简写形式" class="headerlink" title="简写形式"></a>简写形式</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2&gt;一个人的信息&lt;/h2&gt;</span><br><span class="line">  姓：&lt;input type=&quot;text&quot; v-model=&quot;person.firstname&quot;&gt;</span><br><span class="line">  名：&lt;input type=&quot;text&quot; v-model=&quot;person.lastname&quot;&gt;</span><br><span class="line">  全名：&lt;h4&gt;&#123;&#123;person.fullName&#125;&#125;&lt;/h4&gt;</span><br><span class="line">  全名：&lt;input type=&quot;text&quot; v-model=&quot;person.fullName&quot;&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123;reactive&#125; from &#x27;vue&#x27;</span><br><span class="line">import &#123;computed&#125; from &#x27;vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;App&#x27;,</span><br><span class="line">  setup()&#123;</span><br><span class="line">    let person = reactive(&#123;</span><br><span class="line">      firstname: &#x27;张&#x27;,</span><br><span class="line">      lastname: &#x27;三&#x27;</span><br><span class="line">    &#125;)</span><br><span class="line">    let fullName = computed(</span><br><span class="line">      ()=&gt;&#123;</span><br><span class="line">        return person.firstname + &#x27;-&#x27; + person.lastname</span><br><span class="line">      &#125;</span><br><span class="line">    ) </span><br><span class="line">    return &#123;</span><br><span class="line">      person,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的计算属性只可读，不可更改，也就是说最后一个文本框里的值不可以输入或删除<br>还可以这样写，相当于直接给person追加了一个属性</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">person.fullName = computed(</span><br><span class="line">()=&gt;&#123;</span><br><span class="line">  return person.firstname + &#x27;-&#x27; + person.lastname</span><br><span class="line">&#125;) </span><br></pre></td></tr></table></figure><h4 id="完整版"><a href="#完整版" class="headerlink" title="完整版"></a>完整版</h4><p>完整版中fullName不再是person中的属性，因此在组件中引用时不必再加上person.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">let fullName=computed(&#123;</span><br><span class="line">get()&#123;</span><br><span class="line">  return person.firstname + &#x27;-&#x27; + person.lastname</span><br><span class="line">&#125;,</span><br><span class="line">set(value)&#123;</span><br><span class="line">  const nameArr = value.split(&#x27;-&#x27;)</span><br><span class="line">  person.firstname=nameArr[0]</span><br><span class="line">  person.lastname=nameArr[1]</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">return &#123;</span><br><span class="line">  person,</span><br><span class="line">  fullName</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="watch监视"><a href="#watch监视" class="headerlink" title="watch监视"></a>watch监视</h2><p>watch写在setup()里面<br>基本代码<br>这里面注意两个容易出错的点：<br>1.函数直接定义即可<br>2.ref类型的数据需要加.value</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2&gt;当前求和为：&#123;&#123;sum&#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;button @click=&quot;sum++&quot;&gt;点我+1&lt;/button&gt;</span><br><span class="line">  &lt;hr&gt;</span><br><span class="line">  &lt;h2&gt;当前的信息为&#123;&#123; msg &#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;button @click=&quot;changemsg&quot;&gt;修改信息&lt;/button&gt;</span><br><span class="line">  &lt;hr&gt;</span><br><span class="line">  &lt;h2&gt;姓名：&#123;&#123; person.name &#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;h2&gt;年龄：&#123;&#123; person.age &#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;h2&gt;薪资：&#123;&#123; person.salary &#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;button @click=&quot;changename&quot;&gt;修改姓名&lt;/button&gt;</span><br><span class="line">  &lt;button @click=&quot;person.age++&quot;&gt;增长年龄&lt;/button&gt;</span><br><span class="line">  &lt;button @click=&quot;person.salary++&quot;&gt;涨薪&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123;reactive,watch,ref&#125; from &#x27;vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;App&#x27;,</span><br><span class="line">  setup()&#123;</span><br><span class="line">    let sum=ref(0)</span><br><span class="line">    let msg=ref(&#x27;你好&#x27;)</span><br><span class="line">    let person=reactive(&#123;</span><br><span class="line">      name:&#x27;张三&#x27;,</span><br><span class="line">      age:18,</span><br><span class="line">      salary:20</span><br><span class="line">    &#125;)</span><br><span class="line">    let changemsg =()=&gt;msg.value += &#x27;!&#x27;</span><br><span class="line">    let changename =()=&gt;person.name += &#x27;!&#x27;</span><br><span class="line">    return &#123;</span><br><span class="line">      sum,</span><br><span class="line">      msg,</span><br><span class="line">      changemsg,</span><br><span class="line">      changename,</span><br><span class="line">      person</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="1-监视ref-所定义的一个响应式数据"><a href="#1-监视ref-所定义的一个响应式数据" class="headerlink" title="1.监视ref 所定义的一个响应式数据"></a>1.监视ref 所定义的一个响应式数据</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">watch(sum,(newValue,oldValue)=&gt;&#123;</span><br><span class="line">  console.log(&#x27;sum变了&#x27;,newValue,oldValue)</span><br><span class="line">&#125;,&#123;immediate:true&#125;)</span><br></pre></td></tr></table></figure><p><img src="/2024/11/07/About-Vue3/image-11.png"></p><h4 id="2-监视ref-所定义的多个响应式数据"><a href="#2-监视ref-所定义的多个响应式数据" class="headerlink" title="2.监视ref 所定义的多个响应式数据"></a>2.监视ref 所定义的多个响应式数据</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">watch([sum,msg],(newValue,oldValue)=&gt;&#123;</span><br><span class="line">  console.log(&#x27;sum,msg变了&#x27;,newValue,oldValue)</span><br><span class="line">&#125;,&#123;immediate:true&#125;)</span><br></pre></td></tr></table></figure><p><img src="/2024/11/07/About-Vue3/image-12.png" alt="alt text"></p><h4 id="3-监视reactive-所定义的一个响应式数据的全部属性"><a href="#3-监视reactive-所定义的一个响应式数据的全部属性" class="headerlink" title="3.监视reactive 所定义的一个响应式数据的全部属性"></a>3.监视reactive 所定义的一个响应式数据的全部属性</h4><h5 id="注意1-此处无法正确的获取oldValue-2-强制开启了深度监视"><a href="#注意1-此处无法正确的获取oldValue-2-强制开启了深度监视" class="headerlink" title="注意1.此处无法正确的获取oldValue  2.强制开启了深度监视"></a>注意1.此处无法正确的获取oldValue  2.强制开启了深度监视</h5><p>就算person中还有一个对象，也会被监视到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">watch(person,(newValue,oldValue)=&gt;&#123;</span><br><span class="line">  console.log(&#x27;person变了&#x27;,newValue,oldValue)</span><br><span class="line">&#125;,&#123;deep:false&#125;)</span><br></pre></td></tr></table></figure><p><img src="/2024/11/07/About-Vue3/image-13.png" alt="alt text"></p><h4 id="4-监视reactive-所定义的一个响应式数据的某个属性—写成函数的形式"><a href="#4-监视reactive-所定义的一个响应式数据的某个属性—写成函数的形式" class="headerlink" title="4.监视reactive 所定义的一个响应式数据的某个属性—写成函数的形式"></a>4.监视reactive 所定义的一个响应式数据的某个属性—写成函数的形式</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">watch(()=&gt;person.age,(newValue,oldValue)=&gt;&#123;</span><br><span class="line">  console.log(&#x27;person  age变了&#x27;,newValue,oldValue)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="5-监视reactive-所定义的一个响应式数据的某些属性"><a href="#5-监视reactive-所定义的一个响应式数据的某些属性" class="headerlink" title="5.监视reactive 所定义的一个响应式数据的某些属性"></a>5.监视reactive 所定义的一个响应式数据的某些属性</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">watch([()=&gt;person.name,()=&gt;person.age],(newValue,oldValue)=&gt;&#123;</span><br><span class="line">  console.log(&#x27;name age变了&#x27;,newValue,oldValue)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="特殊情况"><a href="#特殊情况" class="headerlink" title="特殊情况"></a>特殊情况</h4><p>更改一下配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">setup()&#123;</span><br><span class="line">let sum=ref(0)</span><br><span class="line">let msg=ref(&#x27;你好&#x27;)</span><br><span class="line">let person=reactive(&#123;</span><br><span class="line">  name:&#x27;张三&#x27;,</span><br><span class="line">  age:18,</span><br><span class="line">  salary:20,</span><br><span class="line">  job:&#123;</span><br><span class="line">    j1:&#123;</span><br><span class="line">      j1s:9999</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里必须加上{deep:true}，否则监视不到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">watch(()=&gt;person.job,(newValue,oldValue)=&gt;&#123;</span><br><span class="line">  console.log(&#x27;job变了&#x27;,newValue,oldValue)</span><br><span class="line">&#125;,&#123;deep:true&#125;)</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><img src="/2024/11/07/About-Vue3/image-14.png" alt="alt text"><br>监视ref普通数据类型时，不用加.value,但如果是person（对象）就要加注意是ref类型时</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">法一：加上.value就相当于监视的是reactive所监视的数据</span><br><span class="line">watch(person.value,(newValue,oldValue)=&gt;&#123;</span><br><span class="line">  console.log(&#x27;person变了&#x27;,newValue,oldValue)</span><br><span class="line">&#125;,&#123;deep:false&#125;)</span><br><span class="line">法二：</span><br><span class="line">watch(person.value,(newValue,oldValue)=&gt;&#123;</span><br><span class="line">  console.log(&#x27;person变了&#x27;,newValue,oldValue)</span><br><span class="line">&#125;,&#123;deep:true&#125;)</span><br></pre></td></tr></table></figure><h3 id="watchEffect"><a href="#watchEffect" class="headerlink" title="watchEffect"></a>watchEffect</h3><p><img src="/2024/11/07/About-Vue3/image-15.png" alt="alt text"></p><h2 id="hook"><a href="#hook" class="headerlink" title="hook"></a>hook</h2><p><img src="/2024/11/07/About-Vue3/image-16.png" alt="alt text"><br>就是把一些api封装，复用</p><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p><img src="/2024/11/07/About-Vue3/image-17.png" alt="alt text"><br>组合API就是把生命周期钩子写到setup中还要引入，如果写到setup外，就写箭头前面的名字<br>组合式API生命钩子的使用时期，比配置项的方法写优先级更高</p><p><img src="/2024/11/07/About-Vue3/image-18.png" alt="alt text"></p><h2 id="props"><a href="#props" class="headerlink" title="props"></a>props</h2><p><img src="/2024/11/07/About-Vue3/image-19.png" alt="alt text"></p><h2 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h2><h4 id="原生dom事件"><a href="#原生dom事件" class="headerlink" title="原生dom事件"></a>原生dom事件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;pre @click=&quot;handler&quot;&gt;12345&lt;/pre&gt;</span><br><span class="line">&lt;pre @click=&quot;handler1(1,2,3,4,$event)&quot;&gt;12345&lt;/pre&gt;</span><br></pre></td></tr></table></figure><p>注意，必须是$event</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const handler = (event)=&gt;&#123;</span><br><span class="line">  console.log(event)</span><br><span class="line">&#125;   </span><br><span class="line">function handler1(p1,p2,p3,p4,p5)&#123;</span><br><span class="line">  console.log(p1,p2,p3,p4,p5)</span><br><span class="line">  //第五个参数是事件</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="组件也可以绑定原生DOM事件"><a href="#组件也可以绑定原生DOM事件" class="headerlink" title="组件也可以绑定原生DOM事件"></a>组件也可以绑定原生DOM事件</h4><p>但如果子组件接收了的话，就是自定义事件<br>注意一个问题，父组件给子组件绑定一个自定义事件，实际上是给子组件的<font color="Red">根组件</font>绑定，在本例中就是给.son绑定,所以你点击子组件的任意一处都会触发事件，利用了事件委托</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;FirstChild @click=&quot;handler2&quot;/&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function handler2()&#123;</span><br><span class="line">  console.log(123)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>子组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;son&quot;&gt;</span><br><span class="line">  &lt;h2&gt;姓名1是:&#123;&#123; name &#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;button @click=&quot;get&quot;&gt;点我获取姓名&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h4 id="自定义事件：子给父传递数组"><a href="#自定义事件：子给父传递数组" class="headerlink" title="自定义事件：子给父传递数组"></a>自定义事件：子给父传递数组</h4><p>父组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;SecChild @xxx=&quot;handler3&quot;/&gt;</span><br></pre></td></tr></table></figure><p>父组件中的回调</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function handler3(p1)&#123;</span><br><span class="line"> console.log(p1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>子组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;son2&quot;&gt;</span><br><span class="line">    &lt;h2&gt;22222&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;handler&quot;&gt;自定义&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>利用defineEmits方法返回<font color="Purple">函数</font>触发自定义事件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">//不需要引入</span><br><span class="line">let emit=defineEmits([&#x27;xxx&#x27;])</span><br><span class="line">function handler()&#123;</span><br><span class="line">  emit(&#x27;xxx&#x27;,&#x27;xs&#x27;)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>在Vue3中，子组件给父组件传递数据需要通过自定义事件进行。在父组件中，形式和Vue2相同，就是在组件实例对象上绑定一个事件并且让他的值等于父组件的一个回调函数。<br>而在子组件中，我们需要通过emit&#x3D;defineEmits([‘xxx’])得到在父组件中绑定的事件，然后就可以直接传参。父组件的回调函数接受的参数就是子组件调用自定义事件所传的参数<br>@xxx&#x3D;”handler3”<br>这里的 xxx 并不是一个变量或响应式属性，而是一个事件名。当子组件通过 this.$emit(‘xxx’, …) 触发这个事件时，不管 xxx 这个字符串本身是否变化，只要事件名匹配，父组件中对应的监听器就会触发，并调用 handler3 方法。</p><h2 id="全局事件总线"><a href="#全局事件总线" class="headerlink" title="全局事件总线"></a>全局事件总线</h2><p>1.npm install mitt –save<br>2.在main.js中<br>import mitt from ‘mitt’<br>const $bus &#x3D; mitt()<br>export default $bus<br>组件一：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import $bus from &#x27;../main&#x27;</span><br><span class="line">import &#123; onMounted &#125; from &#x27;vue&#x27;;</span><br><span class="line">onMounted(()=&gt;&#123;</span><br><span class="line">  $bus.on(&#x27;car&#x27;,(car)=&gt;&#123;</span><br><span class="line">    console.log(car)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>组件2:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;son2&quot;&gt;</span><br><span class="line">    &lt;h2&gt;我是2&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;send&quot;&gt;给我姐姐&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import $bus from &#x27;../main&#x27;</span><br><span class="line"></span><br><span class="line">function send()&#123;</span><br><span class="line">  $bus.emit(&#x27;car&#x27;,&#123;car:&#x27;123&#x27;&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇博客~</title>
      <link href="/2024/11/06/MyFirstBlog/"/>
      <url>/2024/11/06/MyFirstBlog/</url>
      
        <content type="html"><![CDATA[<p>在隔窗老师的帮助下，我的博客终于搭建完毕！感谢隔窗老师！！！</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
