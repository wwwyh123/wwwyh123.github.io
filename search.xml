<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>offset,client,scroll</title>
      <link href="/2025/04/22/offset-client-scroll/"/>
      <url>/2025/04/22/offset-client-scroll/</url>
      
        <content type="html"><![CDATA[<h2 id="offset"><a href="#offset" class="headerlink" title="offset"></a>offset</h2><h3 id="offsetParent"><a href="#offsetParent" class="headerlink" title="offsetParent"></a>offsetParent</h3><p>定义：与当前元素最近的经过定位的父级元素<br>注意：</p><ol><li>元素自身有<code>fixed</code>定位,<code>offsetParent</code>是<code>null</code></li><li>元素自身无<code>fixed</code>定位,<code>offsetParent</code>是<code>body</code></li><li>元素自身无<code>fixed</code>定位,父级元素存在定位，<code>offsetParent</code>是最近的定位的父级元素</li><li><code>body</code>元素的<code>offsetParent</code>是<code>null</code></li></ol><h3 id="offsetWidth-offsetHeight-只读"><a href="#offsetWidth-offsetHeight-只读" class="headerlink" title="offsetWidth,offsetHeight(只读)"></a>offsetWidth,offsetHeight(只读)</h3><p><code>offsetWidth = width + border + padding</code></p><p><code>box.style.width</code>和<code>box.style.height</code>只能获取行内的属性</p><h3 id="offsetTop-offsetLeft"><a href="#offsetTop-offsetLeft" class="headerlink" title="offsetTop,offsetLeft"></a>offsetTop,offsetLeft</h3><p><code>offsetTop</code>:当前元素的最上到<code>offsetParent</code>元素的最上的距离<br><code>offsetLeft</code>:当前元素的最左到<code>offsetParent</code>元素的最左的距离<br><code>e.offsetX</code> 和 <code>e.offsetY</code> 是鼠标事件对象的属性，用于直接获取鼠标点击位置相对于触发事件的元素（如 <code>&lt;canvas&gt;</code>）左上角的坐标。</p><h2 id="client"><a href="#client" class="headerlink" title="client"></a>client</h2><p><code>clientWidth = width + padding</code><br><code>clientHeight = height + padding</code><br><code>clientLeft</code>左边框的大小<br><code>clientTop</code>上边框的大小<br><code>e.clientX</code> 和 <code>e.clientY </code>是鼠标事件对象 (e) 的属性，表示鼠标点击位置相对于视口的水平和垂直坐标。<br>注意：</p><ol><li>所有<code>client</code>属性都是只读的</li><li>如果给元素设置<code>display:none;</code>客户端<code>client</code>的属性都为0；</li><li>尽量避免重复访问这些属性</li></ol><h2 id="scrollHeight-scrolWidth"><a href="#scrollHeight-scrolWidth" class="headerlink" title="scrollHeight,scrolWidth"></a>scrollHeight,scrolWidth</h2><p><code>scrollHeight</code>:表示元素的总高度，包含由于溢出而无法在网页上的不可见部分<br><code>scrollWidth</code>:表示元素的总宽度，包含由于溢出而无法在网页上的不可见部分</p><ol><li>无滚动条的时候，<code>scrollHeight</code>和<code>clientHeight</code>是相等的</li></ol><h3 id="scrollTop-可读写"><a href="#scrollTop-可读写" class="headerlink" title="scrollTop(可读写)"></a>scrollTop(可读写)</h3><p>元素被卷起的高度<br>当滚动条滚动到内容底部时，符合以下公式<br><code>scrollHeight=clientHeight+scrollTop</code></p><p><code>var docScrollTop = document.documentElement.scrollTop || document.body.scrollTop</code><br><code>scrollTo(x-coord, y-coord)</code></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>文件上传</title>
      <link href="/2025/03/24/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
      <url>/2025/03/24/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
      
        <content type="html"><![CDATA[<p><img src="/2025/03/24/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image.png"><br>file是blob的子类</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> @<span class="attr">change</span>=<span class="string">&quot;fileChange&quot;</span> <span class="attr">multiple</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; percent &#125;&#125;%<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="keyword">let</span> _fileObj</span><br><span class="line"><span class="keyword">let</span> imgList = <span class="title function_">ref</span>([])</span><br><span class="line"><span class="keyword">let</span> percent = <span class="title function_">ref</span>(<span class="number">0</span>)</span><br><span class="line"><span class="comment">// const axios = require(&#x27;axios&#x27;);</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fileChange</span> = (<span class="params">e</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> file = e.<span class="property">target</span>.<span class="property">files</span>[<span class="number">0</span>]</span><br><span class="line">  _fileObj = file</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(imgList.<span class="property">value</span>)</span><br><span class="line">  <span class="keyword">if</span>(file.<span class="property">size</span>&gt;<span class="number">10</span>*<span class="number">24</span>*<span class="number">24</span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;文件不能大于十兆&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(file.<span class="property">type</span> != <span class="string">&#x27;video/mp4&#x27;</span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;必须是mp4&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> _sliceBlob = <span class="keyword">new</span> <span class="title class_">Blob</span>([file]).<span class="title function_">slice</span>(<span class="number">0</span>, <span class="number">5000</span>)<span class="comment">//截取文件并转换为一个base64</span></span><br><span class="line">  <span class="keyword">let</span> _sliceFile = <span class="keyword">new</span> <span class="title class_">File</span>([_sliceBlob], <span class="string">&#x27;test.png&#x27;</span>)</span><br><span class="line">  <span class="comment">// FileReader 是一个内置的 Web API，用于异步读取文件内容</span></span><br><span class="line">  <span class="keyword">let</span> fr = <span class="keyword">new</span> <span class="title class_">FileReader</span>()</span><br><span class="line">  fr.<span class="title function_">readAsDataURL</span>(_sliceFile)</span><br><span class="line">  <span class="keyword">let</span> self = <span class="variable language_">this</span></span><br><span class="line">  fr.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;<span class="comment">//当 FileReader 完成读取操作时触发。</span></span><br><span class="line">    self.<span class="property">imgbase64</span> = fr.<span class="property">result</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">submit</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">//切片上传</span></span><br><span class="line">  <span class="keyword">let</span> size = <span class="number">2</span> * <span class="number">1024</span> * <span class="number">1024</span></span><br><span class="line">  <span class="keyword">let</span> fileSize = _fileObj.<span class="property">size</span></span><br><span class="line">  <span class="keyword">let</span> current = <span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span> (current &lt; fileSize) &#123;</span><br><span class="line">    <span class="keyword">let</span> _formData = <span class="keyword">new</span> <span class="title class_">FormData</span>()</span><br><span class="line">    _formData.<span class="title function_">append</span>(_fileObj.<span class="property">name</span>, _fileObj.<span class="title function_">slice</span>(current, current + size))</span><br><span class="line">    <span class="keyword">await</span> axios.<span class="title function_">post</span>(<span class="string">&#x27;http:127.0.0.1:3008/upload&#x27;</span>, _formData)</span><br><span class="line">    percent.<span class="property">value</span> = <span class="title class_">Math</span>.<span class="title function_">min</span>((current / fileSize) * <span class="number">100</span>, <span class="number">100</span>)</span><br><span class="line">    current += size</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> _formData = <span class="keyword">new</span> <span class="title class_">FormData</span>()</span><br><span class="line">  _formData.<span class="title function_">append</span>(<span class="string">&#x27;user&#x27;</span>, <span class="string">&#x27;asd&#x27;</span>)</span><br><span class="line">  _formData.<span class="title function_">append</span>(<span class="string">&#x27;file&#x27;</span>, _fileObj)</span><br><span class="line">  axios.<span class="title function_">post</span>(<span class="string">&#x27;/upload&#x27;</span>, _formData)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>多文件上传</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">fileChange</span> = (<span class="params">e</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> file = e.<span class="property">target</span>.<span class="property">files</span>[<span class="number">0</span>]</span><br><span class="line">  _fileObj = file</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(imgList.<span class="property">value</span>)</span><br><span class="line">  <span class="comment">// 多文件上传</span></span><br><span class="line"><span class="keyword">if</span> (e.<span class="property">target</span>.<span class="property">files</span>.<span class="property">length</span> &gt; <span class="number">1</span>) &#123;</span><br><span class="line">  imgList.<span class="property">value</span>.<span class="title function_">concat</span>(e.<span class="property">target</span>.<span class="property">files</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  imgList.<span class="property">value</span>.<span class="title function_">push</span>(e.<span class="property">target</span>.<span class="property">files</span>[<span class="number">0</span>])</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">submit</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">//多文件上传</span></span><br><span class="line">  imgList.<span class="property">value</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> _formData = <span class="keyword">new</span> <span class="title class_">FormData</span>()</span><br><span class="line">    _formData.<span class="title function_">append</span>(item.<span class="property">name</span> + <span class="string">&quot;file&quot;</span>, item)</span><br><span class="line">    <span class="comment">// axios.post(&#x27;/upload&#x27;, _formData)</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>切片上传</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">submit</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">//切片上传</span></span><br><span class="line">  <span class="keyword">let</span> size = <span class="number">2</span> * <span class="number">1024</span> * <span class="number">1024</span></span><br><span class="line">  <span class="keyword">let</span> fileSize = _fileObj.<span class="property">size</span></span><br><span class="line">  <span class="keyword">let</span> current = <span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span> (current &lt; fileSize) &#123;</span><br><span class="line">    <span class="keyword">let</span> _formData = <span class="keyword">new</span> <span class="title class_">FormData</span>()</span><br><span class="line">    _formData.<span class="title function_">append</span>(_fileObj.<span class="property">name</span>, _fileObj.<span class="title function_">slice</span>(current, current + size))</span><br><span class="line">    <span class="keyword">await</span> axios.<span class="title function_">post</span>(<span class="string">&#x27;http:127.0.0.1:3008/upload&#x27;</span>, _formData)</span><br><span class="line">    percent.<span class="property">value</span> = <span class="title class_">Math</span>.<span class="title function_">min</span>((current / fileSize) * <span class="number">100</span>, <span class="number">100</span>)</span><br><span class="line">    current += size</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>AST抽象语法树</title>
      <link href="/2025/03/21/AST%E6%8A%BD%E8%B1%A1%E8%AF%AD%E6%B3%95%E6%A0%91/"/>
      <url>/2025/03/21/AST%E6%8A%BD%E8%B1%A1%E8%AF%AD%E6%B3%95%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h2 id="前置算法题"><a href="#前置算法题" class="headerlink" title="前置算法题"></a>前置算法题</h2><p>如果是数字就入栈，并且吃掉一个<code>[</code>,字符串数组推进一个空字符串<br>如果是字符，就把字符串数组的栈顶改为当前字符<br>如果是<code>]</code>，数字出栈，字符出栈后重复相应的次数，再拼接到当前字符串数组的栈顶中去。<br>还需要一个记录剩下未处理的字符的字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;3[abc]&#x27;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">smartRepeat</span>(<span class="params">str</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> num = []</span><br><span class="line">  <span class="keyword">let</span> result = []</span><br><span class="line">  <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span> (index &lt; str.<span class="property">length</span> - <span class="number">1</span>) &#123;</span><br><span class="line">    rest = str.<span class="title function_">substring</span>(index)</span><br><span class="line">    <span class="comment">//检查剩余部分是不是以数字和[开头</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="regexp">/^\d+\[/</span>.<span class="title function_">test</span>(rest)) &#123;</span><br><span class="line">      <span class="comment">//得到这个数字</span></span><br><span class="line">      <span class="keyword">let</span> times = <span class="title class_">Number</span>(rest.<span class="title function_">match</span>(<span class="regexp">/^(\d+)\[/</span>)[<span class="number">1</span>])</span><br><span class="line">      num.<span class="title function_">push</span>(times)<span class="comment">//数字入栈</span></span><br><span class="line">      result.<span class="title function_">push</span>(<span class="string">&#x27;&#x27;</span>)<span class="comment">//字符串入栈</span></span><br><span class="line">      <span class="comment">//指针后移，times有多少位就后移多少位加一位(跳过[)</span></span><br><span class="line">      index += times.<span class="title function_">toString</span>().<span class="property">length</span> + <span class="number">1</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/^\w+/</span>.<span class="title function_">test</span>(rest)) &#123;</span><br><span class="line">      <span class="comment">//如果这个字符是字母，就把栈顶元素改为这个字母</span></span><br><span class="line">      <span class="keyword">let</span> word = rest.<span class="title function_">match</span>(<span class="regexp">/^(\w+)\]/</span>)[<span class="number">1</span>]</span><br><span class="line">      result[result.<span class="property">length</span> - <span class="number">1</span>] = word</span><br><span class="line">      index += word.<span class="property">length</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (rest[<span class="number">0</span>] == <span class="string">&#x27;]&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> times = num.<span class="title function_">pop</span>()</span><br><span class="line">      <span class="keyword">let</span> word = result.<span class="title function_">pop</span>()</span><br><span class="line">      result[result.<span class="property">length</span> - <span class="number">1</span>] += word.<span class="title function_">repeat</span>(times)</span><br><span class="line">      index++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result[<span class="number">0</span>].<span class="title function_">repeat</span>(num[<span class="number">0</span>])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">smartRepeat</span>(str))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>mustache模板引擎</title>
      <link href="/2025/03/20/mustache%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/"/>
      <url>/2025/03/20/mustache%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/</url>
      
        <content type="html"><![CDATA[<h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p><strong>遍历数组</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> templateStr = <span class="string">`</span></span><br><span class="line"><span class="string">  &lt;ul&gt;</span></span><br><span class="line"><span class="string">    &#123;&#123;#arr&#125;&#125;</span></span><br><span class="line"><span class="string">      &lt;li&gt;</span></span><br><span class="line"><span class="string">        &lt;div&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;div class=&quot;bd&quot;&gt;</span></span><br><span class="line"><span class="string">          &lt;p&gt;姓名:&#123;&#123;name&#125;&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="string">          &lt;p&gt;性别:&#123;&#123;sex&#125;&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="string">          &lt;p&gt;年龄:&#123;&#123;age&#125;&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">      &lt;/li&gt;</span></span><br><span class="line"><span class="string">    &#123;&#123;/arr&#125;&#125;</span></span><br><span class="line"><span class="string">  &lt;/ul&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line"><span class="keyword">var</span> data = &#123;</span><br><span class="line">  <span class="attr">arr</span>: [</span><br><span class="line">    &#123; <span class="string">&quot;name&quot;</span>: <span class="number">1</span>, <span class="string">&quot;age&quot;</span>: <span class="number">12</span>, <span class="string">&quot;sex&quot;</span>: <span class="string">&#x27;nan&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="string">&quot;name&quot;</span>: <span class="number">2</span>, <span class="string">&quot;age&quot;</span>: <span class="number">66</span>, <span class="string">&quot;sex&quot;</span>: <span class="string">&#x27;nan&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="string">&quot;name&quot;</span>: <span class="number">3</span>, <span class="string">&quot;age&quot;</span>: <span class="number">99</span>, <span class="string">&quot;sex&quot;</span>: <span class="string">&#x27;nan&#x27;</span> &#125;,</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> domStr = mustache.<span class="title function_">render</span>(templateStr, data)<span class="comment">//模板，包含要循环属性的对象</span></span><br></pre></td></tr></table></figure><p>注意这里不能是</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [</span><br><span class="line">  &#123; <span class="string">&quot;name&quot;</span>: <span class="number">1</span>, <span class="string">&quot;age&quot;</span>: <span class="number">12</span>, <span class="string">&quot;sex&quot;</span>: <span class="string">&#x27;nan&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="string">&quot;name&quot;</span>: <span class="number">2</span>, <span class="string">&quot;age&quot;</span>: <span class="number">66</span>, <span class="string">&quot;sex&quot;</span>: <span class="string">&#x27;nan&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="string">&quot;name&quot;</span>: <span class="number">3</span>, <span class="string">&quot;age&quot;</span>: <span class="number">99</span>, <span class="string">&quot;sex&quot;</span>: <span class="string">&#x27;nan&#x27;</span> &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>不循环</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> templateStr = <span class="string">`&lt;h1&gt;我买了一个&#123;&#123;thing&#125;&#125;,好&#123;&#123;mood&#125;&#125;啊&lt;/h1&gt;`</span></span><br><span class="line"><span class="keyword">var</span> data = &#123;</span><br><span class="line">  <span class="attr">thing</span>: <span class="string">&#x27;华为&#x27;</span>,</span><br><span class="line">  <span class="attr">mood</span>: <span class="string">&#x27;开心&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> domStr = mustache.<span class="title function_">render</span>(templateStr, data)</span><br></pre></td></tr></table></figure><p><strong>循环简单数组</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> templateStr = <span class="string">`</span></span><br><span class="line"><span class="string">  &lt;ul&gt;</span></span><br><span class="line"><span class="string">    &#123;&#123;#arr&#125;&#125;</span></span><br><span class="line"><span class="string">      &lt;li&gt;&#123;&#123;.&#125;&#125;&lt;/li&gt;</span></span><br><span class="line"><span class="string">    &#123;&#123;/arr&#125;&#125;</span></span><br><span class="line"><span class="string">  &lt;/ul&gt;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"><span class="keyword">var</span> data = &#123;</span><br><span class="line">  <span class="attr">arr</span>: [<span class="string">&#x27;苹果&#x27;</span>, <span class="string">&#x27;鸭梨&#x27;</span>, <span class="string">&#x27;西瓜&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> domStr = mustache.<span class="title function_">render</span>(templateStr, data)</span><br></pre></td></tr></table></figure><p>嵌套循环</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> templateStr = <span class="string">`</span></span><br><span class="line"><span class="string">  &lt;ul&gt;</span></span><br><span class="line"><span class="string">    &#123;&#123;#arr&#125;&#125;</span></span><br><span class="line"><span class="string">      &lt;li&gt;&#123;&#123;name&#125;&#125;的爱好是:</span></span><br><span class="line"><span class="string">        &lt;ol&gt;</span></span><br><span class="line"><span class="string">          &#123;&#123;#hobbies&#125;&#125;</span></span><br><span class="line"><span class="string">            &lt;li&gt;&#123;&#123;.&#125;&#125;&lt;/li&gt;</span></span><br><span class="line"><span class="string">          &#123;&#123;/hobbies&#125;&#125;</span></span><br><span class="line"><span class="string">        &lt;/ol&gt;</span></span><br><span class="line"><span class="string">      &lt;/li&gt;</span></span><br><span class="line"><span class="string">    &#123;&#123;/arr&#125;&#125;</span></span><br><span class="line"><span class="string">  &lt;/ul&gt;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"><span class="keyword">var</span> data = &#123;</span><br><span class="line">  <span class="attr">arr</span>: [</span><br><span class="line">    &#123; <span class="string">&quot;name&quot;</span>: <span class="number">1</span>, <span class="string">&quot;age&quot;</span>: <span class="number">12</span>, <span class="string">&quot;hobbies&quot;</span>: [<span class="string">&#x27;游泳&#x27;</span>, <span class="string">&#x27;羽毛球&#x27;</span>] &#125;,</span><br><span class="line">    &#123; <span class="string">&quot;name&quot;</span>: <span class="number">2</span>, <span class="string">&quot;age&quot;</span>: <span class="number">66</span>, <span class="string">&quot;hobbies&quot;</span>: [<span class="string">&#x27;12&#x27;</span>, <span class="string">&#x27;23&#x27;</span>, <span class="string">&#x27;34&#x27;</span>] &#125;,</span><br><span class="line">    &#123; <span class="string">&quot;name&quot;</span>: <span class="number">3</span>, <span class="string">&quot;age&quot;</span>: <span class="number">99</span>, <span class="string">&quot;hobbies&quot;</span>: [<span class="string">&#x27;22&#x27;</span>, <span class="string">&#x27;33&#x27;</span>, <span class="string">&#x27;44&#x27;</span>] &#125;,</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> domStr = mustache.<span class="title function_">render</span>(templateStr, data)</span><br></pre></td></tr></table></figure><h2 id="源码实现"><a href="#源码实现" class="headerlink" title="源码实现"></a>源码实现</h2><p>根源：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">SSG_TemplateEngine</span> = &#123;</span><br><span class="line">  <span class="comment">//渲染方法</span></span><br><span class="line">  <span class="title function_">render</span>(<span class="params">templateStr, data</span>) &#123;</span><br><span class="line">    <span class="comment">//调用函数让模板字符串变为tokens</span></span><br><span class="line">    <span class="keyword">let</span> tokens = <span class="title function_">parseTemplateToToken</span>(templateStr)</span><br><span class="line">    <span class="comment">// console.log(tokens)</span></span><br><span class="line">    <span class="comment">//调用renderTemplate(templateStr),让tokens数组变为dom字符串</span></span><br><span class="line">    <span class="keyword">let</span> resultStr = <span class="title function_">renderTemplate</span>(tokens, data)</span><br><span class="line">    <span class="keyword">return</span> resultStr</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先我们先定义一个<code>parseTemplateToTokens</code>,将我们写的字符串形式的模板转化为数组的形式；<br>具体的实现思路如下：<br>先定义一个<code>Scanner</code>类来辅助,这个类有三个属性:<code>templateStr</code>(当前的模板字符串),<code>pos</code>指针，<code>tail</code>未经遍历的剩下的字符串<br>两个方法：<code>scan</code>(用于扫描指针是否指向传入的字符，如果指到了，就让当前指针往后移该字符串的长度，并改变<code>tail</code>的指向)<br><code>scanUntil</code>:让指针进行扫描，直到遇见指定内容结束，并且能够<strong>返回之前路过的文字</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Scanner</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">templateStr</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">templateStr</span> = templateStr</span><br><span class="line">    <span class="comment">//指针</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">pos</span> = <span class="number">0</span></span><br><span class="line">    <span class="comment">//尾巴，一开始就是模板字符串的原文</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">tail</span> = templateStr</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">scan</span>(<span class="params">tag</span>) &#123;<span class="comment">//扫描,跳过两个大括号</span></span><br><span class="line">    <span class="comment">//如果此时pos指针已经指向&#123;&#123;,就往后走两步</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">tail</span>.<span class="title function_">indexOf</span>(tag) === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">pos</span> += tag.<span class="property">length</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">tail</span> = <span class="variable language_">this</span>.<span class="property">templateStr</span>.<span class="title function_">substring</span>(<span class="variable language_">this</span>.<span class="property">pos</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">scanUntil</span>(<span class="params">stopTag</span>) &#123;</span><br><span class="line">    <span class="comment">//记录开始的时候</span></span><br><span class="line">    <span class="keyword">const</span> pos_backup = <span class="variable language_">this</span>.<span class="property">pos</span></span><br><span class="line">    <span class="comment">// 当尾巴</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="variable language_">this</span>.<span class="property">tail</span>.<span class="title function_">indexOf</span>(stopTag) !== <span class="number">0</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">pos</span> &lt; <span class="variable language_">this</span>.<span class="property">templateStr</span>.<span class="property">length</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">pos</span>++</span><br><span class="line">      <span class="comment">//改变尾巴为从当前指针这个字符开始，到最后的全部字符</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">tail</span> = <span class="variable language_">this</span>.<span class="property">templateStr</span>.<span class="title function_">substring</span>(<span class="variable language_">this</span>.<span class="property">pos</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">templateStr</span>.<span class="title function_">substring</span>(pos_backup, <span class="variable language_">this</span>.<span class="property">pos</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>言归正传，我们继续看<code>parseTemplateToTokens</code>的思路，我们把最后的结果数组记为<code>tokens</code>,因为<code>scanUntil</code>有返回值，那么我们将该返回值存入<code>word</code>中，便于后续记录。<br>我们进入一个循环遍历字符串，然后把<code>&#123;&#123;`前的记为`text`,把`&#123;&#123;`后，`&#125;&#125;</code>前的内容记为<code>name</code>。<br>但是这样无法处理带<code>#</code>号也就是嵌套的情况。因为<code>#</code>号只可能出现在<code>&#125;&#125;</code>前，所以我们在每轮循环的第二个<code>scanner.scanUntil(&quot;&#125;&#125;&quot;)</code>后面添加一层判断。也就是说&#96;</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>响应式原理</title>
      <link href="/2025/03/19/%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86/"/>
      <url>/2025/03/19/%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是数据劫持？"><a href="#什么是数据劫持？" class="headerlink" title="什么是数据劫持？"></a>什么是数据劫持？</h2><p>就是通过<code>Object.defineProperty</code>的<code>getter</code>和<code>setter</code>控制访问和修改</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> temp=<span class="number">0</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj,<span class="string">&#x27;a&#x27;</span>,&#123;</span><br><span class="line">  <span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">set</span>(<span class="params">newVal</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(newVal === value) <span class="keyword">return</span> ;</span><br><span class="line">    temp = newVal</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>相当于我们自定义了<code>obj.a</code>取值和赋值的行为，使用自定义的<code>getter</code>和<code>setter</code>来重写了原有的行为，就是数据劫持的含义</p><p>为了保证数据的私有性，我们将上述过程变为一个闭包</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">defineReactive</span>(<span class="params">data, key, val</span>) &#123;<span class="comment">//三个参数：对象，键名，值</span></span><br><span class="line">  <span class="keyword">const</span> dep = <span class="keyword">new</span> <span class="title class_">Dep</span>()</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">arguments</span>.<span class="property">length</span> == <span class="number">2</span>) &#123;</span><br><span class="line">    val = data[key]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> childOb = <span class="title function_">observe</span>(val)<span class="comment">//开启下一层属性的循环</span></span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(data, key, &#123;</span><br><span class="line">    <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;访问&quot;</span>)</span><br><span class="line">      <span class="comment">//如果处于依赖的收集阶段</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="title class_">Dep</span>.<span class="property">target</span>) &#123;</span><br><span class="line">        dep.<span class="title function_">depend</span>()</span><br><span class="line">        <span class="keyword">if</span> (childOb) &#123;</span><br><span class="line">          childOb.<span class="property">dep</span>.<span class="title function_">depend</span>()</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> val</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">set</span>(<span class="params">newValue</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (val == newValue) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      val = newValue</span><br><span class="line">      <span class="comment">//当设置新值，新值也需要被观测</span></span><br><span class="line">      childOb = <span class="title function_">observe</span>(newValue)</span><br><span class="line"></span><br><span class="line">      <span class="comment">//发布订阅模式，通知Dep</span></span><br><span class="line">      dep.<span class="title function_">notify</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Observer类与observe函数"><a href="#Observer类与observe函数" class="headerlink" title="Observer类与observe函数"></a>Observer类与observe函数</h2><p>那如果obj有多个属性呢？我们就建立一个<code>Observer</code>类来遍历对象<br><strong><code>Observe</code>类的作用</strong>：</p><ol><li>先给每个<code>Observe</code>实例都添加一个<code>__ob__</code>属性(相当于一个标记，标记着该属性已经被数据劫持)</li><li>遍历该层的每一个属性，利用<code>defineReactive</code>,将他们全都变成响应式的数据</li><li>dep处理数组变异的方法<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Observer</span>&#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="comment">//每一个Observer的实例都有一个Dep</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">dep</span> = <span class="keyword">new</span> <span class="title class_">Dep</span>()</span><br><span class="line">    <span class="comment">//给实例添加一个__ob__属性，值为实例本身</span></span><br><span class="line">    <span class="title function_">def</span>(value, <span class="string">&#x27;__ob__&#x27;</span>, <span class="variable language_">this</span>, <span class="literal">false</span>)</span><br><span class="line">    <span class="comment">// console.log(value)</span></span><br><span class="line">    <span class="comment">//检查是数组还是对象</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(value)) &#123;</span><br><span class="line">      <span class="comment">//如果是数组，就把他的原型对象指向arrayMethods</span></span><br><span class="line">      <span class="title class_">Object</span>.<span class="title function_">setPrototypeOf</span>(value, arrayMethods)</span><br><span class="line">      <span class="comment">//让该数组被observe</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">observeArray</span>(value)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">walk</span>(value)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//遍历</span></span><br><span class="line">  <span class="title function_">walk</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> k <span class="keyword">in</span> value) &#123;</span><br><span class="line">      <span class="title function_">defineReactive</span>(value, k)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//数组的特殊遍历</span></span><br><span class="line">  <span class="title function_">observeArray</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> l = arr.<span class="property">length</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; l; i++) &#123;</span><br><span class="line">      <span class="comment">//逐项observe</span></span><br><span class="line">      <span class="title function_">observe</span>(arr[i])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>其中def函数的作用就是设置传入属性的配置<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> def = <span class="keyword">function</span> (<span class="params">obj, key, value, enumerable</span>) &#123;</span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, key, &#123;</span><br><span class="line">    value,</span><br><span class="line">    enumerable,</span><br><span class="line">    <span class="attr">writable</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">configurable</span>: <span class="literal">true</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="observe函数"><a href="#observe函数" class="headerlink" title="observe函数"></a>observe函数</h3><p>作用就是判断当前传入参数是不是一个响应式的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">observe</span>(<span class="params">value</span>) &#123;</span><br><span class="line">  <span class="comment">//如果不是对象，就什么也不做</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> value != <span class="string">&#x27;object&#x27;</span>) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">var</span> ob;</span><br><span class="line">  <span class="comment">//value.__ob__ 是一个特殊的属性，用于标识对象是否已经被观察过。如果这个属性已经存在，说明对象已经被观察过，不需要再次创建新的观察者实例。</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> value.<span class="property">__ob__</span> !== <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">    ob = value.<span class="property">__ob__</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    ob = <span class="keyword">new</span> <span class="title class_">Observer</span>(value)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ob;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先用<code>observe</code>观测该属性是否有<code>__ob__</code>属性(有<code>__ob__</code>就意味着已经是<code>Observe</code>类),如果有，就不做处理，如果没有，就new 一个<code>Observer</code>类；该函数返回的是<code>__ob__</code>属性。<br>想要继续往下遍历嵌套的属性，那么就需要在目前最后一步，也就是<code>defineReactive</code>中再次观测嵌套的属性</p><h2 id="关于对象的响应式的总结"><a href="#关于对象的响应式的总结" class="headerlink" title="关于对象的响应式的总结"></a>关于对象的响应式的总结</h2><p><img src="/2025/03/19/%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86/image.png"><br>函数之间的调用关系<br><img src="/2025/03/19/%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86/image%20copy.png"></p><h2 id="关于数组"><a href="#关于数组" class="headerlink" title="关于数组"></a>关于数组</h2><p><code>observe</code>不做改变，<code>Observer</code>中多增加一个判断(判断是数组还是对象)；如果是对象，还是用walk遍历属性；但如果是数组，先把它的原型对象改为<code>arrayMethods</code>，然后再定义一个<code>observeArray</code>方法用来遍历数组中的每一个元素。<br>但这里可能会有疑问：为什么不能像普通对象那样直接<code>defineReactive</code>呢？</p><ol><li>如果为每个元素都添加一个<code>defineReactive</code>，数组长度可能极大（如数万元素），若为每个索引都定义 getter&#x2F;setter，初始化性能极差。数组的 push、pop、splice 等方法会动态修改索引，导致需要不断劫持新索引，性能不可控。</li><li>原生方法无法拦截：直接通过索引修改数组（如 arr[0] &#x3D; 1）可以被 defineReactive 捕获，但类似 push、splice 等原生方法修改数组时，无法通过索引劫持感知变化。</li></ol><p>数组的处理逻辑：<br>所有的数组都会被添加<code>__ob__</code>属性；(数组本身都会被observe函数处理，并添加__ob__属性)<br>Vue 会递归观测数组中的元素，如果元素是对象或者数组，就会添加__ob__属性，如果是基本数据类型，就不会被添加。</p><p>对于数组的’push’,’pop’,’shift’,’unshift’，’splice’,’sort’,’reverse’这几个方法，不会触发属性的setter,所以我们要对他们进行改写</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arrayPrototype = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line"><span class="comment">//以Array.prototype为原型创建arratMethods对象</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> arrayMethods = <span class="title class_">Object</span>.<span class="title function_">create</span>(arrayPrototype)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> changeMethod = [</span><br><span class="line">  <span class="string">&#x27;push&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;pop&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;shift&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;unshift&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;splice&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;sort&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;reverse&#x27;</span></span><br><span class="line">]</span><br><span class="line">changeMethod.<span class="title function_">forEach</span>(<span class="function"><span class="params">name</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//备份原来的方法</span></span><br><span class="line">  <span class="keyword">const</span> original = arrayPrototype[name]</span><br><span class="line">  <span class="comment">//定义新的方法</span></span><br><span class="line">  <span class="title function_">def</span>(arrayMethods, name, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> ob = <span class="variable language_">this</span>.<span class="property">__ob__</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> args = [...<span class="variable language_">arguments</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment">//有三种方法push\unshift\splice能插入新项，现在把要插入的新项也变为observe的</span></span><br><span class="line">    <span class="keyword">let</span> inserted = []</span><br><span class="line">    <span class="keyword">switch</span> (name) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;push&#x27;</span>:</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;unshift&#x27;</span>:</span><br><span class="line">        inserted = args; <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;splice&#x27;</span>:<span class="comment">//slice(下标，数量，插入的新项)slice(2)就是从下标为2的往后数</span></span><br><span class="line">        inserted = args.<span class="title function_">slice</span>(<span class="number">2</span>); <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断是否有要插入的项，让新项也变为响应的</span></span><br><span class="line">    <span class="keyword">if</span> (inserted) &#123;</span><br><span class="line">      ob.<span class="title function_">observeArray</span>(inserted)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> result = original.<span class="title function_">call</span>(<span class="variable language_">this</span>, ...args)</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;, <span class="literal">false</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="收集依赖与派发更新"><a href="#收集依赖与派发更新" class="headerlink" title="收集依赖与派发更新"></a>收集依赖与派发更新</h2><p>举例：演唱会抢票时，我们可以点击预售提醒，当开票时，大麦就会提醒我们抢票，我们看到消息后就可以开始购买。点击预约抢票，就相当于在大麦上登录了自己的信息(<strong>订阅</strong>),大麦就会把我们的信息存储起来。开票的时候，大麦会通知所有订阅者，我们就会去抢票(进行一系列动作)</p><p>在这个过程中，我们就相当于<code>Watcher</code>。每个<code>Watcher</code>实例订阅一个或多个数据，这些数据被称为<code>Watcher</code>的依赖(商品就是买家的依赖)；当依赖发生变化，<code>Watcher</code>实例会接收到数据发生变化这条消息，之后会执行一个回调函数来实现某些功能，比如更新页面(买家进行一些动作)。</p><p><strong>过程：</strong></p><ol><li><strong>初始化</strong>：<br>当 <code>Vue</code> 实例创建时，会对每个需要响应的数据属性(先observe)创建一个 <code>Watcher</code> 实例。这些 <code>Watcher</code> 可能是与视图相关的（即渲染函数），也可能是与计算属性相关的。</li><li><strong>依赖收集阶段</strong>：<br>在执行渲染函数或计算属性的过程中，如果访问了某个响应式数据属性，<code>Dep</code> 会记录下当前的 <code>Watcher</code> 作为该属性的依赖。</li><li><strong>数据变更检测</strong>：<br>当数据发生变化时，<code>Dep</code> 会通知所有依赖于该数据的 <code>Watcher</code> 进行更新。</li><li><strong>触发更新</strong>：<br><code>Watcher</code> 收到通知后，会重新执行其关联的回调函数（如渲染函数或计算属性的重新计算），从而实现视图的自动更新或计算属性值的重新计算。</li></ol><h3 id="watcher类"><a href="#watcher类" class="headerlink" title="watcher类"></a><code>watcher</code>类</h3><p>总体代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> uid = <span class="number">0</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Watcher</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">target, expression, callback</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">id</span> = uid++</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">target</span> = target<span class="comment">//记录当前的要查找的目标对象</span></span><br><span class="line">    <span class="comment">//parsePath返回值是一个函数，该函数可把当前要查找的对象传入；返回我们想要的属性值</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">getter</span> = <span class="title function_">parsePath</span>(expression)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">callback</span> = callback<span class="comment">//记录回调函数</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">value</span> = <span class="variable language_">this</span>.<span class="title function_">get</span>()<span class="comment">//</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">update</span>(<span class="params"></span>) &#123;<span class="comment">//数据更新的时候</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">run</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//进入依赖收集的阶段</span></span><br><span class="line">    <span class="comment">//让全局的Dep.target设置为Watcher本身，就是进入依赖收集阶段</span></span><br><span class="line">    <span class="title class_">Dep</span>.<span class="property">target</span> = <span class="variable language_">this</span></span><br><span class="line">    <span class="keyword">const</span> obj = <span class="variable language_">this</span>.<span class="property">target</span></span><br><span class="line">    <span class="keyword">var</span> value</span><br><span class="line">    <span class="comment">//只要能找。就一直找</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      value = <span class="variable language_">this</span>.<span class="title function_">getter</span>(obj)</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      <span class="title class_">Dep</span>.<span class="property">target</span> = <span class="literal">null</span><span class="comment">//退出依赖收集阶段</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">run</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">getAndInvoke</span>(<span class="variable language_">this</span>.<span class="property">callback</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">getAndInvoke</span>(<span class="params">cb</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> value = <span class="variable language_">this</span>.<span class="title function_">get</span>()<span class="comment">//获取当前的value</span></span><br><span class="line">    <span class="comment">//如果当前的value不等于实例化时的value，那么就更新</span></span><br><span class="line">    <span class="comment">//用于检测对象类型的值是否发生变化。即使对象的引用没有改变，对象内部的属性变化也需要被检测到并触发更新。</span></span><br><span class="line">    <span class="keyword">if</span> (value !== <span class="variable language_">this</span>.<span class="property">value</span> || <span class="keyword">typeof</span> value == <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> oldValue = <span class="variable language_">this</span>.<span class="property">value</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">value</span> = value</span><br><span class="line">      cb.<span class="title function_">call</span>(<span class="variable language_">this</span>.<span class="property">target</span>, value, oldValue)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">parsePath</span>(<span class="params">str</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> segments = str.<span class="title function_">split</span>(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">obj</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; segments.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!obj) <span class="keyword">return</span>;</span><br><span class="line">      obj = obj[segments[i]]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> obj</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">a</span>:&#123;</span><br><span class="line">    <span class="attr">b</span>:&#123;</span><br><span class="line">      <span class="attr">c</span>:<span class="number">9</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">d</span>:<span class="number">99</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Watcher</span>(obj,<span class="string">&#x27;a.b.c&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">a</span>.<span class="property">b</span>.<span class="property">c</span>)</span><br><span class="line">&#125;)</span><br><span class="line">obj.<span class="property">a</span>.<span class="property">b</span>.<span class="property">c</span>=<span class="number">199</span></span><br></pre></td></tr></table></figure><h3 id="Dep类主要用于依赖收集和通知更新。"><a href="#Dep类主要用于依赖收集和通知更新。" class="headerlink" title="Dep类主要用于依赖收集和通知更新。"></a>Dep类主要用于依赖收集和通知更新。</h3><p>一共有两个地方添加了Dep类</p><ol><li>defineReactive中：为每个响应式属性创建一个独立的Dep实例，用于管理对该属性的依赖关系</li><li>Observer 类中的 Dep：为整个对象创建一个全局的 Dep 实例，主要用于处理数组的变异方法如 push, pop, shift, unshift, splice, sort, reverse）。这些方法不会触发单个属性的 getter 和 setter，因此需要一个全局的 Dep 来管理整个对象的依赖关系。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> uid = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Dep</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">id</span> = uid++</span><br><span class="line">    <span class="comment">//用数组存储自己的订阅者(watcher实例)</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">subs</span> = []</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//添加订阅</span></span><br><span class="line">  <span class="title function_">addsub</span>(<span class="params">sub</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">subs</span>.<span class="title function_">push</span>(sub)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//添加依赖 </span></span><br><span class="line">  <span class="title function_">depend</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">Dep</span>.<span class="property">target</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">addsub</span>(<span class="title class_">Dep</span>.<span class="property">target</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//通知更新</span></span><br><span class="line">  <span class="title function_">notify</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//浅克隆一份</span></span><br><span class="line">    <span class="keyword">const</span> subs = <span class="variable language_">this</span>.<span class="property">subs</span>.<span class="title function_">slice</span>()</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; subs.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      subs[i].<span class="title function_">update</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="数组响应式的总结"><a href="#数组响应式的总结" class="headerlink" title="数组响应式的总结"></a>数组响应式的总结</h2><p>在组件初始化时，Vue会先遍历data选项中的对象，调用<code>observe</code>将其转换为响应式。此时，数据已经具备响应式能力，但还没有进行依赖收集。当组件开始渲染时，会创建一个渲染Watcher，这个Watcher在执行渲染函数时会访问数据属性，触发getter，从而将Watcher添加到对应的dep中。这时候依赖收集才真正发生。<br>依赖收集实际上是在<strong>访问这些属性的时候触发的</strong>。<br>例：当在组件的渲染过程中访问了某个属性，这时候getter被触发，才会将当前的Watcher（比如渲染Watcher）添加到这个属性的依赖列表中<br>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">child</span>: &#123; <span class="attr">x</span>: <span class="number">1</span> &#125; &#125;;</span><br><span class="line"><span class="title function_">observe</span>(obj); <span class="comment">// 初始化响应式结构</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Watcher</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">child</span>.<span class="property">x</span>); <span class="comment">// 访问 obj.child.x</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">obj.<span class="property">child</span>.<span class="property">x</span> = <span class="number">2</span>; <span class="comment">// 触发更新</span></span><br></pre></td></tr></table></figure><p>流程解析：</p><ol><li>初始化阶段：observe(obj) 为 obj 的 child 属性定义 getter&#x2F;setter。observe(obj.child) 递归观测子对象，为 x 定义 getter&#x2F;setter。</li><li>依赖收集阶段：Watcher 执行计算函数，访问 obj.child.x：触发 obj.child 的 getter → 收集 obj.child 的 dep。触发 obj.child.x 的 getter → 收集 x 的 dep。同时收集 childOb.dep（子对象的依赖管理器）。</li><li>触发更新：修改 obj.child.x &#x3D; 2 → 触发 x 的 setter → 通知 x 的 dep。由于 childOb.dep 也收集了 Watcher，子对象的更新会通知父级 Watcher。</li></ol><h3 id="一些小疑问"><a href="#一些小疑问" class="headerlink" title="一些小疑问"></a>一些小疑问</h3><p><code>Object.defineProperty</code>：主要用于<strong>拦截对象属性的访问和修改</strong>。它无法直接处理数组下标的改变（如 arr[0] &#x3D; ‘new value’）或数组长度的变化（如 arr.length &#x3D; 5），也无法自动拦截数组方法（如 push, pop, splice 等）的调用。<br>Watcher：用于<strong>监听数据的变化并执行相应的回调函数</strong>。它依赖于 Dep 类来管理依赖关系，并在数据发生变化时触发更新逻辑。</p><p><strong>为什么数组下标修改或原生方法无法触发setter？</strong></p><ol><li><p>性能问题：数组可能包含大量元素，若为每个索引都设置 getter&#x2F;setter，会导致初始化性能损耗。</p></li><li><p>实现限制：<code>Object.defineProperty</code> 的设计目标是<strong>对象属性</strong>，而非动态长度的数组。直接通过下标修改（如 arr[0] &#x3D; 1）本质上是操作对象的属性，但Vue未对数组索引劫持，因此无法触发响应式更新。</p></li><li><p>原生方法不可控：如 push&#x2F;pop 等方法会修改数组长度或内容，但这些方法是 Array.prototype 的原生实现，未被Vue劫持，因此默认不会触发更新。</p></li></ol><p><strong>为什么observe函数要返回对象的__ob__属性？</strong><br><code>__ob__ </code>是 Vue 在对象上挂载的一个特殊属性，指向一个 <code>Observer</code> 类的实例。<br>用途：</p><ol><li>标记该对象已被观测(避免重复观测)</li><li>提供对嵌套对象&#x2F;数组的响应式支持递归观测：当对象有嵌套属性（如 obj.a.b）时，Observer 实例会递归调用 observe，确保所有层级的属性都被劫持。数组响应式：数组的 <strong>ob</strong> 会被重写的方法（如 push、splice）用来触发依赖更新。</li><li>管理该对象的依赖(通过__ob__.dep，dep是Observe类的属性)</li></ol><p><strong>显式操作</strong>：<br>通过Vue封装的方法（如 Vue.set、数组变异方法）修改数据，这些操作主动触发依赖追踪。<br><strong>隐式操作：</strong><br>直接通过JavaScript原生方式操作数据（如 arr[0] &#x3D; 1 或 arr.push()），这些操作绕过Vue的响应式系统，不会自动触发更新。</p><p>参考：<a href="https://juejin.cn/post/6932659815424458760#heading-2">https://juejin.cn/post/6932659815424458760#heading-2</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>虚拟DOM和diff算法</title>
      <link href="/2025/03/17/%E8%99%9A%E6%8B%9FDOM%E5%92%8Cdiff%E7%AE%97%E6%B3%95/"/>
      <url>/2025/03/17/%E8%99%9A%E6%8B%9FDOM%E5%92%8Cdiff%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="虚拟DOM"><a href="#虚拟DOM" class="headerlink" title="虚拟DOM"></a>虚拟DOM</h2><p>用js对象描述DOM的层次结构；DOM中的一切属性都在虚拟DOM中有对应的属性<br>diff是发生在虚拟DOM上的：新虚拟DOM和老虚拟DOM进行diff(精细化比较)，算出应该如何最小量更新，最后反映到真正的DOM上</p><p><strong>h函数用来生成虚拟节点</strong><br>e.g:<br><code>h(&#39;a&#39;,&#123;props:&#123;href:&#39;http://wwwyh.github.io&#39;&#125;&#125;,&#39;个人博客&#39;)</code><br>将得到这样的虚拟节点:<br><code>&#123;&quot;sel&quot;:&quot;a&quot;,&quot;data:&#123;props:&#123;href:&#39;http://wwwyh.github.io&#39;&#125;&#125;,&quot;text&quot;:&#39;个人博客&#39;&#125;</code></p><p>一个虚拟dom有哪些属性?</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">children</span>:<span class="literal">undefined</span>,</span><br><span class="line">  <span class="attr">data</span>:&#123;&#125;,</span><br><span class="line">  <span class="attr">elm</span>:<span class="literal">undefined</span>,</span><br><span class="line">  <span class="attr">key</span>:<span class="literal">undefined</span>,</span><br><span class="line">  <span class="attr">sel</span>:<span class="string">&#x27;div&#x27;</span>,</span><br><span class="line">  <span class="attr">text</span>:<span class="string">&#x27;我是&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="手写h函数"><a href="#手写h函数" class="headerlink" title="手写h函数"></a>手写h函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//h(&#x27;div&#x27;,&#123;&#125;,&#x27;文字&#x27;)</span></span><br><span class="line"><span class="comment">//h(&#x27;div&#x27;,&#123;&#125;,[])</span></span><br><span class="line"><span class="comment">//h(&#x27;div&#x27;,&#123;&#125;,h())</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> (<span class="params">sel, data, c</span>) &#123;</span><br><span class="line">  <span class="comment">//检查参数的个数</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">arguments</span>.<span class="property">length</span> !== <span class="number">3</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;必须传入三个参数&#x27;</span>)</span><br><span class="line">  <span class="comment">//检查参数c的类型</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> c === <span class="string">&#x27;string&#x27;</span> || <span class="keyword">typeof</span> c === <span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">vnode</span>(sel, data, <span class="literal">undefined</span>, c, <span class="literal">undefined</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(c)) &#123;<span class="comment">//如果是数组</span></span><br><span class="line">    <span class="keyword">let</span> children = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; c.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!(<span class="keyword">typeof</span> c[i] === <span class="string">&#x27;object&#x27;</span> &amp;&amp; c[i].<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;sel&#x27;</span>))) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;传入的数组中有项不是h函数&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      children.<span class="title function_">push</span>(c[i])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">vnode</span>(sel, data, children, <span class="literal">undefined</span>, <span class="literal">undefined</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> c == <span class="string">&#x27;object&#x27;</span> &amp;&amp; c.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;sel&#x27;</span>)) &#123;<span class="comment">//只嵌套一个孩子</span></span><br><span class="line">    <span class="keyword">let</span> children = [c]</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">vnode</span>(sel, data, children, <span class="literal">undefined</span>, <span class="literal">undefined</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;传入参数类型不对&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>vnode就是把传入的参数以一个对象的形式返回</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> (<span class="params">sel, data, children, text, elm</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; sel, data, children, text, elm &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="diff算法"><a href="#diff算法" class="headerlink" title="diff算法"></a>diff算法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> v1 = <span class="title function_">h</span>(<span class="string">&#x27;ul&#x27;</span>,&#123;&#125;,[</span><br><span class="line">  <span class="title function_">h</span>(<span class="string">&#x27;li&#x27;</span>,&#123;&#125;,<span class="string">&#x27;A&#x27;</span>),</span><br><span class="line">  <span class="title function_">h</span>(<span class="string">&#x27;li&#x27;</span>,&#123;&#125;,<span class="string">&#x27;B&#x27;</span>),</span><br><span class="line">  <span class="title function_">h</span>(<span class="string">&#x27;li&#x27;</span>,&#123;&#125;,<span class="string">&#x27;C&#x27;</span>),</span><br><span class="line">  <span class="title function_">h</span>(<span class="string">&#x27;li&#x27;</span>,&#123;&#125;,<span class="string">&#x27;D&#x27;</span>),</span><br><span class="line">])</span><br><span class="line"><span class="title function_">patch</span>(container,v1)</span><br><span class="line"><span class="keyword">const</span> v2 = <span class="title function_">h</span>(<span class="string">&#x27;ul&#x27;</span>,&#123;&#125;,[</span><br><span class="line">   <span class="title function_">h</span>(<span class="string">&#x27;li&#x27;</span>,&#123;&#125;,<span class="string">&#x27;E&#x27;</span>),</span><br><span class="line">  <span class="title function_">h</span>(<span class="string">&#x27;li&#x27;</span>,&#123;&#125;,<span class="string">&#x27;A&#x27;</span>),</span><br><span class="line">  <span class="title function_">h</span>(<span class="string">&#x27;li&#x27;</span>,&#123;&#125;,<span class="string">&#x27;B&#x27;</span>),</span><br><span class="line">  <span class="title function_">h</span>(<span class="string">&#x27;li&#x27;</span>,&#123;&#125;,<span class="string">&#x27;C&#x27;</span>),</span><br><span class="line">  <span class="title function_">h</span>(<span class="string">&#x27;li&#x27;</span>,&#123;&#125;,<span class="string">&#x27;D&#x27;</span>),</span><br><span class="line">])</span><br></pre></td></tr></table></figure><p>这时候如果<code>patch(vnode1,vnode2)</code>就会把v1全拆了再建立v2<br>但如果加上key(唯一标识，告诉diff算法，再更改前后他们是同一个DOM节点)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> v1 = <span class="title function_">h</span>(<span class="string">&#x27;ul&#x27;</span>,&#123;&#125;,[</span><br><span class="line">  <span class="title function_">h</span>(<span class="string">&#x27;li&#x27;</span>,&#123;<span class="attr">key</span>:<span class="string">&#x27;A&#x27;</span>&#125;,<span class="string">&#x27;A&#x27;</span>),</span><br><span class="line">  <span class="title function_">h</span>(<span class="string">&#x27;li&#x27;</span>,&#123;<span class="attr">key</span>:<span class="string">&#x27;B&#x27;</span>&#125;,<span class="string">&#x27;B&#x27;</span>),</span><br><span class="line">  <span class="title function_">h</span>(<span class="string">&#x27;li&#x27;</span>,&#123;<span class="attr">key</span>:<span class="string">&#x27;C&#x27;</span>&#125;,<span class="string">&#x27;C&#x27;</span>),</span><br><span class="line">  <span class="title function_">h</span>(<span class="string">&#x27;li&#x27;</span>,&#123;<span class="attr">key</span>:<span class="string">&#x27;D&#x27;</span>&#125;,<span class="string">&#x27;D&#x27;</span>),</span><br><span class="line">])</span><br><span class="line"><span class="title function_">patch</span>(container,v1)</span><br><span class="line"><span class="keyword">const</span> v2 = <span class="title function_">h</span>(<span class="string">&#x27;ul&#x27;</span>,&#123;&#125;,[</span><br><span class="line">   <span class="title function_">h</span>(<span class="string">&#x27;li&#x27;</span>,&#123;<span class="attr">key</span>:<span class="string">&#x27;E&#x27;</span>&#125;,<span class="string">&#x27;E&#x27;</span>),</span><br><span class="line">  <span class="title function_">h</span>(<span class="string">&#x27;li&#x27;</span>,&#123;<span class="attr">key</span>:<span class="string">&#x27;A&#x27;</span>&#125;,<span class="string">&#x27;A&#x27;</span>),</span><br><span class="line">  <span class="title function_">h</span>(<span class="string">&#x27;li&#x27;</span>,&#123;<span class="attr">key</span>:<span class="string">&#x27;B&#x27;</span>&#125;,<span class="string">&#x27;B&#x27;</span>),</span><br><span class="line">  <span class="title function_">h</span>(<span class="string">&#x27;li&#x27;</span>,&#123;<span class="attr">key</span>:<span class="string">&#x27;C&#x27;</span>&#125;,<span class="string">&#x27;C&#x27;</span>),</span><br><span class="line">  <span class="title function_">h</span>(<span class="string">&#x27;li&#x27;</span>,&#123;<span class="attr">key</span>:<span class="string">&#x27;D&#x27;</span>&#125;,<span class="string">&#x27;D&#x27;</span>),</span><br><span class="line">])</span><br></pre></td></tr></table></figure><p>就可以利用diff算法<br><strong>只有是同一个虚拟节点，才进行精细化比较</strong>，否则就是暴力删除旧的，插入新的<br>如何定义是同一个虚拟节点？<strong>选择器相同且key相同</strong></p><p><strong>只进行同层比较，不会进行跨层比较</strong>,若跨层，仍是暴力删除旧的，然后插入新的。</p><h2 id="patch"><a href="#patch" class="headerlink" title="patch"></a>patch</h2><p><img src="/2025/03/17/%E8%99%9A%E6%8B%9FDOM%E5%92%8Cdiff%E7%AE%97%E6%B3%95/image%20copy.png"><br>diff算法优化策略的四种命中查找</p><ol><li>新前与旧前</li><li>新后与旧后</li><li>新后与旧前(命中：就把新前指向的节点<strong>移动</strong>到旧后之后)</li><li>新前与旧后(命中：就把新前指向的节点<strong>移动</strong>到旧前之前)<br><strong>命中一种就不再进行命中判断</strong><br><strong>如果都没命中，就需要用循环查找</strong></li></ol><p>增加：旧节点先循环完，新前和新后之间的节点就是要<strong>增加</strong>的节点<br>删除：新节点先循环完，旧前和旧后之间的节点就是要<strong>删除</strong>的节点</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">patch</span>(<span class="params">oldVnode, newVnode</span>) &#123;</span><br><span class="line">  <span class="comment">//判断传入的第一个参数是dom节点还是虚拟节点</span></span><br><span class="line">  <span class="keyword">if</span> (oldVnode.<span class="property">sel</span> == <span class="string">&#x27;&#x27;</span> || oldVnode.<span class="property">sel</span> == <span class="literal">undefined</span>) &#123;<span class="comment">//是dom</span></span><br><span class="line">    <span class="comment">//包装为虚拟节点</span></span><br><span class="line">    oldVnode = <span class="title function_">vnode</span>(oldVnode.<span class="property">tagName</span>.<span class="title function_">toLowerCase</span>(), &#123;&#125;, [], <span class="literal">undefined</span>, oldVnode)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//判断oldVnode和newVnode是不是同一个节点</span></span><br><span class="line">  <span class="keyword">if</span> (oldVnode.<span class="property">key</span> == newVnode.<span class="property">key</span> &amp;&amp; oldVnode.<span class="property">sel</span> == newVnode.<span class="property">sel</span>) &#123;</span><br><span class="line">    <span class="comment">//是同一个节点</span></span><br><span class="line">    <span class="title function_">patchVnode</span>(oldVnode, newVnode)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;<span class="comment">//不是同一个节点,暴力插入</span></span><br><span class="line">    <span class="keyword">let</span> newVnodeElm = <span class="title function_">createElement</span>(newVnode)</span><br><span class="line">    <span class="comment">//上树，插入到标杆之前(以老节点为标杆)</span></span><br><span class="line">    <span class="keyword">if</span> (oldVnode.<span class="property">elm</span> &amp;&amp; newVnodeElm) &#123;</span><br><span class="line">      oldVnode.<span class="property">elm</span>.<span class="property">parentNode</span>.<span class="title function_">insertBefore</span>(newVnodeElm, oldVnode.<span class="property">elm</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//删除老节点</span></span><br><span class="line">    oldVnode.<span class="property">elm</span>.<span class="property">parentNode</span>.<span class="title function_">removeChild</span>(oldVnode.<span class="property">elm</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>是同一个节点</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">patchVnode</span>(<span class="params">oldVnode, newVnode</span>) &#123;</span><br><span class="line">  <span class="comment">//是同一个节点</span></span><br><span class="line">  <span class="comment">//判断新旧vnode是不是同一个对象(内存中地址是否相同)</span></span><br><span class="line">  <span class="keyword">if</span> (oldVnode === newVnode) <span class="keyword">return</span>;</span><br><span class="line">  <span class="comment">//判断newVnode有没有text属性</span></span><br><span class="line">  <span class="keyword">if</span> (newVnode.<span class="property">text</span> != <span class="literal">undefined</span> &amp;&amp; (newVnode.<span class="property">children</span> === <span class="literal">undefined</span> || newVnode.<span class="property">children</span>.<span class="property">length</span> == <span class="number">0</span>)) &#123;</span><br><span class="line">    <span class="comment">//新vnode有text属性</span></span><br><span class="line">    <span class="keyword">if</span> (newVnode.<span class="property">text</span> !== oldVnode.<span class="property">text</span>) &#123;</span><br><span class="line">      <span class="comment">//newVnode的text和oldVnode的不相同,直接让新的text写入老的elm中的text即可</span></span><br><span class="line">      <span class="comment">//就算老的elm中是children,那么也会立刻消失掉</span></span><br><span class="line">      <span class="keyword">if</span> (oldVnode.<span class="property">elm</span>)</span><br><span class="line">        oldVnode.<span class="property">elm</span>.<span class="property">innerText</span> = newVnode.<span class="property">text</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;<span class="comment">//新节点没有text属性，新节点有children</span></span><br><span class="line">    <span class="keyword">if</span> (oldVnode.<span class="property">children</span> != <span class="literal">undefined</span> &amp;&amp; oldVnode.<span class="property">children</span>.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">//老的有children,新的也有children,最复杂的情况</span></span><br><span class="line">      <span class="title function_">updateChildren</span>(oldVnode.<span class="property">elm</span>, oldVnode.<span class="property">children</span>, newVnode.<span class="property">children</span>)</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;<span class="comment">//老的没有children，老的是文字，新的有children清空再追加</span></span><br><span class="line">      oldVnode.<span class="property">elm</span>.<span class="property">innerText</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; newVnode.<span class="property">children</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> dom = <span class="title function_">createElement</span>(newVnode.<span class="property">children</span>[i])</span><br><span class="line">        oldVnode.<span class="property">elm</span>.<span class="title function_">appendChild</span>(dom)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>老的有children,新的也有children</strong>:精细化比较<br><strong>updateChildren</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">checkSameVnode</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a.<span class="property">sel</span> == b.<span class="property">sel</span> &amp;&amp; a.<span class="property">key</span> == b.<span class="property">key</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">updateChildren</span>(<span class="params">parentElm, oldCh, newCh</span>) &#123;</span><br><span class="line">  <span class="comment">//旧前</span></span><br><span class="line">  <span class="keyword">let</span> oldStartIdx = <span class="number">0</span></span><br><span class="line">  <span class="comment">//旧后</span></span><br><span class="line">  <span class="keyword">let</span> oldEndIdx = oldCh.<span class="property">length</span> - <span class="number">1</span></span><br><span class="line">  <span class="comment">//新前</span></span><br><span class="line">  <span class="keyword">let</span> newStartIdx = <span class="number">0</span></span><br><span class="line">  <span class="comment">//新后</span></span><br><span class="line">  <span class="keyword">let</span> newEndIdx = newCh.<span class="property">length</span> - <span class="number">1</span></span><br><span class="line">  <span class="comment">//旧前节点</span></span><br><span class="line">  <span class="keyword">let</span> oldStartVnode = oldCh[<span class="number">0</span>]</span><br><span class="line">  <span class="comment">//旧后节点</span></span><br><span class="line">  <span class="keyword">let</span> oldEndVnode = oldCh[oldEndIdx]</span><br><span class="line">  <span class="comment">//新前节点</span></span><br><span class="line">  <span class="keyword">let</span> newStartVnode = newCh[<span class="number">0</span>]</span><br><span class="line">  <span class="comment">//新后节点</span></span><br><span class="line">  <span class="keyword">let</span> newEndVnode = newCh[newEndIdx]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> keyMap = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (oldStartIdx &lt;= oldEndIdx &amp;&amp; newStartIdx &lt;= newEndIdx) &#123;</span><br><span class="line">    <span class="comment">// console.log(&#x27;死机了&#x27;)</span></span><br><span class="line">    <span class="comment">//首先不是判断命中，而是要略过已经加undefined标记的</span></span><br><span class="line">    <span class="keyword">if</span> (oldStartVnode == <span class="literal">null</span>) &#123;</span><br><span class="line">      oldStartVnode = oldCh[++oldStartIdx]</span><br><span class="line">      <span class="comment">// continue;</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (oldEndVnode == <span class="literal">null</span>) &#123;</span><br><span class="line">      oldEndVnode = oldCh[--oldEndIdx]</span><br><span class="line">      <span class="comment">// continue;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//新前旧前</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">checkSameVnode</span>(newStartVnode, oldStartVnode)) &#123;</span><br><span class="line">      <span class="title function_">patchVnode</span>(oldStartVnode, newStartVnode)</span><br><span class="line">      oldStartVnode = oldCh[++oldStartIdx]</span><br><span class="line">      newStartVnode = newCh[++newStartIdx]</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_">checkSameVnode</span>(newEndVnode, oldEndVnode)) &#123;<span class="comment">//新后与旧后</span></span><br><span class="line">      <span class="title function_">patchVnode</span>(oldEndVnode, newEndVnode)</span><br><span class="line">      oldEndVnode = oldCh[--oldEndIdx]</span><br><span class="line">      newEndVnode = newCh[--newEndIdx]</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_">checkSameVnode</span>(newEndVnode, oldStartVnode)) &#123;<span class="comment">//新后旧前</span></span><br><span class="line">      <span class="title function_">patchVnode</span>(oldStartVnode, newEndVnode)</span><br><span class="line">      <span class="comment">//移动节点,插入到oldEndVnode后面</span></span><br><span class="line">      parentElm.<span class="title function_">insertBefore</span>(oldStartVnode.<span class="property">elm</span>, oldEndVnode.<span class="property">elm</span>.<span class="property">nextSibling</span>)</span><br><span class="line">      oldStartVnode = oldCh[++oldStartIdx]</span><br><span class="line">      newEndVnode = newCh[--newEndIdx]</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_">checkSameVnode</span>(newStartVnode, oldEndVnode)) &#123;<span class="comment">//新前旧后</span></span><br><span class="line">      <span class="title function_">patchVnode</span>(oldEndVnode, newStartVnode)</span><br><span class="line">      <span class="comment">//插入到oldStartVnode前面</span></span><br><span class="line">      parentElm.<span class="title function_">insertBefore</span>(oldEndVnode.<span class="property">elm</span>, oldStartVnode.<span class="property">elm</span>)</span><br><span class="line">      oldEndVnode = oldCh[--oldEndIdx]</span><br><span class="line">      newStartVnode = newCh[++newStartIdx]</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;<span class="comment">//都没有匹配到,四种命中都没有命中</span></span><br><span class="line">      <span class="keyword">if</span> (!keyMap) &#123;<span class="comment">//只用存一遍</span></span><br><span class="line">        keyMap = &#123;&#125;<span class="comment">//相当于一个缓存</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = oldStartIdx; i &lt;= oldEndIdx; i++) &#123;</span><br><span class="line">          <span class="keyword">const</span> key = oldCh[i].<span class="property">key</span></span><br><span class="line">          <span class="keyword">if</span> (key != <span class="literal">undefined</span>) &#123;</span><br><span class="line">            keyMap[key] = i</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// console.log(keyMap)</span></span><br><span class="line">      <span class="comment">//寻找当前这项(newStartIdx)在keyMap中映射的位置序号</span></span><br><span class="line">      <span class="keyword">const</span> idxInOld = keyMap[newStartVnode.<span class="property">key</span>]</span><br><span class="line">      <span class="keyword">if</span> (idxInOld == <span class="literal">undefined</span>) &#123;</span><br><span class="line">        <span class="comment">//是全新的项 </span></span><br><span class="line">        <span class="comment">//被加入的项现在还不是真正的dom节点</span></span><br><span class="line">        parentElm.<span class="title function_">insertBefore</span>(<span class="title function_">createElement</span>(newStartVnode), oldStartVnode.<span class="property">elm</span>)</span><br><span class="line"></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;<span class="comment">//不是全新的项，需要移动</span></span><br><span class="line">        <span class="keyword">const</span> elmToMove = oldCh[idxInOld]</span><br><span class="line">        <span class="comment">//对比(防止内容改变了)</span></span><br><span class="line">        <span class="title function_">patchVnode</span>(elmToMove.<span class="property">elm</span>, newStartVnode)</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把这项设为undefined,表示已经处理完这项了</span></span><br><span class="line">        oldCh[idxInOld] = <span class="literal">undefined</span></span><br><span class="line">        <span class="comment">//移动,调用insertBefore也可以实现移动</span></span><br><span class="line">        parentElm.<span class="title function_">insertBefore</span>(elmToMove.<span class="property">elm</span>, oldStartVnode.<span class="property">elm</span>)</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">      newStartVnode = newCh[++newStartIdx]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (newStartIdx &lt;= newEndIdx) &#123;<span class="comment">//说明老的不符合，新节点有剩余，插入</span></span><br><span class="line">    <span class="comment">// const before = newCh[newEndIdx + 1] == null ? null : newCh[newEndIdx + 1].elm</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = newStartIdx; i &lt;= newEndIdx; i++) &#123;</span><br><span class="line">      <span class="comment">//insertBefore方法可以自动识别null,如果是null就会自动排到队尾，和appendchild一致</span></span><br><span class="line">      parentElm.<span class="title function_">insertBefore</span>(<span class="title function_">createElement</span>(newCh[i]), oldCh[oldStartIdx].<span class="property">elm</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (oldStartIdx &lt;= oldEndIdx) &#123;<span class="comment">//说明新的不符合，就是要删除老的</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = oldStartIdx; i &lt;= oldEndIdx; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (oldCh[i])</span><br><span class="line">        parentElm.<span class="title function_">removeChild</span>(oldCh[i].<span class="property">elm</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//真正创建节点,将vnode创建为DOM,插入到pivot这个元素之前</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">createElement</span>(<span class="params">vnode</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> domNode = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(vnode.<span class="property">sel</span>)</span><br><span class="line">  <span class="keyword">if</span> (vnode.<span class="property">text</span> !== <span class="string">&#x27;&#x27;</span> &amp;&amp; (vnode.<span class="property">children</span> == <span class="literal">undefined</span> || vnode.<span class="property">children</span>.<span class="property">length</span> == <span class="number">0</span>)) &#123;</span><br><span class="line">    <span class="comment">//内部是文字</span></span><br><span class="line">    domNode.<span class="property">innerHTML</span> = vnode.<span class="property">text</span></span><br><span class="line">    <span class="comment">//将孤儿节点上树,让标杆节点的父节点</span></span><br><span class="line">    <span class="comment">//pivot.parentNode.insertBefore(domNode, pivot)</span></span><br><span class="line"></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(vnode.<span class="property">children</span>) &amp;&amp; vnode.<span class="property">children</span>.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; vnode.<span class="property">children</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">let</span> ch = vnode.<span class="property">children</span>[i]</span><br><span class="line">      <span class="comment">//创建出他的DOM,一旦调用createElement意味着创建出DOM了，并且它的elm属性指向了</span></span><br><span class="line">      <span class="comment">//新创建出的dom,但是还没有上述，是一个孤儿节点 </span></span><br><span class="line">      <span class="keyword">let</span> chDOM = <span class="title function_">createElement</span>(ch)</span><br><span class="line">      domNode.<span class="title function_">appendChild</span>(chDOM)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  vnode.<span class="property">elm</span> = domNode<span class="comment">//该虚拟节点对应的真实节点就是domNode</span></span><br><span class="line">  <span class="keyword">return</span> vnode.<span class="property">elm</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="h函数的使用"><a href="#h函数的使用" class="headerlink" title="h函数的使用"></a>h函数的使用</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;comp&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> msg = <span class="title function_">ref</span>(<span class="string">&#x27;msg&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> comp = <span class="title function_">h</span>(</span><br><span class="line">  <span class="string">&#x27;div&#x27;</span>,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">style</span>: &#123;</span><br><span class="line">      <span class="attr">color</span>: <span class="string">&#x27;pink&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  [</span><br><span class="line">    <span class="title function_">h</span>(<span class="string">&#x27;span&#x27;</span>, <span class="string">&#x27;123&#x27;</span>), <span class="title function_">h</span>(<span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;456&#x27;</span>)</span><br><span class="line">  ]</span><br><span class="line">)</span><br><span class="line"><span class="comment">// 或</span></span><br><span class="line"><span class="comment">// const comp = h(</span></span><br><span class="line"><span class="comment">//   &#x27;p&#x27;,</span></span><br><span class="line"><span class="comment">//   &#123;</span></span><br><span class="line"><span class="comment">//     style: &#123;</span></span><br><span class="line"><span class="comment">//       color: &#x27;pink&#x27;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//   &#125;,</span></span><br><span class="line"><span class="comment">//   msg.value</span></span><br><span class="line"><span class="comment">// )</span></span><br></pre></td></tr></table></figure><p>但是如果要改变msg的值时，页面不能跟着改变<br>如果想动态更新，可以写成函数的形式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">comp</span> = (<span class="params"></span>) =&gt; <span class="title function_">h</span>(<span class="string">&#x27;div&#x27;</span>, &#123; <span class="attr">style</span>: &#123; <span class="attr">colorL</span>: <span class="string">&#x27;pink&#x27;</span> &#125; &#125;, msg.<span class="property">value</span>)</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  msg.<span class="property">value</span> = <span class="number">123</span></span><br><span class="line">&#125;, <span class="number">2000</span>)</span><br></pre></td></tr></table></figure><p><strong>因为msg发生改变时，vue的响应式系统会检测到它的改变，组件就会重新渲染，重新渲染时，就会引发函数的重新调用</strong><br>还可以写成组件的形式<br>组件传参：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Comp</span> <span class="attr">:count</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Comp</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; h, ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> msg = <span class="title function_">ref</span>(<span class="string">&#x27;msg&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">Comp</span> = (<span class="params">props</span>) =&gt; <span class="title function_">h</span>(<span class="string">&#x27;div&#x27;</span>, &#123; <span class="attr">style</span>: &#123; <span class="attr">colorL</span>: <span class="string">&#x27;pink&#x27;</span> &#125; &#125;, props.<span class="property">count</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  msg.<span class="property">value</span> = <span class="number">123</span></span></span><br><span class="line"><span class="language-javascript">&#125;, <span class="number">2000</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>插槽</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Comp</span> <span class="attr">:count</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>2222<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Comp</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; h, ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> msg = <span class="title function_">ref</span>(<span class="string">&#x27;msg&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">Comp</span> = (<span class="params">props, &#123; slots &#125;</span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">return</span> <span class="title function_">h</span>(<span class="string">&#x27;div&#x27;</span>, &#123; <span class="attr">style</span>: &#123; <span class="attr">colorL</span>: <span class="string">&#x27;pink&#x27;</span> &#125; &#125;, slots)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>多个插槽:页面渲染出header,container,2222</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Comp</span> <span class="attr">:count</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>2222<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> #<span class="attr">header</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>header<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Comp</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; h, ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">Comp</span> = (<span class="params">props, &#123; slots &#125;</span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">return</span> <span class="title function_">h</span>(<span class="string">&#x27;div&#x27;</span>, &#123; <span class="attr">style</span>: &#123; <span class="attr">colorL</span>: <span class="string">&#x27;pink&#x27;</span> &#125; &#125;, [</span></span><br><span class="line"><span class="language-javascript">    slots.<span class="title function_">header</span>(), <span class="string">&#x27;container&#x27;</span>, slots?.<span class="title function_">default</span>()</span></span><br><span class="line"><span class="language-javascript">  ])</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>传递参数，事件等</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Comp</span> <span class="attr">:count</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>2222<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> #<span class="attr">header</span>=<span class="string">&quot;a&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>header&#123;&#123; a &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Comp</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; h, ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> a = <span class="title function_">ref</span>(<span class="string">&#x27;aaa&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">Comp</span> = (<span class="params">props, &#123; slots &#125;</span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">return</span> <span class="title function_">h</span>(<span class="string">&#x27;div&#x27;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">style</span>: &#123; <span class="attr">colorL</span>: <span class="string">&#x27;pink&#x27;</span> &#125;, <span class="title function_">onClick</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;click&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;, [</span></span><br><span class="line"><span class="language-javascript">    slots.<span class="title function_">header</span>(a.<span class="property">value</span>), <span class="string">&#x27;container&#x27;</span>, slots?.<span class="title function_">default</span>()</span></span><br><span class="line"><span class="language-javascript">  ])</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>组件和组件之间</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Comp</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Comp</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; h, ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">HelloWorld</span> <span class="keyword">from</span> <span class="string">&#x27;./components/HelloWorld.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> a = <span class="title function_">ref</span>(<span class="string">&#x27;aaa&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">Comp</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">return</span> <span class="title function_">h</span>(<span class="title class_">HelloWorld</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>另一个组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> msg = <span class="string">&#x27;hello world&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span></span><br><span class="line">      HelloWorld</span><br><span class="line">      <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;footer&quot;</span> <span class="attr">:msg</span>=<span class="string">&quot;msg&quot;</span>&gt;</span>footer<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此时渲染结果是 HelloWorld,footer<br>但如果</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Comp</span>&gt;</span></span><br><span class="line">    App传递的默认插槽</span><br><span class="line">  <span class="tag">&lt;/<span class="name">Comp</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; h, ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">HelloWorld</span> <span class="keyword">from</span> <span class="string">&#x27;./components/HelloWorld.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> a = <span class="title function_">ref</span>(<span class="string">&#x27;aaa&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">Comp</span> = (<span class="params">props, &#123; slots &#125;</span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">return</span> <span class="title function_">h</span>(<span class="title class_">HelloWorld</span>, <span class="literal">null</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">default</span>: slots.<span class="property">default</span>,</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>渲染结果是”App传递的默认插槽”；<br>这里”App传递的默认插槽”会传递给Comp组件，slots接收，然后再传给<code>HelloWorld</code>,但是此时只会显示”App传递的默认插槽”，因为<code>HelloWorld</code>里默认插槽和具名插槽是嵌套关系，所以”App传递的默认插槽”这句话把所有内容都覆盖了。</p><p>如果</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Comp</span>&gt;</span></span><br><span class="line">    App传递的默认插槽</span><br><span class="line">  <span class="tag">&lt;/<span class="name">Comp</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; h, ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">HelloWorld</span> <span class="keyword">from</span> <span class="string">&#x27;./components/HelloWorld.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> a = <span class="title function_">ref</span>(<span class="string">&#x27;aaa&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">Comp</span> = (<span class="params">props, &#123; slots &#125;</span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">return</span> <span class="title function_">h</span>(<span class="title class_">HelloWorld</span>, <span class="literal">null</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">default</span>: slots.<span class="property">default</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">footer</span>: <span class="function">() =&gt;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">h</span>(<span class="title class_">HelloWorld</span>, <span class="literal">null</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">default</span>: <span class="function">() =&gt;</span> <span class="title function_">h</span>(<span class="string">&#x27;div&#x27;</span>, <span class="string">&#x27;嵌套的默认插槽&#x27;</span>),</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">footer</span>: <span class="function">() =&gt;</span> <span class="title function_">h</span>(<span class="string">&#x27;div&#x27;</span>, <span class="string">&#x27;嵌套的footer&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此时还是显示的是”App传递的默认插槽”,因为在<code>HelloWorld</code>里，默认插槽和具名插槽是嵌套关系，直接覆盖了<br>但如果改成并列关系，就会显示”App传递的默认插槽,嵌套的默认插槽,嵌套的footer”</p><p>传递参数和事件<br>App</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Comp</span>&gt;</span></span><br><span class="line">    App传递的默认插槽</span><br><span class="line">  <span class="tag">&lt;/<span class="name">Comp</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; h, ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">HelloWorld</span> <span class="keyword">from</span> <span class="string">&#x27;./components/HelloWorld.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> a = <span class="title function_">ref</span>(<span class="string">&#x27;aaa&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">Comp</span> = (<span class="params">props, &#123; slots &#125;</span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">return</span> <span class="title function_">h</span>(<span class="title class_">HelloWorld</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">msg</span>: <span class="string">&#x27;APP传的msg&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    ,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">onFoo</span>(<span class="params">val</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;响应时间onFoo&#x27;</span>, val)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;, &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">default</span>: slots.<span class="property">default</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">footer</span>: <span class="function">() =&gt;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">h</span>(<span class="title class_">HelloWorld</span>, <span class="literal">null</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">default</span>: <span class="function">() =&gt;</span> <span class="title function_">h</span>(<span class="string">&#x27;div&#x27;</span>, <span class="string">&#x27;嵌套的默认插槽&#x27;</span>),</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">footer</span>: <span class="function">(<span class="params">&#123;a&#125;</span>) =&gt;</span> <span class="title function_">h</span>(<span class="string">&#x27;div&#x27;</span>, <span class="string">&#x27;嵌套的footer&#x27;</span>+a)</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>HelloWorld组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; defineProps &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> emits = <span class="title function_">defineEmits</span>([<span class="string">&#x27;foo&#x27;</span>])</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">defineProps</span>([<span class="string">&#x27;msg&#x27;</span>])</span></span><br><span class="line"><span class="language-javascript"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">emits</span>(<span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;onFoo&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;&#123; msg &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;footer&quot;</span> <span class="attr">:a</span>=<span class="string">&quot;12345&quot;</span>&gt;</span>footer<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>渲染结果是：APP传的msg， App传递的默认插槽，嵌套的默认插槽，嵌套的footer,12345</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>WebPack</title>
      <link href="/2025/03/03/postWebPack/"/>
      <url>/2025/03/03/postWebPack/</url>
      
        <content type="html"><![CDATA[<h2 id="loader"><a href="#loader" class="headerlink" title="loader"></a><code>loader</code></h2><p>默认情况下，在遇到<code>import</code>或者<code>require</code>加载模块的时候，<code>webpack</code>只支持对<code>js</code> 和 <code>json</code> 文件打包</p><p>像<code>css</code>、<code>sass</code>、<code>png</code>等这些类型的文件的时候，<code>webpack</code>则无能为力，这时候就需要配置对应的<code>loader</code>进行文件内容的解析<br><img src="/2025/03/03/postWebPack/image-20.png" alt="alt text"><br>当 <code>webpack</code> 碰到不识别的模块的时候，<code>webpack</code> 会在配置的中查找该文件解析规则<br>关于配置<code>loader</code>的方式有三种：<br>配置方式（推荐）：在 <code>webpack.config.js</code>文件中指定 <code>loader</code><br>内联方式：在每个 <code>import</code> 语句中显式指定 <code>loader</code><br><code>CLI </code>方式：在 <code>shell </code>命令中指定它们</p><h3 id="配置方式"><a href="#配置方式" class="headerlink" title="配置方式"></a>配置方式</h3><p>每一个<code>loader</code>对应一个对象的形式，对象属性<code>test</code> 为匹配的规则，一般情况为正则表达式</p><p>属性<code>use</code>针对匹配到文件类型，调用对应的 <code>loader</code>进行处理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        <span class="attr">use</span>: [</span><br><span class="line">          &#123; <span class="attr">loader</span>: <span class="string">&#x27;style-loader&#x27;</span> &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">loader</span>: <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">            <span class="attr">options</span>: &#123;</span><br><span class="line">              <span class="attr">modules</span>: <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123; <span class="attr">loader</span>: <span class="string">&#x27;sass-loader&#x27;</span> &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="常见的loader"><a href="#常见的loader" class="headerlink" title="常见的loader"></a>常见的loader</h3><p><code>style-loader</code>: 将<code>css</code>添加到<code>DOM</code>的内联样式标签<code>style</code>里<br><code>css-loader</code> :允许将<code>css</code>文件通过<code>require</code>的方式引入，并返回<code>css</code>代码<br><code>less-loader</code>: 处理<code>less</code><br><code>sass-loader</code>: 处理<code>sass</code></p><h2 id="Plugin"><a href="#Plugin" class="headerlink" title="Plugin"></a>Plugin</h2><p><code>Plugin</code>是一种计算机应用程序，它和主应用程序互相交互，以提供特定的功能<br><code>webpack</code>中的<code>plugin</code>也是如此，<code>plugin</code>赋予其各种灵活的功能，例如打<strong>包优化、资源管理、环境变量</strong>注入等，它们会运行在 <code>webpack</code> 的不同阶段（钩子 &#x2F; 生命周期），贯穿了<code>webpack</code>整个编译周期<br><img src="/2025/03/03/postWebPack/image-21.png" alt="alt text"><br><strong>目的在于解决<code>loader</code> 无法实现的其他事</strong></p><h3 id="配置方式-1"><a href="#配置方式-1" class="headerlink" title="配置方式"></a>配置方式</h3><p>一般情况，通过配置文件导出对象中<code>plugins</code>属性传入<code>new</code>实例对象。如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>); <span class="comment">// 通过 npm 安装</span></span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>); <span class="comment">// 访问内置的插件</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> webpack.<span class="title class_">ProgressPlugin</span>(),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123; <span class="attr">template</span>: <span class="string">&#x27;./src/index.html&#x27;</span> &#125;),</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="常见的Plugin"><a href="#常见的Plugin" class="headerlink" title="常见的Plugin"></a>常见的Plugin</h3><ol><li><code>HtmlWebpackPlugin</code>:自动生成<code> HTML</code> 文件，并自动将生成的 <code>JS</code> 和 <code>CSS</code> 文件引入到该 <code>HTML</code> 文件中。<br>安装：<code>npm install --save-dev html-webpack-plugin</code><br>使用：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="attr">template</span>: <span class="string">&#x27;./src/index.html&#x27;</span>, <span class="comment">// 指定模板文件</span></span><br><span class="line">      <span class="attr">filename</span>: <span class="string">&#x27;index.html&#x27;</span>,       <span class="comment">// 输出文件名</span></span><br><span class="line">      <span class="attr">inject</span>: <span class="string">&#x27;body&#x27;</span>                <span class="comment">// 将所有脚本资源注入到 body 标签结束之前</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><code>CleanWebpackPlugin</code>:在每次构建前清理输出目录，确保旧文件不会干扰新构建结果<br><code>npm install --save-dev clean-webpack-plugin</code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">CleanWebpackPlugin</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;clean-webpack-plugin&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">CleanWebpackPlugin</span>()</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><code>DefinePlugin</code>:定义全局常量，通常用于配置不同的环境变量。无需额外安装，它是 <code>Webpack</code> 内置的插件。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> webpack.<span class="title class_">DefinePlugin</span>(&#123;</span><br><span class="line">      <span class="string">&#x27;process.env.NODE_ENV&#x27;</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="string">&#x27;production&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><h2 id="plugin与loader的区别"><a href="#plugin与loader的区别" class="headerlink" title="plugin与loader的区别"></a>plugin与loader的区别</h2><ul><li><code>loader</code> 是<strong>文件加载器</strong>，<strong>能够加载资源文件，并对这些文件进行一些处理</strong>，诸如编译、压缩等，最终一起打包到指定的文件中</li><li><code>plugin</code> 赋予了 <code>webpack</code> 各种灵活的功能，例如<strong>打包优化、资源管理、环境变量注入</strong>等，目的是解决 <code>loader</code> 无法实现的其他事<br><strong>运行时机</strong><br><code>loader</code> 运行在打包文件之前<br><code>plugins</code>s在整个编译周期都起作用<br>在<code>Webpack</code> 运行的生命周期中会广播出许多事件，<code>Plugin</code> 可以监听这些事件，在合适的时机通过<code>Webpack</code>提供的 API改变输出结果</li></ul><p>对于<code>loader</code>，实质是一个转换器，将A文件进行编译形成B文件，操作的是文件，比如将<code>A.scss</code>或<code>A.less</code>转变为<code>B.css</code>，单纯的文件转换过程</p><p><code>loader</code>可以链式调用，<code>plugin</code>不可以</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>浏览器与网络</title>
      <link href="/2025/02/20/%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%8E%E7%BD%91%E7%BB%9C/"/>
      <url>/2025/02/20/%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%8E%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="浏览器与网络"><a href="#浏览器与网络" class="headerlink" title="浏览器与网络"></a>浏览器与网络</h1><h2 id="从输入URL到页面渲染的完整过程是什么？"><a href="#从输入URL到页面渲染的完整过程是什么？" class="headerlink" title="从输入URL到页面渲染的完整过程是什么？"></a>从输入URL到页面渲染的完整过程是什么？</h2><ol><li><code>DNS</code>解析：浏览器解析 <code>URL</code> 中的域名，查询其对应的 <code>IP</code> 地址。</li><li><code>TCP</code>连接：浏览器与服务器建立 <code>TCP</code> 连接（通常使用三次握手）。</li><li>发送 <code>HTTP</code> 请求：浏览器向服务器发送 <code>HTTP</code> 请求。</li><li>服务器处理请求并响应：服务器根据请求返回 <code>HTML</code>、<code>CSS</code>、<code>JS </code>等资源。</li><li>浏览器渲染页面：浏览器开始解析 <code>HTML</code> 内容，构建 <code>DOM</code> 树，解析 <code>CSS</code>，生成 <code>CSSOM</code> 树，然后合并生成渲染树，最后绘制页面。</li></ol><h2 id="什么是跨域？CORS的原理是什么？如何解决跨域问题？"><a href="#什么是跨域？CORS的原理是什么？如何解决跨域问题？" class="headerlink" title="什么是跨域？CORS的原理是什么？如何解决跨域问题？"></a>什么是跨域？CORS的原理是什么？如何解决跨域问题？</h2><p>指在浏览器中，不同源的请求（不同的域名、端口或协议）会受到浏览器的安全限制。比如，前端向不同域的 <code>API </code>发送请求会被浏览器拦截。<br><code>CORS</code>（跨域资源共享）：是一种浏览器机制，允许服务器明确指定哪些源可以访问资源。通过<code>HTTP</code>头信息（如 <code>Access-Control-Allow-Origin</code>）告知浏览器，哪些请求可以跨域访问。<br>解决方法：</p><ul><li>CORS：通过在服务器端配置响应头，允许跨域请求。</li><li>JSONP：利用 <code>&lt;script&gt;</code> 标签不受同源策略限制的特性来跨域。</li><li>代理服务器：使用服务器代理请求，避免浏览器的跨域限制。</li></ul><h2 id="浏览器事件循环中宏任务（MacroTask）和微任务（MicroTask）的执行顺序是什么？"><a href="#浏览器事件循环中宏任务（MacroTask）和微任务（MicroTask）的执行顺序是什么？" class="headerlink" title="浏览器事件循环中宏任务（MacroTask）和微任务（MicroTask）的执行顺序是什么？"></a>浏览器事件循环中宏任务（MacroTask）和微任务（MicroTask）的执行顺序是什么？</h2><p>执行栈执行完毕，会去任务队列看是否有异步任务，有就送到执行栈执行，反复循环查看执行，这个过程就是事件循环</p><ol><li>执行同步代码</li><li>执行所有微任务队列中的任务（如：<code>Promise.then</code>）。</li><li>再执行下一个宏任务。</li></ol><h2 id="HTTP缓存策略（强缓存和协商缓存）是如何工作的？"><a href="#HTTP缓存策略（强缓存和协商缓存）是如何工作的？" class="headerlink" title="HTTP缓存策略（强缓存和协商缓存）是如何工作的？"></a>HTTP缓存策略（强缓存和协商缓存）是如何工作的？</h2><ul><li><strong>强缓存</strong>：指浏览器直接使用缓存中的资源，而不向服务器发送请求。常通过 <code>Cache-Control</code> 或 <code>Expires</code> 头来控制。<br><code>Cache-Control</code>：是一个通用的 <code>HTTP</code> 头字段，<strong>用于控制缓存的行为</strong>。它可以出现在请求头和响应头中，并且可以包含多个指令:</li><li><code>public</code>：<br>表示响应可以被任何缓存存储，包括中间代理服务器。</li><li><code>private</code>：<br>表示响应只能被用户的浏览器缓存，不能被中间代理服务器缓存。</li><li><code>no-cache</code>：<br>表示在使用缓存之前必须先验证资源的有效性（即需要与服务器进行一次条件请求）。</li><li><code>no-store</code>：<br>表示禁止缓存任何内容，每次请求都必须从服务器获取最新资源。<br><code>max-age</code>，定义资源在客户端缓存的时长。<br>**<code>Expires</code>**：是一个较早的 HTTP 响应头字段，用于指定资源的过期时间。它是一个绝对的时间戳，格式为 GMT 时间。</li><li><strong>协商缓存</strong>：浏览器向服务器发送请求，但服务器通过一些机制（如 <code>Last-Modified</code>、<code>ETag</code>）来判断资源是否更新，若未更新则使用缓存。<br><code>ETag</code>是一个唯一标识符，通常是由服务器生成的<strong>哈希值</strong>，用于标识某个特定版本的资源。当资源发生变化时，<code>ETag</code> 也会随之改变。(首次请求，客户端向服务器请求资源，服务器返回资源的同时，在响应头上包含<code>ETag</code>字段；客户端再次请求相同的资源时，会在请求头上添加<code>If-None-Math</code>字段，并附上之前收到的<code>Etag</code>值；如果资源未发生变化，即<code>Etag</code>未改变，服务器返回<code>304 Not Modified</code> 状态码，表示客户端可以使用本地缓存的资源;如果资源发生了变化，服务器返回新的资源及更新以后的<code>ETag</code>)<br><code>Last-Modified </code>是一个<strong>时间戳</strong>，表示资源最后一次修改的时间。它通常由服务器在首次响应时提供，并且可以在后续请求中用于验证资源是否已经更新。<br>首次请求：<br>客户端向服务器请求资源。<br>服务器返回资源的同时，在响应头中包含 <code>Last-Modified</code> 字段;客户端再次请求相同的资源时，会在请求头中添加 <code>If-Modified-Since</code> 字段，并附上之前收到的 <code>Last-Modified </code>时间，服务器接收到请求后，会根据 <code>If-Modified-Since</code> 中的时间检查资源是否在此之后发生了变化：<br>如果资源未发生变化（即自上次修改以来没有更新），服务器返回 <code>304 Not Modified</code> 状态码，表示客户端可以使用本地缓存的资源。<br>如果资源发生了变化（即自上次修改以来有更新），服务器返回新的资源以及更新后的 <code>Last-Modified</code> 时间。<br><strong>以下是缓存机制的优先级顺序</strong>：</li></ul><ol><li><code>Cache-Control</code>：最高优先级，用于控制强缓存策略。如果设置了 <code>no-store</code> 或 <code>no-cache</code>，将直接跳过缓存或强制重新验证。</li><li><code>Expires</code>：次优先级，用于指定资源的过期时间。但在 <code>HTTP/1.1</code> 中，<code>Cache-Control</code> 的优先级更高。</li><li><code>ETag</code>：用于协商缓存验证，优先于 <code>Last-Modified</code>。</li><li><code>Last-Modified</code>：用于协商缓存验证，但优先级低于 <code>ETag</code>。</li></ol><h2 id="什么是XSS攻击？如何防范？"><a href="#什么是XSS攻击？如何防范？" class="headerlink" title="什么是XSS攻击？如何防范？"></a>什么是XSS攻击？如何防范？</h2><p><code>XSS</code>（跨站脚本攻击）：攻击者将恶意脚本注入到网页中，这些脚本会在用户浏览网页时执行，导致敏感数据泄露、账号被盗等安全问题。<br>防范措施：<br>输入验证：对用户输入进行严格的验证，避免注入恶意脚本。<br>输出编码：对动态生成的内容进行 <code>HTML</code> 编码，防止脚本被执行。<br><code>HTTPOnly </code>和 <code>Secure Cookie</code>：使用 <code>HTTPOnly</code> 和 <code>Secure</code> 属性来增强 <code>Cookies</code> 的安全性。<br><code>CSP</code>（内容安全策略）：通过设置 <code>Content-Security-Policy</code> 头来限制页面加载的资源，防止加载外部恶意脚本。</p><h2 id="列举一些HTTP状态码"><a href="#列举一些HTTP状态码" class="headerlink" title="列举一些HTTP状态码"></a>列举一些HTTP状态码</h2><ul><li>1xx 服务器收到请求，需要请求者继续执行操作</li><li>200 <code>OK</code>:请求成功，服务器返回所请求的数据</li><li>3xx (重定向状态码)：需要后续操作才能完成这一请求</li><li>403 <code>Forbidden</code>:服务器已经理解请求，但是拒接执行</li><li>404 <code>NOT FOUND</code>:请求的资源在服务器上不存在</li><li>500 <code>Internal Server Error</code>:服务器内部错误，无法完成请求</li><li>304 <code>Not Modified</code> 表示客户端的缓存版本仍然是最新的，不需要重新下载资源。</li></ul><h2 id="浏览器渲染流程-网页加载过程（从输入URL到看到页面）"><a href="#浏览器渲染流程-网页加载过程（从输入URL到看到页面）" class="headerlink" title="浏览器渲染流程&#x2F;网页加载过程（从输入URL到看到页面）"></a>浏览器渲染流程&#x2F;网页加载过程（从输入URL到看到页面）</h2><ol><li><p>URL解析：浏览器解析用户输入的 URL，提取协议、域名、端口、路径等信息</p></li><li><p>DNS查询:通过 DNS 查询将域名解析为对应的 IP 地址。</p></li><li><p>建立TCP连接:浏览器与服务器之间通过三次握手建立 TCP 连接。</p></li><li><p>发送HTTP请求</p></li><li><p>服务器处理请求</p></li><li><p>接收HTTP响应</p></li><li><p>浏览器解析和渲染</p></li><li><p>加载静态资源</p></li><li><p>页面交互</p></li></ol><h2 id="图片懒加载（Lazy-Loading）"><a href="#图片懒加载（Lazy-Loading）" class="headerlink" title="图片懒加载（Lazy Loading）"></a>图片懒加载（Lazy Loading）</h2><p>一种优化网页性能的技术，它通过延迟加载页面上的非关键资源（如图片、视频等），直到用户需要查看这些资源时才进行加载。</p><ol><li><strong>加快页面初始加载速度</strong>：懒加载减少了页面初次加载时需要下载的数据量，使得页面能够更快地显示出来。</li><li><strong>节省流量和带宽</strong>：对于使用移动设备或受限于网络条件的用户而言，懒加载可以显著减少不必要的数据传输。只有当用户滚动到相关内容区域时，才会加载相应的图片，从而节省了用户的流量和带宽消耗。</li><li>改善页面响应性：由于初始加载的内容较少，浏览器需要处理的任务也相应减少，这有助于提高页面的整体响应性和流畅度，尤其是在低端设备上效果更为明显。</li><li>增强用户体验：通过逐步加载内容，用户可以看到页面从无到有的构建过程，而不是长时间等待整个页面完全加载。此外，懒加载还可以结合占位符或者渐进式图像来进一步提升视觉体验，使用户在等待图片加载过程中不会感到突兀。</li><li>优先展示关键内容：懒加载允许开发者优先加载和渲染页面中最重要的部分，确保用户首先看到的是最相关的信息，而将次级内容的加载推迟到必要时刻。</li></ol><h2 id="预加载和懒加载"><a href="#预加载和懒加载" class="headerlink" title="预加载和懒加载"></a>预加载和懒加载</h2><p><strong>预加载</strong>：在用户请求之前提前加载某些资源，以便这些资源在需要时可以立即使用，从而减少等待时间。预加载适用于那些你确定用户即将需要但尚未请求的资源。<br>适用场景：关键资源、导航预测<br>实现方法：</p><ol><li><p>通过 <code>&lt;link&gt;</code> 标签进行预加载</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=<span class="string">&quot;preload&quot;</span> href=<span class="string">&quot;/path/to/important-script.js&quot;</span> <span class="keyword">as</span>=<span class="string">&quot;script&quot;</span>&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;preload&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/path/to/critical-font.woff2&quot;</span> <span class="attr">as</span>=<span class="string">&quot;font&quot;</span> <span class="attr">type</span>=<span class="string">&quot;font/woff2&quot;</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><code>rel=&quot;preload&quot;</code>：告诉浏览器这是一个预加载资源。<br><code>as</code> 属性用于指定预加载资源的类型，这对于浏览器正确处理资源优先级、缓存以及请求头信息非常重要。<code>script</code> 和 <code>style</code> 通常会被赋予较高的优先级</p></li><li><p>通过 <code>JavaScript</code> 动态预加载</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> link = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;link&#x27;</span>);</span><br><span class="line">link.<span class="property">rel</span> = <span class="string">&#x27;preload&#x27;</span>;</span><br><span class="line">link.<span class="property">as</span> = <span class="string">&#x27;script&#x27;</span>;</span><br><span class="line">link.<span class="property">href</span> = <span class="string">&#x27;/path/to/important-script.js&#x27;</span>;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">head</span>.<span class="title function_">appendChild</span>(link);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载完成后执行</span></span><br><span class="line">link.<span class="property">onload</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Script preloaded&#x27;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>onload </code>事件用于检测资源是否已经成功加载。当预加载的资源完全加载完毕后，<code>onload </code>回调函数将被触发。</p></li></ol><p><strong>懒加载</strong>：一种延迟加载技术，只有当资源进入视口（即用户可见区域）或即将进入视口时才加载资源。这有助于减少初始页面加载时间，节省带宽，并提高页面性能。<br>适用场景：图片、视频、非关键脚本<br><strong>原理</strong>：</p><ol><li>延迟加载： 核心思想是推迟加载那些当前不在视口（即用户可见区域）内的资源，直到这些资源即将进入视口或用户滚动到它们的位置时再进行加载。</li><li>监听事件：通过监听用户的滚动、缩放等事件，判断资源是否即将进入视口，并在此时触发加载操作。</li><li>动态插入资源：一旦确定某个资源需要加载，通过动态创建 <code>&lt;img&gt;</code> 标签、<code>&lt;script&gt;</code> 标签或其他方式将资源插入 <code>DOM</code>中并开始加载。<br>实现懒加载的步骤：</li><li><code>HTML</code> 图片懒加载 <code>HTML5</code> 提供了原生的懒加载支持：<br><code>&lt;img src=&quot;placeholder.jpg&quot; data-src=&quot;real-image.jpg&quot; loading=&quot;lazy&quot; alt=&quot;A lazy loaded image&quot;&gt;</code><br><code>loading=&quot;lazy&quot;</code>：告诉浏览器这个图片应该懒加载。<br><code>data-src</code>：实际图片的 <code>URL</code>，会在需要时替换 <code>src</code>。</li><li>js监听和处理<br>使用 <code>Intersection Observer API</code><br><code>Intersection Observer API</code> 是一种现代且高效的监听元素进入视口的方法，适用于懒加载图片、视频等资源。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> images = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;img&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">callback</span> = entries =&gt;&#123;</span><br><span class="line">  entries.<span class="title function_">forEach</span>(<span class="function"><span class="params">entry</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(entry.<span class="property">isIntersecting</span>)&#123;<span class="comment">//是否滚动到可视区域</span></span><br><span class="line">      <span class="keyword">const</span> image = entry.<span class="property">target</span><span class="comment">//当前的图片</span></span><br><span class="line">      <span class="keyword">const</span> data_src = image.<span class="title function_">getAttribute</span>(<span class="string">&#x27;data-src&#x27;</span>)</span><br><span class="line">      image.<span class="title function_">setAttribute</span>(<span class="string">&#x27;src&#x27;</span>,data_src)</span><br><span class="line">      observe.<span class="title function_">unobserve</span>(image)</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;触发&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> observe = <span class="keyword">new</span> <span class="title class_">IntersectionObserver</span>(callback)</span><br><span class="line">images.<span class="title function_">forEach</span>(<span class="function"><span class="params">image</span>=&gt;</span>&#123;</span><br><span class="line">  observe.<span class="title function_">observe</span>(image)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li>视频懒加载<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">poster</span>=<span class="string">&quot;poster.jpg&quot;</span> <span class="attr">class</span>=<span class="string">&quot;lazyload&quot;</span> <span class="attr">controls</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">data-src</span>=<span class="string">&quot;path/to/video.mp4&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/mp4&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> videos = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(video.<span class="property">lazyload</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">callback</span> = (<span class="params">entries</span>)=&gt;&#123;</span><br><span class="line">  entries.<span class="title function_">forEach</span>(<span class="function"><span class="params">entry</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(entry.<span class="property">isIntersecting</span>)&#123;</span><br><span class="line">      <span class="keyword">const</span> video = entry.<span class="property">target</span></span><br><span class="line">      <span class="keyword">const</span> sources = video.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;source&#x27;</span>)</span><br><span class="line">      sources.<span class="title function_">forEach</span>(<span class="function"><span class="params">source</span>=&gt;</span>&#123;</span><br><span class="line">        source.<span class="property">src</span> = source.<span class="title function_">getAttricute</span>(<span class="string">&#x27;data-src&#x27;</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">      video.<span class="title function_">load</span>()</span><br><span class="line">      video.<span class="title function_">play</span>()</span><br><span class="line">      videoObserver.<span class="title function_">unobserve</span>(video)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> videoObserver = <span class="keyword">new</span> <span class="title class_">IntersectionObserver</span>(callback)</span><br><span class="line">videos.<span class="title function_">forEach</span>(<span class="function"><span class="params">video</span>=&gt;</span>&#123;</span><br><span class="line">  videoObserver.<span class="title function_">observe</span>(video)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li>脚本懒加载<br>对于非关键的<code>JavaScript</code>文件，也可以使用懒加载来提升页面加载速度。<br><strong>动态加载脚本</strong><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">loadScript</span>(<span class="params">url, callback</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>);</span><br><span class="line">  script.<span class="property">src</span> = url;</span><br><span class="line">  script.<span class="property">onload</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Script loaded:&#x27;</span>, url);</span><br><span class="line">    <span class="keyword">if</span> (callback) <span class="title function_">callback</span>();</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(script);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在需要时加载脚本</span></span><br><span class="line"><span class="title function_">loadScript</span>(<span class="string">&#x27;/path/to/optional-script.js&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Optional script is now available&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><strong>使用 <code>import()</code> 动态导入模块<br>在现代 <code>JavaScript</code> 中，可以使用动态 <code>import()</code> 来懒加载模块。</strong></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">loadModule</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="variable language_">module</span> = <span class="keyword">await</span> <span class="keyword">import</span>(<span class="string">&#x27;/path/to/module.js&#x27;</span>);</span><br><span class="line">  <span class="variable language_">module</span>.<span class="title function_">someFunction</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 在需要时加载模块</span></span><br><span class="line"><span class="title function_">loadModule</span>();</span><br></pre></td></tr></table></figure><ol start="5"><li>路由懒加载<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>, <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./views/Home.vue&#x27;</span>); &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure></li></ol><h2 id="常见的请求头都有哪些"><a href="#常见的请求头都有哪些" class="headerlink" title="常见的请求头都有哪些?"></a>常见的请求头都有哪些?</h2><h2 id="get-和-post-的区别"><a href="#get-和-post-的区别" class="headerlink" title="get 和 post 的区别"></a>get 和 post 的区别</h2><ul><li><strong>GET 方法</strong><br>用途：主要用于<strong>请求数据</strong>，即从服务器检索信息。</li></ul><ol><li>参数传递：通过<code>URL</code>发送参数（例如 <code>example.com/?key1=value1&amp;key2=value2</code>），这些参数<strong>直接显示在浏览器地址栏</strong>。</li><li>数据长度限制：由于参数附在<code>URL</code>之后，受限于浏览器和服务器对<code>URL</code>长度的限制，通常不适合传输大量数据。</li><li>缓存：<strong>可以被浏览器缓存</strong>，也可能被搜索引擎索引。</li><li>安全性：因为数据直接暴露在<code>URL</code>中，所以不适合用来发送敏感信息。</li></ol><ul><li><strong>POST 方法</strong><br>用途：主要用于<strong>提交数据</strong>给服务器处理，比如向数据库添加或更新记录。</li></ul><ol><li>参数传递：通过<code>HTTP</code><strong>请求体</strong>发送数据，不在<code>URL</code>中显示。</li><li>数据长度限制：理论上没有严格的数据量限制，但实际上会受到服务器配置的影响。</li><li>缓存：<strong>不会被浏览器缓存</strong>，默认情况下也不会被搜索引擎索引。</li><li>安全性：相比<code>GET</code>方法，<code>POST</code>方法更加安全，因为数据不是明文显示在<code>URL</code>上，但仍然需要额外的安全措施（如<code>HTTPS</code>）来保护数据传输安全。</li></ol><ul><li><strong>PUT</strong> 方法<br>用途：主要用于向服务器上传数据以<strong>创建或更新资源</strong>。<br>特点：</li><li>如果目标资源已经存在，则使用提供的数据更新该资源。</li><li>如果目标资源不存在，服务器可能会根据请求创建一个新的资源，并且<code>URL</code>由客户端指定。<br>示例场景：<br>更新用户资料：如果有一个<code>API</code>端点 <code>/users/123</code>，你可以发送一个<code> PUT</code> 请求来更新用户ID为123的用户信息。<br>文件上传：将特定文件的内容上传到服务器上的特定位置。</li><li><strong>DELETE 方法</strong><br>用途：用于请求服务器<strong>删除指定的资源</strong>。<br>特点：<br>发送 <code>DELETE </code>请求给一个特定的资源URL，指示服务器应移除对应标识的资源。<br>成功执行后，服务器可能返回状态码如 <code>200 OK</code>（包含被删除资源的信息）或 <code>204 No Content</code>（没有返回内容）。<br>示例场景：<br>删除用户的个人资料：发送 <code>DELETE </code>请求到 <code>/users/123</code> 来删除用户ID为123的用户资料。<br>移除文件：通过发送 <code>DELETE </code>请求到相应的文件路径来从服务器上删除文件。</li></ul><h2 id="HTTP和HTTPS的区别"><a href="#HTTP和HTTPS的区别" class="headerlink" title="HTTP和HTTPS的区别"></a>HTTP和HTTPS的区别</h2><p>是用于在网络上<strong>传输网页</strong>的<strong>两种协议</strong>，它们之间的主要区别在于<strong>安全性</strong>：</p><ol><li>安全性：<br><code>HTTP</code>：是以<strong>明文形式</strong>发送数据的，<strong>不提供任何加密或安全保障</strong>。这意味着在客户端与服务器之间传输的数据（如用户名、密码等敏感信息）可以被轻易地拦截和读取。<br><code>HTTPS</code>：通过<code>SSL（Secure Sockets Layer）</code>或<code>TLS（Transport Layer Security）</code>协议为通信加密，确保数据在客户端和服务器之间的传输过程中是加密的，防止中间人攻击和窃听。</li><li>URL前缀：<br><code>HTTP</code>网址以<code>http://</code>开头。<br><code>HTTPS</code>网址以<code>https://</code>开头，并且很多浏览器会在地址栏显示一个锁形图标，表示连接是安全的。</li><li>端口号：<br>默认情况下，<code>HTTP</code>使用80端口。<br><code>HTTPS</code>默认使用443端口。</li><li>性能影响：<br>由于<code>HTTPS</code>需要额外的计算资源来进行加密和解密操作，理论上它可能会比<code>HTTP</code>稍慢一些。然而，现代硬件和优化技术（如<code>HTTP/2</code>通常仅通过<code>HTTPS</code>提供）已经大大缩小了这种差距，有时甚至让<code>HTTPS</code>表现得更好。</li><li><code>SEO</code>优势：<br><code>Google</code>和其他搜索引擎倾向于给予<code>HTTPS</code>网站更好的排名。因此，从SEO的角度来看，采用<code>HTTPS</code>是有益的。<br>信任度：<br>使用<code>HTTPS</code>的网站通常会获得更高的用户信任度，因为用户知道他们的数据得到了保护。此外，某些浏览器会标记<code>HTTP</code>站点为“不安全”，这可能会影响用户的访问意愿。</li></ol><h2 id="TCP-IP-HTTP是什么？"><a href="#TCP-IP-HTTP是什么？" class="headerlink" title="TCP,IP,HTTP是什么？"></a>TCP,IP,HTTP是什么？</h2><h3 id="TCP-Transmission-Control-Protocol"><a href="#TCP-Transmission-Control-Protocol" class="headerlink" title="TCP (Transmission Control Protocol)"></a>TCP (Transmission Control Protocol)</h3><p><code>TCP</code> 是一种面向连接的、可靠的<strong>传输层协议</strong>，用于在网络中提供可靠的数据传输服务。<strong>它确保数据包按顺序到达并且没有丢失或损坏</strong>。</p><h3 id="IP-Internet-Protocol"><a href="#IP-Internet-Protocol" class="headerlink" title="IP(Internet Protocol)"></a>IP(Internet Protocol)</h3><p><code>IP</code> 是<strong>网络层协议</strong>，负责<strong>将数据包从源地址传输到目标地址</strong>。它不保证数据包的可靠性和顺序性，只负责尽力而为地传输数据。</p><h3 id="HTTP-Hypertext-Transfer-Protocol"><a href="#HTTP-Hypertext-Transfer-Protocol" class="headerlink" title="HTTP (Hypertext Transfer Protocol)"></a>HTTP (Hypertext Transfer Protocol)</h3><p><code>HTTP</code> 是应用层协议，用于在<code>Web</code> 浏览器和 <code>Web</code> 服务器之间传输超文本（如 <code>HTML</code> 页面）。它是万维网的基础协议之一。<br><img src="/2025/02/20/%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%8E%E7%BD%91%E7%BB%9C/image-22.png" alt="alt text"></p><h2 id="HTTPS是如何保证安全的？"><a href="#HTTPS是如何保证安全的？" class="headerlink" title="HTTPS是如何保证安全的？"></a>HTTPS是如何保证安全的？</h2><p><code>HTTP</code>在通信过程中，存在以下问题：</p><ul><li>通信使用明文（不加密），内容可能被窃听</li><li>不验证通信方的身份，因此有可能遭遇伪装</li></ul><p>而<code>HTTPS</code>的出现正是解决这些问题，<code>HTTPS</code>是建立在<code>SSL</code>之上，其安全性由<code>SSL</code>来保证。在采用<code>SSL</code>后，<code>HTTP</code>就拥有了<code>HTTPS</code>的加密、证书和完整性保护这些功能</p><p><strong><code>SSL</code>的实现这些功能主要依赖于三种手段</strong>：</p><ol><li>对称加密：加密和解密使用的秘钥都是同一个，是对称的</li><li>非对称加密：存在两个秘钥，一个叫公钥，一个叫私钥。公钥加密后只能用私钥解密;私钥加密后也只能用公钥解密;(自己的密钥＋对方的密钥+公钥)</li><li>摘要算法：验证信息的完整性</li><li>数字签名：身份验证</li></ol><h2 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h2><p><code>DNS（Domain Names System）</code>，域名系统，是互联网一项服务，<strong>把域名转化为相应的IP地址</strong>。<br><img src="/2025/02/20/%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%8E%E7%BD%91%E7%BB%9C/image-23.png" alt="alt text"><br><strong>查询过程</strong><br><img src="/2025/02/20/%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%8E%E7%BD%91%E7%BB%9C/image-24.png" alt="alt text"></p><h2 id="CDN-Content-Delivery-Network-内容分发网络"><a href="#CDN-Content-Delivery-Network-内容分发网络" class="headerlink" title="CDN( Content Delivery Network)内容分发网络"></a>CDN( Content Delivery Network)内容分发网络</h2><p><code>CDN</code>就是根据用户位置分配最近的资源<br>用户在上网的时候不用直接访问源站，而是访问离他“最近的”一个<code>CDN</code>节点，术语叫边缘节点，<strong>其实就是缓存了源站内容的代理服务器</strong>。</p><p><code>CDN</code> 目的是为了改善互联网的服务质量，通俗一点说其实就是<strong>提高访问速度</strong></p><p><code>CDN</code> 构建了全国、全球级别的专网，让用户就近访问专网里的边缘节点，降低了传输延迟，实现了网站加速</p><h2 id="单点登录"><a href="#单点登录" class="headerlink" title="单点登录"></a>单点登录</h2><p>一个公司不同的系统的用户是相通的，那么就把用户抽离出来，形成一个认证中心(专门用来管理用户的)，这样一来，用户对信息的所有操作都在同一个点，这就叫单点登录</p><p><strong>SESSION+COOKIE模式</strong><br><img src="/2025/02/20/%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%8E%E7%BD%91%E7%BB%9C/image-28.png"><br>如果session表格中有用户的记录，那么就表示登陆成功，如果没有，就不能登录(服务端可以自行删除表格中的内容，所以可以控制用户)，但是，如果A系统的用户群体增大扩容后，不管B系统如何，认证中心都需要扩容。所以消耗较大<br>token模式<br><img src="/2025/02/20/%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%8E%E7%BD%91%E7%BB%9C/image-25.png"><br>认证中心对用户的控制减弱<br>双token<br><img src="/2025/02/20/%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%8E%E7%BD%91%E7%BB%9C/image-26.png"><img src="/2025/02/20/%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%8E%E7%BD%91%E7%BB%9C/image-27.png"></p><h2 id="无感刷新"><a href="#无感刷新" class="headerlink" title="无感刷新"></a>无感刷新</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Q&amp;A(VUE)</title>
      <link href="/2025/02/09/Q-A-VUE/"/>
      <url>/2025/02/09/Q-A-VUE/</url>
      
        <content type="html"><![CDATA[<h1 id="vue"><a href="#vue" class="headerlink" title="vue"></a>vue</h1><h2 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h2><p><code>MVVM</code> 架构主要由三个核心部分组成：</p><ol><li><code>Model</code>对应<code>data</code>中的数据</li><li><code>View</code>（视图）看到的页面</li><li><code>ViewModel</code>（视图模型）<code>Vue</code>实例<br><strong>核心特性：</strong><br><code>MVVM</code> 的一个关键特性是双向数据绑定。这意味着当 <code>Model</code> 中的数据发生变化时，<code>View</code> 会自动更新；同样，当用户在 <code>View</code> 中修改数据时，<code>Model</code> 也会自动更新。这种机制大大减少了手动同步数据的工作量。<br>视图模型是<code>MVVM</code>模式的核心，它有两个方向：一是将模型转化成视图(后端的数据转化成所看到的页面)实现方式是数据绑定。二是将视图转化成模型，即将所看到的页面转化成后端的数据。实现的方式是<code>DOM</code>事件监听。这两个方向都实现，我们称之为数据的双向绑定。</li></ol><h2 id="vue3生命周期"><a href="#vue3生命周期" class="headerlink" title="vue3生命周期"></a>vue3生命周期</h2><p>Vue实例从创建到销毁的过程，就是生命周期<br><code>beforeCreate</code>：实例初始化之后，数据观测(data observer) 和 event&#x2F;watcher 事件配置之前。<br><code>created</code>：实例创建完成后被调用。此时已完成数据观测(<code>data observer</code>)，属性和方法的运算，<code>watch/event</code> 事件回调。但尚未挂载(<code>mounted</code>)，<code>$el</code> 属性不可见。<br><code>beforeMount</code>：在挂载开始之前被调用：相关的 <code>render</code> 函数首次被调用。<br><code>mounted</code>：实例挂载到DOM后调用，这时可以访问到 <code>$el</code> 属性。<br><code>beforeUpdate</code>：数据更新时，在虚拟 <code>DOM</code> 打补丁之前调用。适合在更新前访问现有的 <code>DOM</code>。<br><code>updated</code>：由于数据更改导致的虚拟 <code>DOM</code> 重新渲染和打补丁，在这之后会调用该钩子。<br><code>beforeUnmount</code>（在 Vue 2 中名为 <code>beforeDestroy</code>）：实例销毁之前调用。在这一步，实例仍然完全可用。<br><code>unmounted</code>（在 Vue 2 中名为 <code>destroyed</code>）：实例销毁后调用。调用后，所有的事件监听器会被移除，所有子实例也会被销毁。</p><h2 id="Vue的生命周期钩子中，created和mounted的区别是什么？"><a href="#Vue的生命周期钩子中，created和mounted的区别是什么？" class="headerlink" title="Vue的生命周期钩子中，created和mounted的区别是什么？"></a>Vue的生命周期钩子中，created和mounted的区别是什么？</h2><ul><li>created：实例已创建，但DOM未挂载（不可操作DOM）。</li><li>mounted：DOM已挂载到页面，可操作DOM。<br>适用场景：</li><li>created：初始化数据（如API请求）。</li><li>mounted：操作DOM或集成第三方库（如初始化图表）。</li></ul><h2 id="假设现在有一个父组件，加两个子组件，说一下他们的生命周期实现顺序。"><a href="#假设现在有一个父组件，加两个子组件，说一下他们的生命周期实现顺序。" class="headerlink" title="假设现在有一个父组件，加两个子组件，说一下他们的生命周期实现顺序。"></a>假设现在有一个父组件，加两个子组件，说一下他们的生命周期实现顺序。</h2><ol><li><strong>父组件</strong>的<code>beforeCreate</code>和<code>created</code>钩子执行。</li><li><strong>父组件</strong>的<code>beforeMount</code>钩子执行。</li><li><strong>子组件1</strong>的<code>beforeCreate</code>、<code>created</code>、<code>beforeMount</code>和<code>mounted</code>依次执行。</li><li><strong>子组件2</strong>的<code>beforeCreate</code>、<code>created</code>、<code>beforeMount</code>和<code>mounted</code>依次执行。</li><li><strong>父组件</strong>的<code>mounted</code>钩子最后执行。</li></ol><p>这样，父组件在挂载前会先确保所有子组件都已创建并挂载完成，保证在父组件的<code>mounted</code>钩子中可以访问到子组件的DOM。</p><p>在<strong>更新阶段</strong>，父组件的<code>beforeUpdate</code>会先触发，然后子组件的<code>beforeUpdate</code>和<code>updated</code>依次执行，最后父组件的<code>updated</code>触发。<strong>销毁阶段</strong>则是父组件的<code>beforeDestroy</code>先执行，然后子组件的<code>beforeDestroy</code>和<code>destroyed</code>依次执行，最后父组件的<code>destroyed</code>触发。</p><p>需要解释Vue的渲染顺序：父组件需要先解析模板，生成子组件的实例，并<strong>完成子组件的挂载</strong>后，才能完成自身的挂载。这样才能确保<strong>父组件挂载时，子组件已经就绪</strong>。</p><p>父子组件生命周期顺序：<strong>父组件创建 → 子组件创建和挂载 → 父组件挂载</strong>。</p><p>核心规则：父组件的挂载（<code>mounted</code>）一定在所有子组件挂载完成后触发。</p><p>应用场景：在父组件的 <code>mounted</code> 中操作子组件的 <code>DOM</code>或数据是安全的。</p><h2 id="vue3-和-vue2的区别"><a href="#vue3-和-vue2的区别" class="headerlink" title="vue3 和 vue2的区别"></a>vue3 和 vue2的区别</h2><ol><li>响应式系统</li></ol><ul><li>vue2<ul><li>使用<code>Object.defineProperty</code> 实现响应式。</li><li>无法检测对象属性的新增或删除(需要用<code>Vue.set</code>&#x2F;<code>Vue.delete</code>)</li><li>对数组的某些方法()</li></ul></li><li>Vue3<ul><li>改用<code>Proxy</code>实现响应式</li><li>支持对象和数组的动态属性增删</li></ul></li></ul><ol start="2"><li>组合式API<ul><li>Vue2<ul><li>基于<code>Options API</code>（data、methods、computed 等选项）。</li><li>逻辑分散，大型组件代码组织困难。</li></ul></li><li>Vue3<ul><li>引入 <code>Composition API</code>（<code>setup</code> 函数 + 响应式函数）。</li><li>逻辑可复用和组合，代码更集中、灵活。</li></ul></li></ul></li><li>生命周期与钩子<ul><li>Vue2<ul><li>生命周期钩子有<code>beforeCreate</code>,<code>created</code>,<code>beforeMount</code>,<code>mounted</code>,<code>beforeUpdate</code>,<code>updated</code>,<code>beforeDestroy</code>,<code>destroyed</code></li><li>在<code>beforeCreate</code>与<code>created</code>执行后，问你有没有<code>vm.$mount(el)</code>，如果没有，就走不下去</li></ul></li><li>Vue3<ul><li>钩子更名<code>destroyed</code> → <code>unmounted</code>，<code>beforeDestroy</code> → <code>beforeUnmount</code></li><li>完全准备好所有再执行(<code>app=Vue.createApp(opyions) app.mount(el)</code>)</li></ul></li></ul></li><li>指令与插槽<ul><li>vue2中使用slot可以直接使用slot,而vue3中必须使用v-slot的形式</li><li>v-for与v-if在vue2中优先级高的是v-for指令，而且不建议一起使用</li><li>vue3中v-for与v-if,只会把当前v-if当做v-for中的一个判断语句，不会相互冲突</li><li>vue3中移除keyCode作为v-on的修饰符，当然也不支持config.keyCodes</li><li>vue3中移除v-on.native修饰符</li><li>vue3中移除过滤器filter</li></ul></li><li><code>ref</code>和<code>reactive</code>的区别<ul><li>ref定义的是<strong>基本数据类型</strong></li><li>ref通过<code>Object.defineProperty()</code>的get和set实现数据劫持</li><li>ref操作数据<code>.value</code>，读取时不需要<code>value</code></li><li><code>reactive</code>定义对象或数组数据类型</li><li><code>reactive</code>通过Proxy实现数据劫持</li><li><code>reactive</code>操作和读取数据不需要.value</li></ul></li><li><strong>性能提升</strong>：<br>更快的渲染速度：<code>Vue 3</code> 采用了虚拟 <code>DOM</code> 的重写，并引入了静态树提升、静态属性提升等优化技术，使得渲染速度得到了显著提升。<br>更小的包体积：通过<code>Tree-shaking</code>的支持（移除未使用的代码），<code>Vue 3</code> 的核心库可以做到更小，只有当实际使用到的功能才会被打包进去，从而减少了最终打包文件的大小。</li></ol><h2 id="什么是虚拟DOM？为什么需要它？"><a href="#什么是虚拟DOM？为什么需要它？" class="headerlink" title="什么是虚拟DOM？为什么需要它？"></a>什么是虚拟DOM？为什么需要它？</h2><p>虚拟DOM（Virtual DOM） 是一个轻量级的<code>JavaScript</code>对象，描述真实DOM的结构。<br>作用：<br>性能优化：通过<code>Diff</code>算法对比新旧虚拟<code>DOM</code>，最小化真实DOM操作。<br>跨平台：抽象渲染层（如渲染到Web、Native）。<br>Vue中的虚拟DOM：通过render函数生成，更新时对比差异后局部更新真实DOM。</p><h2 id="数据代理"><a href="#数据代理" class="headerlink" title="数据代理"></a>数据代理</h2><p>通过vm对象来代理data对象中的属性的操作。vm身上有的是_data，而没有data。然后通过<code>Object.definePropoty</code>的<code>getter</code>读取到_data里的数据复制一份到vm身上。<br>好处：更加方便的操作data中的数据<br>基本原理：通过<code>Object.defineProperty()</code>把<code>data</code>对象中的所有属性添加到vm上。为每一个添加到vm上的属性都指定一个getter和setter。在getter&#x2F;setter内部去操作（读&#x2F;写）data中对应的属性。</p><h2 id="数据双向绑定的基本原理"><a href="#数据双向绑定的基本原理" class="headerlink" title="数据双向绑定的基本原理"></a>数据双向绑定的基本原理</h2><p>采用<strong>数据劫持</strong>结合<strong>发布者-订阅者模式</strong>的方式。<br>数据劫持：通过<code>Object.defineProperty()</code>来劫持对象各个属性的<code>getter</code>,<code>setter</code><br>发布订阅者模式：在数据变动时发布者发布消息给订阅者，触发相应监听回调<br>当把一个普通的js对象传给vue实例来作为它的data选项时，vue将遍历它的属性，用<code>Object.defineProperty()</code>监听它们的<code>getter/setter</code>方法。这样，他们就可以让vue追踪依赖，在对象的属性被访问和修改时通知变化</p><h2 id="Vue2和Vue3在响应式原理上的主要区别是什么？"><a href="#Vue2和Vue3在响应式原理上的主要区别是什么？" class="headerlink" title="Vue2和Vue3在响应式原理上的主要区别是什么？"></a>Vue2和Vue3在响应式原理上的主要区别是什么？</h2><p><code>Vue2</code>:使用<code>Object.defineProperty()</code>监听数据变化，访问时触发<code>getter</code>，修改时触发<code>setter</code>来更新视图，但它有局限性：无法监听数组索引的内容更改和新属性的添加与删除。需要借助(<code>Vue.set()</code>)<br><code>Vue3</code>:采用了<code> Proxy</code> 来实现响应式，它能劫持整个对象及其嵌套的对象，能够监听数组索引、对象的新增属性等，性能和灵活性更好。</p><h2 id="v-for为什么设置key"><a href="#v-for为什么设置key" class="headerlink" title="v-for为什么设置key"></a>v-for为什么设置key</h2><ol><li><strong>帮vue识别元素</strong>：<code>keys</code>是一个特殊的属性，用于帮助<code>vue</code><strong>识别每一个节点的身份</strong>，以便在更新<code>DOM</code>时更高效的进行差异对比，从而有效地更新和重排序元素；没有 <code>key</code>，<code>Vue</code> 只能通过元素在数组中的索引进行追踪，这在某些情况下（如动态列表）可能导致不必要的重渲染或错误的状态管理。</li><li><strong>提升渲染效率</strong><br>当列表数据发生变化（如添加、删除或重新排序），<code>Vue</code> 需要决定如何高效地更新<code>DOM</code>。拥有唯一<code>key</code> 的元素可以让<code>Vue</code>快速定位到具体哪些元素发生了变化，而不是简单地认为所有元素都需要重新渲染。这样可以显著提升应用的性能。</li><li><strong>维持组件状态</strong><br>如果列表项是复杂的子组件，且这些组件有自己的内部状态，那么不设置 <code>key</code> 或者使用索引作为 <code>key</code> 可能会导致子组件状态丢失。这是因为当列表顺序改变时，如果没有唯一标识符，<code>Vue</code>可能会销毁并重建组件而非简单地移动它们。通过设置稳定的 <code>key</code>，可以确保组件状态得到正确的保留。</li></ol><h2 id="Vue中的nextTick是什么？它的作用是什么？原理？"><a href="#Vue中的nextTick是什么？它的作用是什么？原理？" class="headerlink" title="Vue中的nextTick是什么？它的作用是什么？原理？"></a>Vue中的nextTick是什么？它的作用是什么？原理？</h2><p><code>Vue</code> 提供的一个 <code>API</code>，用于在 <code>DOM</code> 更新后执行某些操作。<code>Vue</code> 会将 <code>DOM</code> 更新操作和 <code>JavaScript</code> 执行操作放入异步队列中。<br>使用场景： 1. 修改数据后立即操作<code>DOM</code>   2. 确保视图更新后再执行某些逻辑<br><code>nextTick</code>利用 <code>JavaScript</code> 的事件循环机制，优先使用微任务来执行回调如 <code>Promise.then()</code>、<code>MutationObserver</code> 或者 <code>setImmediate</code>（对于<code> Node.js</code> 环境），确保在 <code>DOM</code> 更新后触发</p><h2 id="Vue的v-if和v-show有什么区别？性能上有何差异？"><a href="#Vue的v-if和v-show有什么区别？性能上有何差异？" class="headerlink" title="Vue的v-if和v-show有什么区别？性能上有何差异？"></a>Vue的v-if和v-show有什么区别？性能上有何差异？</h2><p><code>v-if</code>：根据条件动态地创建和销毁 <code>DOM </code>元素。当条件为 <code>false</code> 时，元素会被销毁；当条件为 <code>true</code> 时，元素会被创建。适用于条件变化不频繁的场景。v-if有更高的切换消耗<br><code>v-show</code>：通过切换元素的 <code>display</code> 样式来控制元素显示与否，元素会始终存在 <code>DOM </code>中，只是改变其 <code>CSS</code> 样式的显示或隐藏。适用于频繁切换的场景。v-show有更高的初始渲染消耗；</p><h2 id="什么是Vue的混入（Mixin）？它的优缺点是什么？"><a href="#什么是Vue的混入（Mixin）？它的优缺点是什么？" class="headerlink" title="什么是Vue的混入（Mixin）？它的优缺点是什么？"></a>什么是Vue的混入（Mixin）？它的优缺点是什么？</h2><p>Mixin 是 Vue 提供的一种机制，它允许将多个组件的逻辑提取并共享到不同的组件中。通过定义一个包含 data、methods、computed，生命周期钩子 等的混入对象，在多个组件中复用该逻辑。<br>优点：代码复用性高，能够避免逻辑的重复。<br>缺点：可能导致命名冲突（尤其是当多个 mixin 中有相同的方法、数据时），会增加调试和维护的复杂度。大规模使用时，可能让代码变得难以追踪。</p><h2 id="Vue3的语法糖解决了什么问题？"><a href="#Vue3的语法糖解决了什么问题？" class="headerlink" title="Vue3的&lt;script setup&gt;语法糖解决了什么问题？"></a>Vue3的<code>&lt;script setup&gt;</code>语法糖解决了什么问题？</h2><p><code>&lt;script setup&gt;</code>是 Vue3 提供的一种新语法糖，用于简化组件的编写。它通过<code>&lt;script setup&gt;</code>标签，减少了重复的 import 和 return，并且优化了组件的编译过程，提升了性能。它主要解决了 Composition API 使用时的样板代码问题，使代码更加简洁和易读。</p><ul><li>更少的样板代码：不需要 export default 或 setup() 函数。</li><li>直接使用组合式 API：可以直接使用 ref, computed 等 Vue 3 的组合式 API。</li><li>模板访问：在 <code>&lt;script setup&gt;</code> 中声明的所有变量和函数都可以直接在模板中访问。</li><li>类型支持：支持 TypeScript，可以直接声明 <code>props</code> 和自定义事件的类型</li><li>性能优化：由于模板会被编译成同一作用域内的渲染函数，避免了渲染上下文代理对象，从而提高了运行时性能</li></ul><h2 id="路由的hash模式和history模式"><a href="#路由的hash模式和history模式" class="headerlink" title="路由的hash模式和history模式"></a>路由的hash模式和history模式</h2><table><thead><tr><th>对比维度</th><th>Hash 模式</th><th>History 模式</th></tr></thead><tbody><tr><td>URL 美观性</td><td>含 #，不美观</td><td>无 #，更接近传统 URL</td></tr><tr><td>服务器要求</td><td>无需配置</td><td>需配置重定向规则</td></tr><tr><td>兼容性</td><td>兼容性好</td><td>需 IE10+ 或现代浏览器</td></tr><tr><td>SEO 支持</td><td>不友好</td><td>友好（需配合服务端渲染 SSR）</td></tr><tr><td>实现复杂度</td><td>简单</td><td>较复杂（需处理服务器和 History API）</td></tr></tbody></table><p>对于一个url来说,hash值是指#及其后面的内容<br>hash值不会包含在HTTP请求中，即hash值不会带给服务器<br>history应用部署上线时需要后端人员支持，解决页面刷新服务端404问题（因为一刷新就会把路径通过请求发送给服务器，而此时的路径可能只是前端的路由切换，所以无法请求到正确的数据。一开始能点也是因为刚开始的时候只发了一次请求，剩下的都是路由切换。</p><p><code>hash</code>模式：是<code>vue-router</code>的默认模式，使用哈希，url中会出现#, # 以及 # 后面的字符称之为哈希。特点：hash虽然在url中，但不被包括在http请求中</p><p>history模式：因为vue打包的项目通常是一个单页应用，也就是任何的url其实指向的都是一个html文件，所以我们需要在<code>apache</code>或者<code>nginx</code>中配置，当url匹配不到资源时，指向同一个html页面的配置</p><h2 id="watch-和-computed"><a href="#watch-和-computed" class="headerlink" title="watch 和 computed"></a>watch 和 computed</h2><table><thead><tr><th>特性</th><th>computed</th><th>watch</th></tr></thead><tbody><tr><td>缓存</td><td>有缓存，依赖不变时直接返回缓存值</td><td>无缓存，每次变化都会触发回调</td></tr><tr><td>异步支持</td><td>不支持</td><td>支持</td></tr><tr><td>适用场景</td><td>动态计算、格式化数据</td><td>异步操作、复杂逻辑</td></tr><tr><td>代码风格</td><td>声明式</td><td>命令式</td></tr><tr><td>性能</td><td>高效（依赖缓存）</td><td>较低（每次变化都触发）</td></tr></tbody></table><p><code>computed</code>适用场景：</p><ul><li>需要根据其他数据动态计算的场景</li><li>需要缓存计算结果以提高性能的场景</li><li>计算属性 (<code>computed</code>) 是基于其依赖的数据进行计算，并且只有<strong>在其依赖的数据发生变化时才会重新计算</strong>。</li><li>计算属性的结果<strong>会被缓存</strong>，除非依赖的数据发生变化，否则不会重新求值。<br><code>watch</code>:</li><li>深度监听，立即执行</li><li><code>watch</code> 用于监听某个数据的变化，并在变化时执行特定的逻辑。</li><li>适用于需要执行异步操作或复杂逻辑的场景。</li><li><strong>无缓存</strong>：侦听器不会缓存结果，每次数据变化都会触发回调函数。</li></ul><h2 id="KeepAlive"><a href="#KeepAlive" class="headerlink" title="KeepAlive"></a>KeepAlive</h2><p>包裹动态组件时，会缓存不活动的组件实例，主要用于保留组件状态或避免重新渲染<br>作用：</p><ol><li>缓存组件状态：当组件被包裹在 <code>&lt;keep-alive&gt;</code> 中时，即使它们从当前视图中移除，它们的状态也会被保留而不是销毁。</li><li>避免重复渲染：对于那些初始化成本较高的组件，使用 <code>&lt;keep-alive&gt;</code> 可以避免每次显示时都重新渲染，提升用户体验。</li><li>减少资源消耗：通过缓存组件实例，可以减少不必要的 <code>DOM</code> 操作和资源加载，节省内存和计算资源。</li></ol><h2 id="vue组件间的信息传递"><a href="#vue组件间的信息传递" class="headerlink" title="vue组件间的信息传递"></a>vue组件间的信息传递</h2><ul><li>父组件给子组件传值：子组件通过<code>props</code>属性接受数据</li><li>子组件给父组件传值：子组件通过<code>$emit</code>方法传递参数</li><li>兄弟间：<code>eventBus</code>和<code>vuex</code></li></ul><h2 id="vueRouter传参的两种方式的区别-params和query"><a href="#vueRouter传参的两种方式的区别-params和query" class="headerlink" title="vueRouter传参的两种方式的区别(params和query)"></a>vueRouter传参的两种方式的区别(params和query)</h2><p><code>params</code>是通过路由路径传递的参数，通常用于需要在<code>URL</code>中明确表示的动态数据<code>param</code>的特点包括：</p><ol><li>路径参数<code>param</code>是URL的一部分，通常以:开头，例如<code>/user/:id</code>。</li><li>强类型<code>param</code>的值在路由匹配时就被解析，适合用于需要强类型的场景。</li><li>不支持重复参数：同一路由中<code>param</code>不能重复。<br>在用户组件中，我们可以通过<code>this.$route.params</code>获取到传递的参数;</li></ol><p><strong><code>query</code></strong><br><code>query</code>是通过<code>URL</code>的查询字符串传递的参数，通常用于可选参数或多个参数的场景。<code>query</code>的特点包括：</p><ol><li>查询字符串：<code>query</code>是<code>URL</code>的一部分，格式为<code>?key=value</code>，可以包含多个参数，例如&#x2F;<code>user?id=1&amp;name=John</code>。</li><li>灵活性：<code>query</code>参数可以是可选的，适合用于过滤、排序等场景。</li><li>支持重复参数：同一路由中，<code>query</code>可以重复。<br>在用户组件中，我们可以通过<code>this.$route.query</code>获取到传递的参数</li></ol><h2 id="provide与和-inject"><a href="#provide与和-inject" class="headerlink" title="provide与和 inject"></a>provide与和 inject</h2><p>是一种用于跨层级组件通信的机制。它们允许祖先组件向其所有子孙组件（无论嵌套多深）提供数据或方法，而不需要通过中间组件层层传递 <code>props</code>。这对于大型应用中的状态管理非常有用。<br>祖先组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>祖先组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">ChildComponent</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; provide, ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="title class_">ChildComponent</span> <span class="keyword">from</span> <span class="string">&#x27;./ChildComponent.vue&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title class_">ChildComponent</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> message = <span class="title function_">ref</span>(<span class="string">&#x27;Hello from ancestor component!&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> <span class="title function_">updateMessage</span> = (<span class="params">newMessage</span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      message.<span class="property">value</span> = newMessage;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 使用 provide 提供数据和方法</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">provide</span>(<span class="string">&#x27;message&#x27;</span>, message);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">provide</span>(<span class="string">&#x27;updateMessage&#x27;</span>, updateMessage);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      message,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      updateMessage,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>子孙组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>子孙组件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeMessage&quot;</span>&gt;</span>Change Message<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">GrandChildComponent</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; inject &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="title class_">GrandChildComponent</span> <span class="keyword">from</span> <span class="string">&#x27;./GrandChildComponent.vue&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title class_">GrandChildComponent</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 使用 inject 接收祖先组件提供的数据和方法</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> message = <span class="title function_">inject</span>(<span class="string">&#x27;message&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> updateMessage = <span class="title function_">inject</span>(<span class="string">&#x27;updateMessage&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> <span class="title function_">changeMessage</span> = (<span class="params"></span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">updateMessage</span>(<span class="string">&#x27;Updated message from child component!&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      message,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      changeMessage,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>孙子组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>孙子组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; inject &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 孙子组件也可以注入祖先组件提供的数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> message = <span class="title function_">inject</span>(<span class="string">&#x27;message&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      message,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>如果在大量组件中使用<code>provide</code>和<code>inject</code>，可能会带来一定的性能开销。在这种情况下，考虑使用 <code>Vuex</code> 或 <code>Pinia</code> 进行集中式状态管理。</p><h2 id="toRef和toRefs"><a href="#toRef和toRefs" class="headerlink" title="toRef和toRefs"></a>toRef和toRefs</h2><p>**<code>toRef</code>**函数用于将一个响应式对象(<code>reactive</code>)的属性转换为一个独立的<code>ref</code>。这个 <code>ref</code> 仍然与原对象保持关联，即修改这个 <code>ref</code> 的值会更新原对象中的相应属性，反之亦然。<br>**<code>toRefs </code>**函数用于将一个响应式对象的所有属性都转换为 <code>refs</code>，并返回一个包含这些 <code>refs </code>的普通对象。这样可以方便地解构响应式对象，同时保持每个属性的响应性。</p><h2 id="单向数据流"><a href="#单向数据流" class="headerlink" title="单向数据流"></a>单向数据流</h2><p>单向数据流确保了<strong>数据在组件之间的传递是单向的</strong>，即从父组件流向子组件。<br><strong>单向数据流的工作原理</strong><br><code>Vue</code>中的单向数据流主要通过<code>props</code>实现。父组件通过<code>props</code>向子组件传递数据，子组件可以接收这些数据并使用，<strong>但不应直接修改它们</strong>。如果子组件需要修改通过<code>props</code>接收的数据，它应该通过事件向父组件发出信号，由父组件处理这些数据的变更。</p><p>例如，父组件可以这样传递数据给子组件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">ChildComponent</span> <span class="attr">:parentData</span>=<span class="string">&quot;dataFromParent&quot;</span> /&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">dataFromParent</span>: <span class="string">&#x27;some data&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">子组件接收父组件传递的数据：</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line"><span class="attr">props</span>: [<span class="string">&#x27;parentData&#x27;</span>],</span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line"><span class="title function_">updateData</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="comment">// 不直接修改parentData，而是通过事件通知父组件</span></span><br><span class="line"><span class="variable language_">this</span>.$emit(<span class="string">&#x27;updateData&#x27;</span>, newData);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>单向数据流的优势</strong></p><ol><li><strong>简化数据流动</strong>：单向数据流简化了数据在组件间的流动，使得数据的来源和变更更加清晰。</li><li><strong>提高代码可维护性</strong>：由于数据的流动方向是单向的，当数据发生变化时，只需要关注数据的来源和受影响的组件，这使得代码更易于维护。</li><li><strong>增强代码可预测性</strong>：单向数据流增强了对数据流动的预测性，有助于更准确地追踪和排查问题。</li></ol><h2 id="EventBus和Vuex"><a href="#EventBus和Vuex" class="headerlink" title="EventBus和Vuex"></a>EventBus和Vuex</h2><p>Vuex<br>大型项目：当你有一个大型项目并且需要管理大量状态时，Vuex 可以帮助你更好地组织和管理这些状态。<br>多层嵌套组件：当你的组件层级较深，需要在不同层级的组件之间共享状态时，Vuex 提供了一种清晰的解决方案。<br>复杂的状态逻辑：当状态变化涉及复杂的业务逻辑（如异步操作）时，Vuex 的 Action 和 Mutation 机制可以帮助你更好地组织代码。<br>状态调试：Vuex 提供了丰富的调试工具（如 Vue DevTools），方便你在开发过程中进行状态跟踪和调试。<br>EventBus<br>小型项目：如果你有一个小型项目并且只需要在少数几个组件之间传递数据，EventBus 是一个轻量级的选择。<br>局部状态管理：当只需要在少数几个组件之间共享状态，且这些状态不需要全局管理时，EventBus 是一个简便的选择。<br>简单通信：当需要在父子组件或兄弟组件之间进行简单的通信时，EventBus 可以快速实现这一需求。<br>结论<br>Vuex：适用于需要集中管理和维护复杂状态的应用，尤其是那些具有多层次嵌套组件和复杂状态逻辑的项目。<br>EventBus：适用于小型项目或局部状态管理，特别是在需要在少数几个组件之间进行简单通信时。</p><h2 id="ref"><a href="#ref" class="headerlink" title="$ref"></a>$ref</h2><p><code>$refs</code>是一个对象，它包含了所有通过 <code>ref</code> 属性注册的 <code>DOM</code>元素和子组件实例。<br>你可以通过 <code>ref</code> 属性标记一个 <code>DOM</code> 元素或者子组件实例，然后在组件中通过 <code>$refs</code>访问它。</p><h2 id="v-model-实现原理"><a href="#v-model-实现原理" class="headerlink" title="v-model 实现原理"></a>v-model 实现原理</h2><p><code>v-model</code>实际上是以下两个操作的组合：</p><ul><li><code>v-bind</code>（绑定属性）：将数据绑定到表单元素的值属性。</li><li><code>v-on</code>（监听事件）：监听表单元素的变化事件，并根据事件更新数据。<br><code>&lt;input :value=&quot;message&quot; @input=&quot;message = $event.target.value&quot;/&gt;</code><br>在组件中<br><code>&lt;custom-component :model-value=&quot;message&quot; @update:modelValue=&quot;message = $event&quot;&gt;&lt;/custom-component&gt;</code></li></ul><p><code>model-value</code> 属性：这是默认的 <code>prop</code> 名称，用于<strong>接收父组件传递的数据</strong>。<br><code>update:modelValue</code> 事件：这是默认的事件名称，用于<strong>通知父组件更新数据</strong>。</p><h2 id="虚拟dom与diff算法"><a href="#虚拟dom与diff算法" class="headerlink" title="虚拟dom与diff算法"></a>虚拟dom与diff算法</h2><ul><li><p><strong>为什么使用虚拟DOM？</strong><br>使用<code>JS</code>时，不可避免的会大量操作<code>DOM</code>，而<code>DOM</code>的变化又会<strong>引发回流或重绘</strong>，从而降低页面渲染性能。所以虚拟<code>DOM</code>出现的主要目的就是<strong>为了减少频繁操作<code>DOM</code>而引起回流重绘所引发的性能问题</strong></p></li><li><p><strong>虚拟DOM是什么？作用？</strong><br>虚拟<code>DOM</code>是描述元素和元素之间的关系所创建的一个JS对象<br>页面中的数据和状态变化时，<code>render</code>函数会生成一个新的虚拟<code>DOM</code>,<code>DOM</code>进行比对，找到需要修改的虚拟<code>DOM</code>内容，然后去对应的真实<code>DOM</code>中修改；不需要频繁操作，提高了页面性能；</p></li><li><p><strong>虚拟<code>DOM</code>和真实<code>DOM</code>的区别？</strong></p><table><thead><tr><th>特性</th><th>真实 <code>DOM</code> (<code>Real DOM</code>)</th><th>虚拟 <code>DOM</code> (<code>Virtual DOM</code>)</th></tr></thead><tbody><tr><td>本质</td><td>浏览器中的实际 <code>DOM</code> 树</td><td>内存中的轻量级 <code>JavaScript</code> 对象</td></tr><tr><td>更新效率</td><td>直接更新真实 <code>DOM</code>，可能导致频繁重绘和回流</td><td>通过 <code>Diffing</code> 算法找出差异，批量更新真实 <code>DOM</code></td></tr><tr><td>性能影响</td><td>频繁操作真实 <code>DOM</code> 会导致性能问题</td><td>减少不必要的 <code>DOM</code> 操作，提升性能</td></tr></tbody></table></li></ul><p><strong><code>Diff</code> 算法的工作原理</strong><br><code>Diff</code> 算法的核心思想是比较两个树结构（新旧虚拟 <code>DOM</code> 树），找出它们之间的差异，并生成一个补丁（<code>Patch</code>）。这个补丁包含了需要对真实 <code>DOM</code> 进行的所有修改操作（如添加、删除、更新节点等）。</p><h2 id="vue-router如何监听路由改变事件"><a href="#vue-router如何监听路由改变事件" class="headerlink" title="vue router如何监听路由改变事件"></a><code>vue router</code>如何监听路由改变事件</h2><ol><li>使用 <code>beforeEach</code> 全局前置守卫<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="attr">history</span>: <span class="title function_">createWebHistory</span>(),</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    <span class="comment">// 定义你的路由</span></span><br><span class="line">  ]</span><br><span class="line">&#125;);</span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Route is changing&#x27;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;From:&#x27;</span>, <span class="keyword">from</span>.<span class="property">path</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;To:&#x27;</span>, to.<span class="property">path</span>);</span><br><span class="line">  <span class="comment">// 执行必要的操作后调用 next() 继续导航</span></span><br><span class="line">  <span class="title function_">next</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li>使用 <code>afterEach</code> 全局后置钩子,每次路由跳转完执行<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">afterEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Route has changed&#x27;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;From:&#x27;</span>, <span class="keyword">from</span>.<span class="property">path</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;To:&#x27;</span>, to.<span class="property">path</span>);</span><br><span class="line">  <span class="comment">// 可以在这里执行一些页面加载完成后的操作</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li>在组件内使用 <code>watch</code> 监听 <code>$route</code> 对象<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Current Route: &#123;&#123; $route.path &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">watch</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="string">&#x27;$route&#x27;</span>(to, <span class="keyword">from</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Route changed inside component&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;From:&#x27;</span>, <span class="keyword">from</span>.<span class="property">path</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;To:&#x27;</span>, to.<span class="property">path</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 可以在这里执行一些与当前组件相关的操作</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li><li>使用 <code>beforeRouteEnter</code>、<code>beforeRouteUpdate</code> 和 <code>beforeRouteLeave</code> 守卫(组件内的路由守卫)<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">beforeRouteEnter</span>(<span class="params">to, <span class="keyword">from</span>, next</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;在进入组件之前触发，此时组件实例还未创建，因此不能访问 this&#x27;</span>);</span><br><span class="line">    <span class="title function_">next</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">beforeRouteUpdate</span>(<span class="params">to, <span class="keyword">from</span>, next</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;当路由参数发生变化但仍然在同一个组件内时触发&#x27;</span>);</span><br><span class="line">    <span class="title function_">next</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">beforeRouteLeave</span>(<span class="params">to, <span class="keyword">from</span>, next</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> answer = <span class="variable language_">window</span>.<span class="title function_">confirm</span>(<span class="string">&#x27;在离开组件之前触发，可以用来提示用户保存未保存的数据等&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (answer) &#123;</span><br><span class="line">      <span class="title function_">next</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title function_">next</span>(<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><h2 id="vue-router是如何调用生命周期的钩子函数的，"><a href="#vue-router是如何调用生命周期的钩子函数的，" class="headerlink" title="vue router是如何调用生命周期的钩子函数的，"></a><code>vue router</code>是如何调用生命周期的钩子函数的，</h2><h2 id="监听路由改变事件的对象是？"><a href="#监听路由改变事件的对象是？" class="headerlink" title="监听路由改变事件的对象是？"></a>监听路由改变事件的对象是？</h2><p><code>Route</code>对象：每个路由匹配都会生成一个<code>Route</code>对象，包含当前路由的信息（如路径、参数等）。</p><h2 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h2><ul><li><code>.stop</code>：阻止事件冒泡</li><li><code>.native</code>：绑定原生事件</li><li><code>.once</code>：事件只执行一次</li><li><code>.self</code> ：将事件绑定在自身身上，相当于阻止事件冒泡</li><li><code>.prevent</code>：阻止默认事件</li><li><code>.caption</code>：用于事件捕获</li><li><code>.keyCode</code>：监听特定键盘按下</li><li><code>.right</code>：右键</li></ul><h2 id="SPA单页面应用与MPA多页面应用"><a href="#SPA单页面应用与MPA多页面应用" class="headerlink" title="SPA单页面应用与MPA多页面应用"></a>SPA单页面应用与MPA多页面应用</h2><h3 id="SPA单页面应用"><a href="#SPA单页面应用" class="headerlink" title="SPA单页面应用"></a>SPA单页面应用</h3><p>指只有一个主页面的应用；一开始只需要加载一次css,js等相关资源。所有的内容都包含在主页面，对每一个功能模块组件化。单页面应用跳转，就是切换相关组件，仅仅只是刷新局部资源。</p><h3 id="MPA多页面应用"><a href="#MPA多页面应用" class="headerlink" title="MPA多页面应用"></a>MPA多页面应用</h3><p>指有多个独立页面的应用，每个页面都必须重复加载js,css等相关资源。多页面应用跳转，需要整页资源刷新。</p><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><ol><li>刷新方式：</li></ol><ul><li>SPA:相关组件的切换，页面局部刷新或者更改</li><li>MPA:整页刷新</li></ul><ol start="2"><li>路由模式</li></ol><ul><li>SPA:可以使用hash,也可以使用history</li><li>MPA:普通的链接跳转</li></ul><ol start="3"><li>用户体验：<ul><li>SPA：用户体验良好，切换页面只是局部刷新组件，因为是一次性加载所有资源，所以首次进入的时候可能会有一段时间的白屏。</li><li>MPA：页面切换加载缓慢，流畅度不够，用户体验较差</li></ul></li><li>转场动画：<ul><li>SPA:容易实现转场动画</li><li>MPA:无法实现</li></ul></li><li>数据传递：<ul><li>SPA:容易传递数据，方法有很多(<code>Vuex</code>等)</li><li>MPA:传递数据不方便，一般用<code>url</code>,<code>cookie</code>,本地存储</li></ul></li><li>结构:<ul><li>SPA:一个主页面+许多模块组件</li><li>MPA:许多完整的页面</li></ul></li><li>资源文件：<ul><li>SPA:组件共用的资源文件只需要加载一次</li><li>MPA:每个页面都需要加载自己的资源</li></ul></li></ol><h2 id="new-Vue与createApp"><a href="#new-Vue与createApp" class="headerlink" title="new Vue与createApp"></a>new Vue与createApp</h2><p><code>new Vue</code></p><ol><li>参数<br><code>new Vue</code> 接收一个选项对象（<code>Options API</code>），包含以下常用属性：</li></ol><ul><li><code>el</code>：指定挂载的 DOM 元素（如 <code>#app</code>）。</li><li><code>data</code>：定义响应式数据。</li><li><code>methods</code>：定义方法。</li><li><code>computed</code>：定义计算属性。</li><li><code>watch</code>：定义侦听器。</li><li><code>components</code>：注册局部组件。</li><li><code>template</code>：定义模板。<br>全局 API：在 Vue 2 中，许多全局 API（如 <code>Vue.component</code>、<code>Vue.directive</code>）会污染全局命名空间。<br>单例模式：整个应用只有一个 Vue 实例，所有功能都集中在这个实例中。<br>限制：不适合复杂的应用场景，容易导致代码耦合。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>, <span class="comment">// 指定挂载的 DOM 元素</span></span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;Hello Vue 2!&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">greet</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">message</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><strong><code>createApp</code>（Vue 3 的方式）</strong><br>(1) 使用场景<br>createApp 是 Vue 3 中引入的新方法，用于创建一个独立的应用实例。<br>它是 Vue 3 的推荐方式，旨在解决 Vue 2 中全局 API 污染的问题。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">message</span>: <span class="string">&#x27;Hello Vue 3!&#x27;</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">greet</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">message</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>); <span class="comment">// 指定挂载的 DOM 元素</span></span><br></pre></td></tr></table></figure><p><code>createApp</code> 接收一个选项对象（<code>Options API</code>），与 <code>new Vue</code> 类似，包含以下常用属性：</p><ul><li><code>data</code>：定义响应式数据。</li><li><code>methods</code>：定义方法。</li><li><code>computed</code>：定义计算属性。</li><li><code>watch</code>：定义侦听器。</li><li><code>components</code>：注册局部组件。</li><li><code>template</code>：定义模板。</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Q&amp;A(JS)</title>
      <link href="/2025/02/09/Q-A-JS/"/>
      <url>/2025/02/09/Q-A-JS/</url>
      
        <content type="html"><![CDATA[<h1 id="js"><a href="#js" class="headerlink" title="js"></a>js</h1><h2 id="原始类型vs引用数据类型"><a href="#原始类型vs引用数据类型" class="headerlink" title="原始类型vs引用数据类型"></a>原始类型vs引用数据类型</h2><p>原始数据类型包括：<code>string</code>、<code>number</code>、<code>boolean</code>、<code>undefined</code>、<code>null</code>、<code>symbol</code>、<code>bigint</code>。<br>存储方式：值直接存储在栈内存中。<br>引用类型：包括：<code>Object</code>、<code>Array</code>、<code>Function</code>、<code>Date</code> 等。<br>存储方式：值存储在堆内存中，栈中存储的是堆内存的地址引用。<br><code>typeof null;</code> 返回 <code>&#39;object&#39;</code>（历史遗留问题）</p><h2 id="null和undefined的区别"><a href="#null和undefined的区别" class="headerlink" title="null和undefined的区别"></a>null和undefined的区别</h2><ul><li><code>null</code>:<ul><li>表示变量有意被设置为空值或不存在的对象引用。</li><li>常用于手动清除对象引用，帮助垃圾回收机制回收内存。</li></ul></li><li><code>undefined</code>:<ul><li>表示变量已经声明但尚未初始化。</li><li>表示函数没有返回值（或显式地返回 <code>undefined</code>）。</li><li>表示对象中不存在某个属性。<br><code>Number(undefined)</code> 结果为 <code>NaN（Not-a-Number）</code>。<br><code>Number(null) </code>结果为 <code>0</code>。</li></ul></li></ul><h2 id="js中在某个元素后面插入多个元素"><a href="#js中在某个元素后面插入多个元素" class="headerlink" title="js中在某个元素后面插入多个元素"></a>js中在某个元素后面插入多个元素</h2><ol><li>使用 <code>insertAdjacentElement</code> 方法<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">newElements.<span class="title function_">forEach</span>(<span class="function"><span class="params">element</span> =&gt;</span> &#123;</span><br><span class="line">  targetElement.<span class="title function_">insertAdjacentElement</span>(<span class="string">&#x27;afterend&#x27;</span>, element);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><code>after</code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> newElements = [</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>),</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>),</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置新元素的内容</span></span><br><span class="line">newElements[<span class="number">0</span>].<span class="property">textContent</span> = <span class="string">&#x27;New Element 1&#x27;</span>;</span><br><span class="line">newElements[<span class="number">1</span>].<span class="property">textContent</span> = <span class="string">&#x27;New Element 2&#x27;</span>;</span><br><span class="line">newElements[<span class="number">2</span>].<span class="property">textContent</span> = <span class="string">&#x27;New Element 3&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在目标元素之后插入所有新元素</span></span><br><span class="line">targetElement.<span class="title function_">after</span>(...newElements);</span><br></pre></td></tr></table></figure></li><li></li></ol><h2 id="类型监测的方法"><a href="#类型监测的方法" class="headerlink" title="类型监测的方法"></a>类型监测的方法</h2><ul><li>typeof<br>不能准确判断出null，除了function 以外的复杂数据类型<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="number">42</span>); <span class="comment">// &quot;number&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="string">&quot;hello&quot;</span>); <span class="comment">// &quot;string&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> &#123;&#125;); <span class="comment">// &quot;object&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="literal">null</span>); <span class="comment">// &quot;object&quot;（历史遗留问题）</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;); <span class="comment">// &quot;function&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> [])<span class="comment">//object</span></span><br></pre></td></tr></table></figure></li><li>instanceof<br>不能准确判断基本数据类型<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([] <span class="keyword">instanceof</span> <span class="title class_">Array</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(&#123;&#125; <span class="keyword">instanceof</span> <span class="title class_">Object</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Date</span>() <span class="keyword">instanceof</span> <span class="title class_">Date</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li><li>Object.prototype.toString.call()<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">toString</span>(&#123;&#125;))<span class="comment">//[object Object]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="number">42</span>)); <span class="comment">// &quot;[object Number]&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="string">&quot;hello&quot;</span>)); <span class="comment">// &quot;[object String]&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>([])); <span class="comment">// &quot;[object Array]&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="literal">null</span>)); <span class="comment">// &quot;[object Null]&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="literal">undefined</span>))<span class="comment">//[object Undefined]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123; &#125;))<span class="comment">//[object Function]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="keyword">new</span> <span class="title class_">Date</span>()))<span class="comment">//[object Date]</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h2><p><code>Number()</code>:</p><ol><li><code>null</code>:返回0</li><li><code>undefined</code>:返回<code>NaN</code></li><li>字符串：如果字符串只包含数字，则将其转换为十进制，如果是空字符串，将其转换为0，如果字符串包含有效浮点格式，将其转为浮点数值，如果不是以上格式的字符串，均返回NaN</li><li><code>Symbol</code>：抛出错误<br><code>Boolean()</code>:<br>除了<code>undefined</code>,<code>null</code>,<code>false</code>,<code>&#39;&#39;</code>,<code>+0</code>,<code>-0</code>,<code>NaN</code>转换出来的是<code>false</code>,其他都是<code>true</code><br>,parseInt(),parseFloat(),toString(),String(),</li></ol><h2 id="隐式类型转换"><a href="#隐式类型转换" class="headerlink" title="隐式类型转换"></a>隐式类型转换</h2><p>隐式类型转换发生在：<br>逻辑运算符：<code>&amp;&amp;</code>,<code>||</code>,<code>!</code><br>运算符：<code>+</code>,<code>-</code>,<code>*</code>,<code>/</code><br>关系操作符：<code>&gt;</code>,<code>&gt;=</code>等<br>相等运算符:<code>==</code><br><code>if/while</code>条件</p><h2 id="和-的区别，-进行类型转换的原理？"><a href="#和-的区别，-进行类型转换的原理？" class="headerlink" title="&#x3D;&#x3D; 和 &#x3D;&#x3D;&#x3D; 的区别，&#x3D;&#x3D; 进行类型转换的原理？"></a>&#x3D;&#x3D; 和 &#x3D;&#x3D;&#x3D; 的区别，&#x3D;&#x3D; 进行类型转换的原理？</h2><ul><li><code>==</code> 抽象等比较：检查两个值是否相等，但在比较前会尝试进行类型转换。</li><li>如果类型相同，无需进行转换</li><li>如果其中一个操作符是<code>null</code>或<code>undefined</code>，那么另一个操作符必须为<code>null</code>或<code>undefined</code>，才会返回<code>true</code>,否则都返回<code>false</code></li><li>如果其中一个是<code>Symbol</code>类型，返回<code>false</code></li><li>两个操作值如果都为<code>String</code>或<code>number</code>类型，那么就会将字符串转换为<code>number</code></li><li>如果一个操作值是<code>boolean</code>,那么转换成<code>number</code></li><li>如果一个操作值是<code>object</code>,且另一方为<code>string</code>,<code>number</code>或者<code>symbol</code>,就会把<code>object</code>转为原始类型再进行判断</li><li>两个都为简单类型，字符串和布尔值都会转换成数值，再比较</li><li>简单类型与引用类型比较，对象转化成其原始类型的值，再比较</li><li>两个都为引用类型，则比较它们是否指向同一个对象</li><li><code>null</code> 和 <code>undefined</code> 相等(<code>console.log(null == undefined)//true</code>)</li><li>存在 <code>NaN</code> 则返回 <code>false</code> (<code>let result1 = (NaN == NaN ); // false</code>)</li><li><code>===</code>（严格相等比较）<br>功能：不仅检查两个值是否相等，还会检查它们的数据类型是否相同。如果类型不同，直接返回false，不会进行任何类型的转换。<code> result2 = (null  === undefined); // false</code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;123&#x27;</span> == <span class="number">123</span>)<span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;&quot;</span> == <span class="literal">null</span>)<span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;&#x27;</span> == <span class="number">0</span>)<span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([] == <span class="number">0</span>)<span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([] == ![])<span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">null</span> == <span class="literal">undefined</span>)<span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>(<span class="literal">null</span>))<span class="comment">//0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>(<span class="string">&#x27;&#x27;</span>))<span class="comment">//0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseInt</span>(<span class="string">&#x27;&#x27;</span>))<span class="comment">//NaN</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(&#123;&#125; + <span class="number">10</span>)<span class="comment">//[object Object]10</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a1 = &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">valueOf</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">value</span>++;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">value</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a1 == <span class="number">1</span> &amp;&amp; a1 == <span class="number">2</span> &amp;&amp; a1 == <span class="number">3</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a1 == <span class="number">2</span>); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a1 == <span class="number">5</span>)<span class="comment">//true</span></span><br></pre></td></tr></table></figure><strong>valueOf</strong>方法的作用<br>在 JavaScript 中，当一个对象参与比较（如 &#x3D;&#x3D; 或加法运算）时，JavaScript 会尝试将该对象转换为原始值（通常是数字或字符串）。这个过程会调用对象的 valueOf 方法（如果存在），或者 toString 方法。<br>在代码中，a1 是一个对象，并且你重写了它的 valueOf 方法。<br>每次调用 <code>a1.valueOf()</code> 时：this.value 自增 1。返回当前的 this.value。<br>加号的隐式类型转换：<br>有数字有字符串：转化为字符串<br><code>console.log(&#39;1&#39; + 3)//‘13’</code><br>有数字有其他：转化为数字<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span> + <span class="literal">undefined</span>)<span class="comment">//NaN</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span> + <span class="literal">null</span>)<span class="comment">//1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span> + <span class="literal">true</span>)<span class="comment">//2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span> + <span class="number">1n</span>)<span class="comment">//错误，不能把BigInt和Number类型直接混合相加</span></span><br></pre></td></tr></table></figure>有字符串有其他：转化为字符串<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;1&#x27;</span> + <span class="literal">undefined</span>)<span class="comment">//&#x27;1undefined&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;1&#x27;</span> + <span class="literal">null</span>)<span class="comment">//&#x27;1null&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;1&#x27;</span> + <span class="number">1n</span>)<span class="comment">//&#x27;11&#x27;,BigInt转化为字符串</span></span><br></pre></td></tr></table></figure><strong>NaN 被定义为“不等于任何值，包括它自己”</strong><br><code>console.log(NaN!=NaN)//true</code></li></ul><h2 id="let、const、var的区别是什么？为什么要用let取代var？"><a href="#let、const、var的区别是什么？为什么要用let取代var？" class="headerlink" title="let、const、var的区别是什么？为什么要用let取代var？"></a>let、const、var的区别是什么？为什么要用let取代var？</h2><p>变量提升：<code>var</code> 声明的变量会提升到作用域顶部，初始值为<code>undefined</code>。</p><ul><li><code>let</code> <strong>块级作用域</strong>，可重新赋值，但不可重复声明</li><li><code>const </code><strong>块级作用域</strong>，声明时必须初始化，不可重新赋值，但对象&#x2F;数组的内容可修改（引用不变）。</li><li><code>var</code> <strong>函数作用域</strong>，存在变量提升（声明被提升到作用域顶部，但赋值不提升）,允许重复说明</li></ul><ol><li>更严格的作用域控制：避免变量泄漏，提升代码可预测性。</li><li>减少隐藏错误：通过暂时性死区和禁止重复声明，提前暴露问题。</li></ol><h2 id="什么是闭包？举一个实际应用场景的例子。"><a href="#什么是闭包？举一个实际应用场景的例子。" class="headerlink" title="什么是闭包？举一个实际应用场景的例子。"></a>什么是闭包？举一个实际应用场景的例子。</h2><p>函数嵌套时，内层函数引用了外层函数的变量，外层函数执行完毕后，这些变量依然被内层函数持有，形成闭包。</p><ul><li>防抖（<code>Debounce</code>）：限制函数在短时间内频繁触发（如搜索框输入）。</li><li>节流（<code>Throttle</code>）：固定时间间隔执行函数（如滚动事件）。</li><li>函数柯里化</li><li>数据封装：可以创建私有变量，避免全局污染<br>闭包也存在着一个潜在的问题，由于闭包会引用外部函数的变量，但是这些变量在外部函数执行完毕后没有被释放，那么这些变量会一直存在于内存中。 一旦形成闭包，只有在页面关闭后，闭包占用的内存才会被回收，就会造成的内存泄漏。</li></ul><p>因此我们在使用闭包时需要特别注意内存泄漏的问题，可以用以下两种方法解决内存泄露问题：</p><ol><li>及时释放闭包：手动调用闭包函数，并将其返回值赋值为<code>null</code>，这样可以让闭包中的变量及时被垃圾回收器回收。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createCounter</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">const</span> counter = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      count++;</span><br><span class="line">      <span class="keyword">return</span> count;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">      counter,</span><br><span class="line">      <span class="attr">reset</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">          counter = <span class="literal">null</span>; <span class="comment">// 解除对闭包的引用</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> counterObj = <span class="title function_">createCounter</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(counterObj.<span class="title function_">counter</span>()); <span class="comment">// 输出: 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(counterObj.<span class="title function_">counter</span>()); <span class="comment">// 输出: 2</span></span><br><span class="line">counterObj.<span class="title function_">reset</span>(); <span class="comment">// 解除对闭包的引用</span></span><br><span class="line">counterObj.<span class="property">counter</span> = <span class="literal">null</span>; <span class="comment">// 确保没有其他地方引用闭包</span></span><br><span class="line"><span class="comment">// 现在闭包应该可以被垃圾回收</span></span><br></pre></td></tr></table></figure></li><li>使用立即执行函数（<code>IIFE，Immediately Invoked Function Expression</code>）：在创建闭包时，将需要保留的变量传递给一个立即执行函数，并将这些变量作为参数传递给闭包函数，这样可以保留所需的变量，而不会导致其他变量的内存泄漏。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> privateCount = <span class="number">0</span>;</span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">getPrivateCount</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> privateCount++;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">resetPrivateCount</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    getPrivateCount = <span class="literal">null</span>; <span class="comment">// 解除对闭包的引用</span></span><br><span class="line">    privateCount = <span class="literal">null</span>; <span class="comment">// 解除对私有变量的引用</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="title function_">getPrivateCount</span>()); <span class="comment">// 输出: 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="title function_">getPrivateCount</span>()); <span class="comment">// 输出: 1</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">resetPrivateCount</span>(); <span class="comment">// 解除对闭包的引用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 现在闭包应该可以被垃圾回收</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="暂时性死区Temporal-Dead-Zone（TDZ）"><a href="#暂时性死区Temporal-Dead-Zone（TDZ）" class="headerlink" title="暂时性死区Temporal Dead Zone（TDZ）"></a>暂时性死区Temporal Dead Zone（TDZ）</h2><p>暂时性死区是指在代码块内，使用let或const命令声明变量之前，该变量处于不可用状态</p><h2 id="箭头函数和普通函数的区别是什么？"><a href="#箭头函数和普通函数的区别是什么？" class="headerlink" title="箭头函数和普通函数的区别是什么？"></a>箭头函数和普通函数的区别是什么？</h2><p>箭头函数没有自己的<code>this</code>，<code>super</code>，<code>arguments</code>。<br>箭头函数不能作为构造函数（使用<code>new</code>会报错）。<br>箭头函数没有<code>prototype</code>属性。</p><h2 id="解释原型链（Prototype-Chain）是什么？如何实现继承？"><a href="#解释原型链（Prototype-Chain）是什么？如何实现继承？" class="headerlink" title="解释原型链（Prototype Chain）是什么？如何实现继承？"></a>解释原型链（Prototype Chain）是什么？如何实现继承？</h2><p>原型链是 <code>JavaScript</code> 实现继承的机制。每个对象都有一个内部属性（可以通过<code>__proto__</code>访问），指向其原型对象。原型对象也有自己的原型，形成一条链，直到<code>null</code><br>继承：对象可以访问原型链上的属性和方法</p><h2 id="原型与原型链"><a href="#原型与原型链" class="headerlink" title="原型与原型链"></a>原型与原型链</h2><p>每个函数都有一个<code>prototype</code>属性，这个属性会指向一个对象，就是通过调用该构造函数而创建的实例的原型，可以通过实例对象的<code>__proto__</code>来访问到这个原型对象<br>实例在创建时就会默认关联原型，并且会从原型继承属性<br>而每一个原型对象又都会存在一个<code>constructor</code>属性，这个属性会指向关联的这个构造函数<br>原型链：<br>如果访问一个实例对象的属性时，如果说这个实例对象中没有这个属性，那么JS引擎就会去该实例对象的原型对象中去找；如果属性在原型对象中也找不到，那么就会去原型的原型中去找，一直找到最上层的原型，找到空为止<br><img src="/2025/02/09/Q-A-JS/image-19.png" alt="alt text"></p><h2 id="什么是深拷贝和浅拷贝？如何实现深拷贝？"><a href="#什么是深拷贝和浅拷贝？如何实现深拷贝？" class="headerlink" title="什么是深拷贝和浅拷贝？如何实现深拷贝？"></a>什么是深拷贝和浅拷贝？如何实现深拷贝？</h2><p>深拷贝：创建一个新对象，完全复制原对象的所有属性，新对象和原对象互不影响</p><ol><li><code>JSON.parse(JSON.stringify())</code></li><li><code>lodash</code>库的<code>_.cloneDeep()</code></li><li>手写</li></ol><h2 id="Promise-all和Promise-allSettled的区别是什么？"><a href="#Promise-all和Promise-allSettled的区别是什么？" class="headerlink" title="Promise.all和Promise.allSettled的区别是什么？"></a>Promise.all和Promise.allSettled的区别是什么？</h2><p><code>Promise.all</code>：所有 <code>Promise</code> <strong>都成功时</strong>，返回一个<strong>包含所有结果的数组</strong>。如果有一个 <code>Promise</code> 失败，立即返回失败的原因。<br><code>Promise.allSettled</code>：所有<code> Promise</code> 都完成后（无论成功或失败），返回一个包含所有结果的数组。</p><h2 id="解释async-await的底层实现原理（结合生成器Generator）。"><a href="#解释async-await的底层实现原理（结合生成器Generator）。" class="headerlink" title="解释async&#x2F;await的底层实现原理（结合生成器Generator）。"></a>解释async&#x2F;await的底层实现原理（结合生成器Generator）。</h2><h2 id="事件循环-EventLoop"><a href="#事件循环-EventLoop" class="headerlink" title="事件循环 EventLoop"></a>事件循环 <code>EventLoop</code></h2><p><code>JavaScript</code> 是<strong>单线程</strong>的编程语言，(一次只能执行一个任务)。然而，为了处理异步操作（如网络请求、定时器等），<code>JavaScript</code> 引入了事件循环机制来管理这些异步任务的执行顺序。</p><p>同步任务指：在<strong>主线程</strong>上排队执行的任务，只有前一个任务执行完毕，才能执行后一个任务</p><p>异步任务：不进入主线程，而进入“任务队列”的任务，只有“任务队列”通知主线程，某个异步任务可以执行了，该任务才会进入主线程执行。</p><p>而当主线程中的任务完成之后，主线程从任务队列中读取事件，这个过程是循环不断的。</p><h2 id="new-干了什么"><a href="#new-干了什么" class="headerlink" title="new 干了什么"></a>new 干了什么</h2><ol><li>创建一个新的对象<code>obj</code></li><li>将对象与构建函数通过原型链连接起来</li><li>将构建函数中的<code>this</code>绑定到新建的对象<code>obj</code>上</li><li>根据构建函数返回类型作判断，如果是原始值则被忽略，如果是返回对象，需要正常处理</li></ol><h2 id="typeof和instanceof的区别"><a href="#typeof和instanceof的区别" class="headerlink" title="typeof和instanceof的区别"></a>typeof和instanceof的区别</h2><ul><li><code>typeof</code>:会返回一个值的类型；对于基本数据类型，除了<code>null</code>都可以返回正确的类型。而对于<code>null</code>则会返回<code>object</code>。对于引用数据类型来说，<strong>除了函数之外</strong>，其他的都会返回<code>object</code></li><li><code>instanceof</code>:它是用来判断一个对象是否是另一个对象的实例，注意它只能用来判断对象</li></ul><h2 id="如何判断一个变量是数组？typeof-的结果是什么？为什么？"><a href="#如何判断一个变量是数组？typeof-的结果是什么？为什么？" class="headerlink" title="如何判断一个变量是数组？typeof []的结果是什么？为什么？"></a>如何判断一个变量是数组？typeof []的结果是什么？为什么？</h2><ol><li><code>Array.isArray()</code></li><li><code>Object.prototype.toString.call([])// &quot;[object Array]&quot;</code></li><li><code>arr instanceof Array //true</code><br>typeof []：返回 “object”，无法区分数组和对象。</li></ol><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>几种常见的继承方式</p><ol><li>原型链继承<br>两个实例使用的是同一个原型对象。它们的内存空间是共享的，当一个发生变化的时候，另外一个也随之进行了变化，这就是使用原型链继承方式的一个缺点。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Parent1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;parent1&#x27;</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">play</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">type</span> = <span class="string">&#x27;child2&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Child1</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Parent1</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Child1</span>());</span><br><span class="line"><span class="keyword">let</span> s1 = <span class="keyword">new</span> <span class="title class_">Child1</span>();</span><br><span class="line"><span class="keyword">let</span> s2 = <span class="keyword">new</span> <span class="title class_">Child2</span>();</span><br><span class="line">s1.<span class="property">play</span>.<span class="title function_">push</span>(<span class="number">4</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s1.<span class="property">play</span>, s2.<span class="property">play</span>);</span><br></pre></td></tr></table></figure></li><li>构造函数继承（借助 call）<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Parent1</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;parent1&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Parent1</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child1</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="title class_">Parent1</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>);</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">type</span> = <span class="string">&#x27;child1&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> child = <span class="keyword">new</span> <span class="title class_">Child1</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(child);  <span class="comment">// 没问题</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(child.<span class="title function_">getName</span>());  <span class="comment">// 会报错</span></span><br></pre></td></tr></table></figure></li><li>组合继承（前两种组合）<br>但是这里又增加了一个新问题：通过注释我们可以看到 Parent3 执行了两次，第一次是改变Child3 的 prototype 的时候，第二次是通过 call 方法调用 Parent3 的时候，那么 Parent3 多构造一次就多进行了一次性能开销，这是我们不愿看到的。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Parent3</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;parent3&#x27;</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">play</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Parent3</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child3</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 第二次调用 Parent3()</span></span><br><span class="line">  <span class="title class_">Parent3</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>);</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">type</span> = <span class="string">&#x27;child3&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一次调用 Parent3()</span></span><br><span class="line"><span class="title class_">Child3</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Parent3</span>();</span><br><span class="line"><span class="comment">// 手动挂上构造器，指向自己的构造函数</span></span><br><span class="line"><span class="title class_">Child3</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Child3</span>;</span><br><span class="line"><span class="keyword">var</span> s3 = <span class="keyword">new</span> <span class="title class_">Child3</span>();</span><br><span class="line"><span class="keyword">var</span> s4 = <span class="keyword">new</span> <span class="title class_">Child3</span>();</span><br><span class="line">s3.<span class="property">play</span>.<span class="title function_">push</span>(<span class="number">4</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s3.<span class="property">play</span>, s4.<span class="property">play</span>);  <span class="comment">// 不互相影响</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s3.<span class="title function_">getName</span>()); <span class="comment">// 正常输出&#x27;parent3&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s4.<span class="title function_">getName</span>()); <span class="comment">// 正常输出&#x27;parent3&#x27;</span></span><br></pre></td></tr></table></figure></li><li>原型式继承(<code>Object.create</code>)<br>如果原型对象包含<strong>引用类型（如数组或对象）</strong>，这些引用类型的属性在新对象和原型对象之间是共享的。</li><li>寄生式继承<br>使用原型式继承可以获得一份<strong>目标对象的浅拷贝</strong>，然后利用这个浅拷贝的能力再进行增强，添加一些方法，这样的继承方式就叫作寄生式继承。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> parent5 = &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&quot;parent5&quot;</span>,</span><br><span class="line"><span class="attr">friends</span>: [<span class="string">&quot;p1&quot;</span>, <span class="string">&quot;p2&quot;</span>, <span class="string">&quot;p3&quot;</span>],</span><br><span class="line"><span class="attr">getName</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">clone</span>(<span class="params">original</span>) &#123;</span><br><span class="line"><span class="keyword">let</span> clone = <span class="title class_">Object</span>.<span class="title function_">create</span>(original);</span><br><span class="line">clone.<span class="property">getFriends</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">friends</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">return</span> clone;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person5 = <span class="title function_">clone</span>(parent5);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person5.<span class="title function_">getName</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person5.<span class="title function_">getFriends</span>());</span><br></pre></td></tr></table></figure></li><li>寄生组合式继承<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">clone</span> (<span class="params">parent, child</span>) &#123;</span><br><span class="line">  <span class="comment">// 这里改用 Object.create 就可以减少组合继承中多进行一次构造的过程</span></span><br><span class="line">  child.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(parent.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line">  child.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = child;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Parent6</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;parent6&#x27;</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">play</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">&#125;</span><br><span class="line">  <span class="title class_">Parent6</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child6</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title class_">Parent6</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>);</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">friends</span> = <span class="string">&#x27;child5&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">clone</span>(<span class="title class_">Parent6</span>, <span class="title class_">Child6</span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Child6</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getFriends</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">friends</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person6 = <span class="keyword">new</span> <span class="title class_">Child6</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person6);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person6.<span class="title function_">getName</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person6.<span class="title function_">getFriends</span>());</span><br></pre></td></tr></table></figure></li><li><code>ES6</code> 的 <code>extends</code> 关键字实现逻辑</li></ol><h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><p>是ES6的提出的一个异步编程解决方案；promise是一个构造函数，所以我们需要通过new关键字生成一个promise实例对象；promise的构造函数接受一个函数作为参数，函数中的代码在new promise时会立刻执行，我们可以在这里去执行异步代码的操作。并且该函数默认存在两个参数分别是<code>resolve</code>和<code>reject</code>，这两个参数也是函数，用来标记异步执行的状态。</p><ul><li>链式调用：通过 .then() 返回新 Promise，可连续调用：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fetchData</span>()</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> <span class="title function_">process</span>(data))</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(result))</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(error));</span><br></pre></td></tr></table></figure></li><li>async&#x2F;await 异常捕获：使用 try&#x2F;catch<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchData</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> data = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;/api&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;请求失败:&#x27;</span>, error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="async-await"><a href="#async-await" class="headerlink" title="async&#x2F;await"></a>async&#x2F;await</h2><p><code>ES8</code>引入的语法糖；用于简化<code>promise</code>的使用。<code>async</code>函数返回一个<code>promise</code>;<code>await</code>用于等待<code>promise</code>的解决<br><code>JavaScript </code>是单线程的，但它通过事件循环和任务队列实现了非阻塞的异步操作。异步操作完成后，它们的结果会被放入微任务队列中，以便在当前任务完成后立即执行。</p><p><code>async</code> 和 <code>await</code> 的实现依赖于 <code>JavaScript </code>的事件循环机制。具体来说：</p><p><code>Promise</code>：<code>async</code> 函数内部的操作通常涉及 <code>Promise</code> 对象。<code>Promise</code> 提供了一种标准化的方式来处理异步操作的结果或错误。<br>微任务：当一个 <code>Promise</code> 被解决时，<strong>它的回调函数会被放入微任务队列中</strong>，并在当前任务完成后立即执行。这使得 <code>await</code> 能够在 <code>Promise</code> 解决后恢复函数的执行。</p><h2 id="JS异步方案"><a href="#JS异步方案" class="headerlink" title="JS异步方案"></a>JS异步方案</h2><ol><li><strong>回调函数</strong><br>允许你将一个函数作为参数传递给另一个函数，并在适当的时机执行这个函数。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fetchData</span>(<span class="params">callback</span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> data = &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;Alice&#x27;</span> &#125;;</span><br><span class="line">        <span class="title function_">callback</span>(<span class="literal">null</span>, data); <span class="comment">// 模拟异步操作完成后调用回调函数</span></span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fetchData</span>(<span class="function">(<span class="params">error, result</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (error) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error:&#x27;</span>, error);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Result:&#x27;</span>, result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><code>Promise</code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fetchData</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> data = &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;Alice&#x27;</span> &#125;;</span><br><span class="line">            <span class="title function_">resolve</span>(data); <span class="comment">// 成功时调用</span></span><br><span class="line">            <span class="comment">// 或者 reject(new Error(&#x27;Failed to fetch&#x27;)); // 失败时调用</span></span><br><span class="line">        &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fetchData</span>()</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Result:&#x27;</span>, result);</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error:&#x27;</span>, error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><code>Async/Await</code>是基于<code>promise</code>的语法糖，使异步代码看起来更像同步代码，从而提高了代码的可读性和可维护性<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchDataAndProcess</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> result1 = <span class="keyword">await</span> <span class="title function_">fetchData</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;First Result:&#x27;</span>, result1);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> result2 = <span class="keyword">await</span> <span class="title function_">fetchData</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Second Result:&#x27;</span>, result2);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error:&#x27;</span>, error);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fetchDataAndProcess</span>();</span><br></pre></td></tr></table></figure></li></ol><h2 id="解构赋值和扩展运算符的使用场景"><a href="#解构赋值和扩展运算符的使用场景" class="headerlink" title="解构赋值和扩展运算符的使用场景"></a>解构赋值和扩展运算符的使用场景</h2><p>解构赋值</p><ul><li>数组解构<code>const [first, ...rest] = [1, 2, 3]; // rest=[2,3]</code></li><li>对象解构<code>const &#123; name: userName &#125; = &#123; name: &#39;Bob&#39; &#125;; // userName=&#39;Bob&#39;</code></li><li>函数参数解构<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">greet</span>(<span class="params">&#123; name, age &#125;</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hello, <span class="subst">$&#123;name&#125;</span>!`</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">greet</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;Alice&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;);</span><br></pre></td></tr></table></figure>扩展运算符</li><li>数组展开</li><li>对象合并</li><li>函数传参</li><li>替代arguments</li></ul><h2 id="Map和Object的区别"><a href="#Map和Object的区别" class="headerlink" title="Map和Object的区别"></a>Map和Object的区别</h2><table><thead><tr><th align="center">特性</th><th align="center">Map</th><th align="center">Object</th></tr></thead><tbody><tr><td align="center">键的类型</td><td align="center">任意类型（对象、函数等）</td><td align="center">只能是字符串或 <code>Symbol</code></td></tr><tr><td align="center">键的顺序</td><td align="center">插入顺序保留</td><td align="center">ES6 后字符串键按插入顺序排序</td></tr><tr><td align="center">性能</td><td align="center">频繁增删键值对时性能更好</td><td align="center">不适合频繁增删</td></tr><tr><td align="center">默认属性</td><td align="center">无默认键（纯净）</td><td align="center">可能继承原型链上的属性</td></tr><tr><td align="center">遍历</td><td align="center">直接支持 <code>for...of</code> 遍历(有<code>Symbol.keys().length</code>可迭代协议)</td><td align="center">需用 <code>Object.keys()</code> 等转换</td></tr><tr><td align="center">大小获取</td><td align="center"><code>map.size</code></td><td align="center">需手动计算 <code>Object.keys().length</code></td></tr><tr><td align="center">序列化</td><td align="center">没有序列化支持  JSON.stringify  parse</td><td align="center">被支持</td></tr><tr><td align="center">同零相等</td><td align="center"></td><td align="center"></td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">m.<span class="title function_">set</span>(<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">m.<span class="title function_">set</span>(-<span class="number">0</span>, <span class="number">2</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m)<span class="comment">//Map(1) &#123;0 =&gt; 2&#125;</span></span><br></pre></td></tr></table></figure><p>NaN键名相等</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">m.<span class="title function_">set</span>(<span class="title class_">NaN</span>, <span class="number">1</span>)</span><br><span class="line">m.<span class="title function_">set</span>(<span class="title class_">NaN</span>, <span class="number">2</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m)<span class="comment">//Map(1) &#123;NaN =&gt; 2&#125;</span></span><br></pre></td></tr></table></figure><p>序列化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">m.<span class="title function_">set</span>(<span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">m.<span class="title function_">set</span>(<span class="string">&#x27;b&#x27;</span>, <span class="number">2</span>)</span><br><span class="line">m.<span class="title function_">set</span>(&#123; <span class="attr">a</span>: <span class="number">1</span> &#125;, <span class="number">3</span>)</span><br><span class="line">m.<span class="title function_">set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="number">4</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m)</span><br><span class="line"><span class="keyword">const</span> stringRes = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(m)<span class="comment">//&#123;&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stringRes)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">replace</span>(<span class="params">key, value</span>) &#123;<span class="comment">//这里的value就是map实例</span></span><br><span class="line">  <span class="keyword">if</span> (value <span class="keyword">instanceof</span> <span class="title class_">Map</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;Map&#x27;</span>,</span><br><span class="line">      <span class="attr">value</span>: [...value]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reviver</span>(<span class="params">key, value</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (value.<span class="property">type</span> == <span class="string">&#x27;Map&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Map</span>(value.<span class="property">value</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> value</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> sRes = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(m, replace)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sRes)<span class="comment">//&#123;&quot;type&quot;:&quot;Map&quot;,&quot;value&quot;:[[&quot;a&quot;,1],[&quot;b&quot;,2],[&#123;&quot;a&quot;:1&#125;,3],[[1,2,3],4]]&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([...m])</span><br><span class="line"><span class="keyword">const</span> mapRes = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(sRes, reviver)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mapRes)<span class="comment">//Map(4) &#123;&#x27;a&#x27; =&gt; 1, &#x27;b&#x27; =&gt; 2, &#123;…&#125; =&gt; 3, Array(3) =&gt; 4&#125;</span></span><br></pre></td></tr></table></figure><h2 id="for-in-和-for-of-的区别"><a href="#for-in-和-for-of-的区别" class="headerlink" title="for in 和 for of 的区别"></a>for in 和 for of 的区别</h2><ol><li>迭代内容不同：<code>for-in</code> 循环迭代对象的键名，而 <code>for-of</code> 循环迭代对象的值。</li><li>适用对象类型不同：<code>for-in</code> 循环适用于遍历对象，包括普通对象、数组、函数等；而 <code>for-of</code> 循环适用于遍历可迭代对象，包括数组、字符串、<code>Map</code>、<code>Set</code> 等。</li><li>迭代顺序不同：<code>for-in</code> 循环的迭代顺序是不确定的，而 <code>for-of</code> 循环的迭代顺序是确定的。</li><li>原理不同：<code>for-in</code> 循环会遍历对象的原型链，并包含从原型链继承的属性；而 <code>for-of</code> 循环遍历的对象是可迭代对象，其值是可枚举的</li></ol><h2 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h2><p>是一个<code>js</code>的模块打包工具，可以使用<code>webpack</code>管理项目中的<code>js</code>模块依赖<br><code>webpack</code>提供了一些默认的配置，比如<code>devServer</code>,我们可以利用<code>devServer</code>来快速启动一个开发时的web服务器<br>并且因为<code>webpack</code>默认只能打包js文件，所以webpack提供了loader的概念，我们可以使用loader来预处理一些文件，并且可以打包除了js之外的任何静态资源<br>webpack还提供了插件的概念，我们可以使用很多插件在webpack上做一些辅助性的工作，比如<code>HTMLWebpackPlugin</code>这种用来创建HTML文件的插件</p><h2 id="事件与事件流"><a href="#事件与事件流" class="headerlink" title="事件与事件流"></a>事件与事件流</h2><p>事件流的三个阶段</p><ul><li>事件捕获阶段</li><li>处于目标阶段</li><li>事件冒泡阶段<br>事件模型</li><li>原始事件模型(<code>DOM0</code>级)</li><li>标准事件模型(<code>DOM2</code>级)</li><li>IE事件模型(基本不用)<br><strong>原始事件模型(L0)：</strong><br>原始事件模型主要依赖于直接在 <code>HTML</code> 标签中设置事件处理器<code>&lt;button onclick=&quot;alert(&#39;Button clicked!&#39;)&quot;&gt;Click Me&lt;/button&gt;</code><br>或者通过 <code>DOM</code> 元素的属性直接赋值事件处理器。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> button = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line">button.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;Button clicked!&#x27;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li>同一个对象，后面注册的事件会覆盖前面注册的(同一个事件)</li><li>直接使用<code>null</code>覆盖就可以实现事件的解绑:<code>btn.onclick=null</code></li><li><strong>只支持冒泡，不支持捕获</strong><br><strong>标准事件模型(L2):</strong></li><li>语法：<code>addEventListener</code>(事件类型，事件处理函数，是否使用捕获)</li><li>后面注册的事件不会覆盖前面注册的事件(同一个事件)</li><li><code>removeEventListener</code>(事件类型，事件处理函数，获取捕获或者冒泡阶段)</li><li>匿名函数无法解绑<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">button.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Capturing phase handler&#x27;</span>);</span><br><span class="line">&#125;, <span class="literal">true</span>); <span class="comment">// 第三个参数 true 表示捕获阶段</span></span><br><span class="line"></span><br><span class="line">button.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Bubbling phase handler&#x27;</span>);</span><br><span class="line">&#125;, <span class="literal">false</span>); <span class="comment">// 第三个参数 false 表示冒泡阶段（默认）</span></span><br></pre></td></tr></table></figure>如果这个参数被设置为<code>true</code>，事件监听器将在捕获阶段被触发<br>如果这个参数被设置为<code>false</code>或被省略（默认值为<code>false</code>），事件监听器将在冒泡阶段被触发</li></ul><h2 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h2><p>好处：减少注册次数，提高程序性能<br>事件委托是委托给了父元素,原理其实是利用事件冒泡的特点(给父元素注册事件，当我们触发子元素的时候，会冒泡到父元素身上，从而触发父元素的事件)<br>e.g:点击每个小li,当前li文字变为红色</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ul = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul&#x27;</span>)</span><br><span class="line">ul.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">  <span class="keyword">if</span>(e.<span class="property">target</span>.<span class="property">tagName</span>===<span class="string">&#x27;LI&#x27;</span>)&#123;</span><br><span class="line">    e.<span class="property">target</span>.<span class="property">style</span>.<span class="property">color</span> = <span class="string">&#x27;red&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>如何找到真正触发的元素？<br><code>事件对象.target.tagName</code></p><h2 id="undefined-和null"><a href="#undefined-和null" class="headerlink" title="undefined 和null"></a>undefined 和null</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> value = <span class="literal">null</span>;</span><br><span class="line"><span class="comment">// 正确方法</span></span><br><span class="line"><span class="keyword">if</span> (value === <span class="literal">null</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;这是 null&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Object.prototype.toString.call(null); </code>返回 <code>&quot;[object Null]&quot;</code><br>ES6</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">is</span>(<span class="literal">null</span>, <span class="literal">null</span>);       <span class="comment">// true</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">is</span>(<span class="literal">null</span>, &#123;&#125;);         <span class="comment">// false</span></span><br></pre></td></tr></table></figure><ul><li><code>undefined</code>表示不存在这个值，它是一个变量最原始的状态</li><li><code>null</code>是一个具体的值，只不过这个值是个空值</li></ul><h2 id="伪数组"><a href="#伪数组" class="headerlink" title="伪数组"></a>伪数组</h2><p>类似数组的一个集合；常见的有两个，一个是arguments还有一个是dom的children属性获得的子节点的集合。他们和数组一样，具有索引和length属性，可以通过for循环遍历<br><code>const realArr = Array.prototype.slice.call(fakeArr);</code></p><h2 id="数组删除插入元素的方法"><a href="#数组删除插入元素的方法" class="headerlink" title="数组删除插入元素的方法"></a>数组删除插入元素的方法</h2><p><code>pop</code>,<code>shift</code>,<code>splice</code></p><h2 id="toString-和join"><a href="#toString-和join" class="headerlink" title="toString()和join()"></a>toString()和join()</h2><p>共同点：将数据转换为字符串形式</p><ul><li><code>toString()</code>:适用于几乎所有类型的数据</li><li><code>join()</code>仅适用于数组：将数组的所有元素连接成一个字符串，并允许指定分隔符（默认是逗号）。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">join</span>()); <span class="comment">// 输出: &quot;apple,banana,cherry&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">join</span>(<span class="string">&#x27; - &#x27;</span>)); <span class="comment">// 输出: &quot;apple - banana - cherry&quot;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h2><ol><li>原始类型</li><li>唯一性<br>每一个<code>Symbol</code>值都是唯一的，即使他们的描述相同<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sym1 = <span class="title class_">Symbol</span>(<span class="string">&quot;key&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> sym2 = <span class="title class_">Symbol</span>(<span class="string">&quot;key&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sym1 === sym2); <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li><li>不可变性<br><code>Symbol</code>值是不可变的，无法修改。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sym = <span class="title class_">Symbol</span>(<span class="string">&quot;key&quot;</span>);</span><br><span class="line">sym.<span class="property">description</span> = <span class="string">&quot;new key&quot;</span>; <span class="comment">// 无效</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sym.<span class="property">description</span>); <span class="comment">// &quot;key&quot;</span></span><br></pre></td></tr></table></figure>注意：</li><li>不可枚举<br><code>Symbol</code>属性默认是不可枚举的，不会被 <code>for...in</code> 或 <code>Object.keys()</code> 遍历。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  [<span class="title class_">Symbol</span>(<span class="string">&quot;key&quot;</span>)]:<span class="string">&quot;value&quot;</span>,</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&#x27;Alice&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> key <span class="keyword">in</span> obj)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(key)<span class="comment">// 只输出 &quot;name&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>JSON序列化<br><code>Symbol</code> 属性不会被 <code>JSON.stringify()</code> 序列化。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  [<span class="title class_">Symbol</span>(<span class="string">&quot;key&quot;</span>)]: <span class="string">&quot;value&quot;</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Alice&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj)); <span class="comment">// &#123;&quot;name&quot;:&quot;Alice&quot;&#125;</span></span><br></pre></td></tr></table></figure></li><li>类型转换<br><code>Symbol</code>不能隐式转换为字符串或数字<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sym = <span class="title class_">Symbol</span>(<span class="string">&quot;key&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sym+<span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="comment">// TypeError</span></span><br></pre></td></tr></table></figure>用途：</li><li>避免属性名冲突：Symbol 可以作为对象属性的键，避免与其他属性名冲突。</li><li>定义私有属性：模拟对象的私有属性(外部无法直接访问)</li></ol><h3 id="数组中返回一个新数组的方法-不改变原数组"><a href="#数组中返回一个新数组的方法-不改变原数组" class="headerlink" title="数组中返回一个新数组的方法(不改变原数组)"></a>数组中返回一个新数组的方法(不改变原数组)</h3><p><code>map()</code>：遍历数组的每一个元素，并对每个元素执行提供的函数，返回一个新的数组，其由调用该函数的结果组成。<br><code>filter()</code>：根据提供的函数提供的测试条件筛选数组元素，返回包含所有通过测试元素的新数组。<br><code>concat()</code>：用于合并两个或多个数组而不改变现有的数组，返回一个新数组。<br><code>slice()</code>：提取数组的一部分，返回由提取出的元素组成的新数组。不会改变原数组。<br><code>reduce()</code>（特定情况下）：虽然<code>reduce()</code>的主要目的是将数组缩减为单一值，但通过返回累加器作为数组，你也可以用来生成新的数组。<br><code>flatMap()</code>：首先使用映射函数映射每个元素，然后将结果扁平化为一维数组返回。<br><code>Array.from()</code>：从一个类似数组或可迭代对象创建一个新的数组实例。<br><code>split()</code>：仅适用于字符串，将字符串分割成数组。<br><code>join()</code>：仅适用于数组，将数组元素连接成一个字符串<br><code>concat()</code>:返回一个新的数组或字符串。不改变原数组或字符串<br><code>repeat()</code>:用于创建并返回一个新数组或字符串，该数组或字符串包含指定次数的原数组或字符串的副本。</p><h2 id="数组和字符串共用的一些方法"><a href="#数组和字符串共用的一些方法" class="headerlink" title="数组和字符串共用的一些方法"></a>数组和字符串共用的一些方法</h2><p><code>indexOf()</code>:用于查找某个元素或子字符串首次出现的位置。如果未找到，则返回 <code>-1</code><br><code>includes()</code>:用于判断数组或字符串是否包含指定的元素或子字符串。返回布尔值 <code>true</code> 或 <code>false</code>。<br><code>slice()</code>用于提取数组或字符串的一部分，并返回一个新的数组或字符串。不改变原数组或字符串。</p><h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><p>ES6引入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Enum</span> = &#123;</span><br><span class="line">  <span class="title class_">VALUE1</span>: <span class="string">&#x27;value1&#x27;</span>,</span><br><span class="line">  <span class="title class_">VALUE2</span>: <span class="string">&#x27;value2&#x27;</span>,</span><br><span class="line">  <span class="title class_">VALUE3</span>: <span class="string">&#x27;value3&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Enum</span>.<span class="property">VALUE1</span>); <span class="comment">// 输出 &#x27;value1&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>成员是常量，一旦定义不可更改。</li><li>成员值可以是任意类型，包括字符串、数字等。</li><li>枚举成员按定义顺序分配数值，从0开始递增。</li><li>枚举名称是常量，一旦定义不可更改。</li><li>枚举成员可以通过枚举名称或数值来访问。</li></ul><h2 id="js中的this是如何工作的"><a href="#js中的this是如何工作的" class="headerlink" title="js中的this是如何工作的"></a>js中的this是如何工作的</h2><p><code>this</code>在js中表示当前执行上下文的对象。他的值取决于函数的调用方式</p><ol><li>全局上下文：全局作用域中，<code>this</code>指向全局对象(在浏览器中是<code>window</code>,在<code>node.js</code>中是<code>global</code>)</li><li>函数上下文：普通函数中，<code>this</code>指向全局对象(非严格模式)或<code>undefined</code>(严格模式)；对象方法中：<code>this</code>指向调用该方法的对象；在构造函数中,<code>this</code>指向新创建的对象</li><li>箭头函数：没有自己的<code>this</code>，继承外层的<code>this</code></li><li>显示绑定：可以用<code>call</code>,<code>apply</code>或者<code>bind</code></li></ol><h2 id="ES6新特性"><a href="#ES6新特性" class="headerlink" title="ES6新特性"></a>ES6新特性</h2><ol><li><code>let</code>和<code>const</code>：块级作用域的变量声明</li><li>箭头函数：简化函数语法，继承外层<code>this</code></li><li>模板字符串</li><li>解构赋值</li><li>函数参数的默认参数</li><li>扩展运算符(…):用于展开数组或者对象</li><li>类(<code>class</code>):基于原型的面向对象编程语法糖</li><li>模块化：使用<code>import</code>和<code>export</code></li><li><code>promise</code>:用于处理异步操作</li><li><code>symbol</code>:唯一的不可变的</li><li><code>map</code>和<code>set</code>:新的数据结构</li></ol><h2 id="为什么-0-1-0-2-0-3？"><a href="#为什么-0-1-0-2-0-3？" class="headerlink" title="为什么 0.1 + 0.2 !&#x3D;&#x3D; 0.3？"></a>为什么 0.1 + 0.2 !&#x3D;&#x3D; 0.3？</h2><ol><li><code>JavaScript</code> 中的数字是以二进制形式存储的。0.1和0.2 在二进制中是无限循环小数，无法精确表示</li><li>精度丢失：由于js使用<strong>64位双精度浮点数</strong>，只能存储有限的位数；存储和计算的过程中，0.1和0.2的二进制表示会被截断，导致精度丢失</li><li>计算结果是一个接近0.3但不完全等于0.3的值<br><strong>如何解决浮点数精度问题</strong></li><li>使用<code>toFixed()</code>将结果保留指定的小数位数；注意<code>toFixed()</code>返回的是<strong>字符串</strong>，需要转换为数字<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> result = (<span class="number">0.1</span>+<span class="number">0.2</span>).<span class="title function_">toFixed</span>(<span class="number">1</span>)<span class="comment">//保留一位小数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>(result))</span><br></pre></td></tr></table></figure></li><li>使用整数运算，最后再转回小数<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> result =  (<span class="number">0.1</span> * <span class="number">10</span> + <span class="number">0.2</span> * <span class="number">10</span>) / <span class="number">10</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// 输出 0.3</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="有一段js代码在运行，现在想让这段代码休眠三秒钟，三秒后再执行后面的内容，有什么方法可以实现？"><a href="#有一段js代码在运行，现在想让这段代码休眠三秒钟，三秒后再执行后面的内容，有什么方法可以实现？" class="headerlink" title="有一段js代码在运行，现在想让这段代码休眠三秒钟，三秒后再执行后面的内容，有什么方法可以实现？"></a>有一段js代码在运行，现在想让这段代码休眠三秒钟，三秒后再执行后面的内容，有什么方法可以实现？</h2><ol><li>使用 <code>setTimeout</code><br><code>setTimeout</code> 是异步的，不会阻塞后续代码的执行。<br>如果需要阻塞代码执行，需要使用其他方法（如 <code>async</code>&#x2F;<code>await）</code></li><li>使用 Promise 和 async&#x2F;await<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sleep</span>(<span class="params">ms</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span>=&gt;</span><span class="built_in">setTimeout</span>(resolve,ms))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">run</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;开始执行&quot;</span>)</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">sleep</span>(<span class="number">3000</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;3 秒后执行&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">run</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;继续执行其他代码&quot;</span>)</span><br></pre></td></tr></table></figure></li></ol><h2 id="js对象数组，对象有id和name，如何提取出name组成的数组"><a href="#js对象数组，对象有id和name，如何提取出name组成的数组" class="headerlink" title="js对象数组，对象有id和name，如何提取出name组成的数组"></a>js对象数组，对象有id和name，如何提取出name组成的数组</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 示例对象数组</span></span><br><span class="line"><span class="keyword">const</span> users = [</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;Alice&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;Bob&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&#x27;Charlie&#x27;</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 提取name组成的数组</span></span><br><span class="line"><span class="keyword">const</span> names = users.<span class="title function_">map</span>(<span class="function"><span class="params">user</span> =&gt;</span> user.<span class="property">name</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(names); <span class="comment">// 输出: [&#x27;Alice&#x27;, &#x27;Bob&#x27;, &#x27;Charlie&#x27;]</span></span><br></pre></td></tr></table></figure><h2 id="js中查找某个元素"><a href="#js中查找某个元素" class="headerlink" title="js中查找某个元素"></a>js中查找某个元素</h2><p><code>indexOf</code>：查找基本类型的值并获取索引。<br><code>findIndex</code>：查找对象数组中第一个匹配项的索引。<br><code>find</code>：查找对象数组中第一个匹配项。<br><code>includes</code>：简单地检查数组是否包含某个值。<br><code>filter</code>：查找所有匹配项并返回它们组成的数组。<br><code>some</code> 和 <code>every</code>：检查是否存在或全部满足某些条件。</p><h2 id="除了闭包还有哪些会导致内存泄漏"><a href="#除了闭包还有哪些会导致内存泄漏" class="headerlink" title="除了闭包还有哪些会导致内存泄漏"></a>除了闭包还有哪些会导致内存泄漏</h2><ol><li>全局变量：在浏览器环境中，全局变量（包括挂载在<code>window</code> 对象上的属性）不会被垃圾回收机制自动回收，除非显式地将其删除或重新赋值。</li><li>未解除的事件监听器:当你为<code>DOM</code>元素添加事件监听器时，如果这些元素被移除或替换，但事件监听器仍然存在，它们将保持对这些元素的引用，导致内存泄漏。<code>button.removeEventListener(&#39;click&#39;, handleClick);</code></li><li>定时器和回调函数:使用 <code>setInterval</code> 或 <code>setTimeout</code> 设置的定时器，如果定时器没有被清除，回调函数中的引用会阻止相关对象被垃圾回收。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">startTimer</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">const</span> data = &#123; <span class="comment">/* 大量数据 */</span> &#125;;</span><br><span class="line"><span class="built_in">setInterval</span>(<span class="keyword">function</span> <span class="title function_">timerCallback</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data); <span class="comment">// 引用 data 对象</span></span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">startTimer</span>();</span><br><span class="line"><span class="comment">// 如果不再需要定时器，但没有清除它，data 对象不会被释放</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="sort函数"><a href="#sort函数" class="headerlink" title="sort函数"></a>sort函数</h2><p>默认情况下，<code>sort()</code> 会将数组元素转换为字符串并按照字典顺序（即 <code>Unicode</code> 码点顺序）进行排序。为了实现自定义的排序逻辑，你可以传递一个比较函数作为参数。</p><ul><li>如果 <code>compareFunction(a, b)</code> 返回一个小于零的值，则 <code>a</code> 会被排在 <code>b</code> 之前。</li><li>如果 <code>compareFunction(a, b)</code> 返回一个等于零的值，则 <code>a</code> 和 <code>b</code> 的相对位置不变。</li><li>如果 <code>compareFunction(a, b)</code> 返回一个大于零的值，则 <code>a </code>会被排在 <code>b</code> 之后。</li></ul><h2 id="如何实现拖动一个元素"><a href="#如何实现拖动一个元素" class="headerlink" title="如何实现拖动一个元素"></a>如何实现拖动一个元素</h2><ol><li>使用原生 <code>JavaScript </code>实现拖动,鼠标事件 (<code>mousedown</code>, <code>mousemove</code>, <code>mouseup</code>) 来手动实现拖动效果。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">  &lt;title&gt;Drag and Drop Example&lt;/title&gt;</span><br><span class="line">  &lt;style&gt;</span><br><span class="line">    #draggable &#123;</span><br><span class="line">      width: 100px;</span><br><span class="line">      height: 100px;</span><br><span class="line">      background-color: #3498db;</span><br><span class="line">      position: absolute;</span><br><span class="line">      top: 100px;</span><br><span class="line">      left: 100px;</span><br><span class="line">      cursor: move;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=&quot;draggable&quot;&gt;Drag me!&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    const draggable = document.getElementById(&#x27;draggable&#x27;);</span><br><span class="line">    let offsetX = 0, offsetY = 0;</span><br><span class="line">    let isDragging = false;</span><br><span class="line"></span><br><span class="line">    // 鼠标按下时记录初始位置并设置拖动状态</span><br><span class="line">    draggable.addEventListener(&#x27;mousedown&#x27;, (e) =&gt; &#123;</span><br><span class="line">      isDragging = true;</span><br><span class="line">      offsetX = e.clientX - draggable.offsetLeft;</span><br><span class="line">      offsetY/XMLSchema = e.clientY - draggable.offsetTop;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    // 监听全局的鼠标移动事件</span><br><span class="line">    document.addEventListener(&#x27;mousemove&#x27;, (e) =&gt; &#123;</span><br><span class="line">      if (!isDragging) return;</span><br><span class="line">      </span><br><span class="line">      // 计算新的位置</span><br><span class="line">      const x = e.clientX - offsetX;</span><br><span class="line">      const y = e.clientY - offsetY;</span><br><span class="line"></span><br><span class="line">      // 设置新的位置</span><br><span class="line">      draggable.style.left = `$&#123;x&#125;px`;</span><br><span class="line">      draggable.style.top = `$&#123;y&#125;px`;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    // 鼠标释放时取消拖动状态</span><br><span class="line">    document.addEventListener(&#x27;mouseup&#x27;, () =&gt; &#123;</span><br><span class="line">      isDragging = false;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li><li>使用 <code>HTML5 Drag and Drop API</code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">  &lt;title&gt;HTML5 Drag and Drop Example&lt;/title&gt;</span><br><span class="line">  &lt;style&gt;</span><br><span class="line">    #draggable &#123;</span><br><span class="line">      width: 100px;</span><br><span class="line">      height: 100px;</span><br><span class="line">      background-color: #3498db;</span><br><span class="line">      display: inline-block;</span><br><span class="line">    &#125;</span><br><span class="line">    #dropzone &#123;</span><br><span class="line">      width: 200px;</span><br><span class="line">      height: 200px;</span><br><span class="line">      border: 2px dashed #bdc3c7;</span><br><span class="line">      margin-top: 20px;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=&quot;draggable&quot; draggable=&quot;true&quot;&gt;Drag me!&lt;/div&gt;</span><br><span class="line">  &lt;div id=&quot;dropzone&quot;&gt;Drop here&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    const draggable = document.getElementById(&#x27;draggable&#x27;);</span><br><span class="line">    const dropzone = document.getElementById(&#x27;dropzone&#x27;);</span><br><span class="line"></span><br><span class="line">    // 拖动开始时触发</span><br><span class="line">    draggable.addEventListener(&#x27;dragstart&#x27;, (e) =&gt; &#123;</span><br><span class="line">      e.dataTransfer.setData(&#x27;text/plain&#x27;, &#x27;Dragged Element&#x27;);</span><br><span class="line">      console.log(&#x27;Drag started&#x27;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    // 拖动进入目标区域时触发</span><br><span class="line">    dropzone.addEventListener(&#x27;dragenter&#x27;, (e) =&gt; &#123;</span><br><span class="line">      e.preventDefault(); // 允许放置</span><br><span class="line">      dropzone.style.backgroundColor = &#x27;#ecf0f1&#x27;;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    // 拖动离开目标区域时触发</span><br><span class="line">    dropzone.addEventListener(&#x27;dragleave&#x27;, () =&gt; &#123;</span><br><span class="line">      dropzone.style.backgroundColor = &#x27;&#x27;;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    // 拖动在目标区域上方时触发</span><br><span class="line">    dropzone.addEventListener(&#x27;dragover&#x27;, (e) =&gt; &#123;</span><br><span class="line">      e.preventDefault(); // 必须调用 preventDefault() 才能允许放置</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    // 拖动结束时触发</span><br><span class="line">    dropzone.addEventListener(&#x27;drop&#x27;, (e) =&gt; &#123;</span><br><span class="line">      e.preventDefault();</span><br><span class="line">      dropzone.style.backgroundColor = &#x27;&#x27;;</span><br><span class="line">      console.log(&#x27;Dropped:&#x27;, e.dataTransfer.getData(&#x27;text/plain&#x27;));</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li><li>Vue<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">id</span>=<span class="string">&quot;draggable&quot;</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      @<span class="attr">mousedown</span>=<span class="string">&quot;startDrag&quot;</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      @<span class="attr">mousemove</span>=<span class="string">&quot;onDrag&quot;</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      @<span class="attr">mouseup</span>=<span class="string">&quot;stopDrag&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">:style</span>=<span class="string">&quot;&#123; top: position.y + &#x27;px&#x27;, left: position.x + &#x27;px&#x27; &#125;&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &gt;</span></span></span><br><span class="line"><span class="language-xml">      Drag me!</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">isDragging</span>: <span class="literal">false</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">position</span>: &#123; <span class="attr">x</span>: <span class="number">100</span>, <span class="attr">y</span>: <span class="number">100</span> &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">offset</span>: &#123; <span class="attr">x</span>: <span class="number">0</span>, <span class="attr">y</span>: <span class="number">0</span> &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">startDrag</span>(<span class="params">e</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">isDragging</span> = <span class="literal">true</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">offset</span>.<span class="property">x</span> = e.<span class="property">clientX</span> - <span class="variable language_">this</span>.<span class="property">position</span>.<span class="property">x</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">offset</span>.<span class="property">y</span> = e.<span class="property">clientY</span> - <span class="variable language_">this</span>.<span class="property">position</span>.<span class="property">y</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>, <span class="variable language_">this</span>.<span class="property">onDrag</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseup&#x27;</span>, <span class="variable language_">this</span>.<span class="property">stopDrag</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">onDrag</span>(<span class="params">e</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">isDragging</span>) <span class="keyword">return</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">position</span>.<span class="property">x</span> = e.<span class="property">clientX</span> - <span class="variable language_">this</span>.<span class="property">offset</span>.<span class="property">x</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">position</span>.<span class="property">y</span> = e.<span class="property">clientY</span> - <span class="variable language_">this</span>.<span class="property">offset</span>.<span class="property">y</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">stopDrag</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">isDragging</span> = <span class="literal">false</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">document</span>.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>, <span class="variable language_">this</span>.<span class="property">onDrag</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">document</span>.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;mouseup&#x27;</span>, <span class="variable language_">this</span>.<span class="property">stopDrag</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-id">#draggable</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">width</span>: <span class="number">100px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">height</span>: <span class="number">100px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">background-color</span>: <span class="number">#3498db</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">position</span>: absolute;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">cursor</span>: move;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li></ol><h2 id="defer-和-async-的区别"><a href="#defer-和-async-的区别" class="headerlink" title="defer 和 async 的区别"></a>defer 和 async 的区别</h2><p><code>js</code>的三种加载方式</p><ol><li>正常模式<code>&lt;script src=&quot;script.js&quot;&gt;&lt;/script&gt;</code>读到就加载并执行</li><li><code>async</code>模式<code>&lt;script async src=&quot;script.js&quot;&gt;&lt;/script&gt;</code>;<code>script.js</code>会被异步加载，即加载和渲染后续文档元素的过程将和 <code>script.js</code> 的加载并行进行（异步）。当 <code>script.js</code>加载完整立即执行<code>script.js</code>。执行<code>script.js</code>时，**<code>html</code>解析暂停**。从加载完成立即执行来看，<code>async</code>模式 执行顺序与写的顺序无关，不保证执行顺序。</li><li><code>defer</code>模式<code>&lt;script defer src=&quot;index.js&quot;&gt;&lt;/script&gt; </code><br>有 <code>defer</code>，<code>script.js</code>会被异步加载，即加载和渲染后续文档元素的过程将和 <code>script.js</code> 的加载并行进行（异步）。这一点与<code>async</code>模式一致。<br>不同的是当 <code>script.js</code>加载完成并不会立即执行，而是在所有元素解析完成之后，<code>DOMContentLoaded </code>事件触发之前完成。因此它会按照写的顺序执行。<br><strong><code>defer</code> 属性</strong></li></ol><ul><li>执行时机：带有 <code>defer</code> 属性的脚本会在文档解析完成后，但在 <code>DOMContentLoaded</code> 事件触发之前执行。</li><li>执行顺序：多个带有 <code>defer</code> 的脚本会按照它们在文档中出现的顺序依次执行。</li><li>加载行为：<strong>脚本会被异步下载，但不会立即执行，直到文档解析完成</strong>。</li><li>适用场景：适用于需要依赖 <code>DOM</code> 完全加载后才能正确运行的脚本。<br><strong><code>async</code> 属性</strong></li><li>执行时机：带有 <code>async</code> 属性的脚本一旦<strong>下载完成就会立即执行</strong>，这可能会在文档完全解析之前发生。</li><li>执行顺序：多个带有 <code>async</code> 的脚本<strong>不保证按顺序执行</strong>；每个脚本在其<strong>下载完成后立即执行</strong>。</li><li>加载行为：脚本被异步下载，并且一旦下载完成就会立即执行，无论文档是否已经解析完毕。</li><li>适用场景：适用于独立于其他脚本以及页面内容的脚本，例如分析或广告脚本。</li></ul><h2 id="怎么判断一个对象是空对象"><a href="#怎么判断一个对象是空对象" class="headerlink" title="怎么判断一个对象是空对象"></a>怎么判断一个对象是空对象</h2><ol><li><strong>Object.keys()</strong><br><code>Object.keys()</code>方法返回一个包含对象自身所有<strong>可枚举属性</strong>的数组。如果该数组的长度为 <code>0</code>，则说明对象是空的。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isEmptyObject</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="title function_">keys</span>(obj).<span class="property">length</span> === <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 示例</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isEmptyObject</span>(&#123;&#125;)); <span class="comment">// 输出: true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isEmptyObject</span>(&#123; <span class="attr">key</span>: <span class="string">&#x27;value&#x27;</span> &#125;)); <span class="comment">// 输出: false</span></span><br></pre></td></tr></table></figure></li><li>使用 <code>for...in</code> 循环<br>通过<code>for...in</code>循环遍历对象的所有可枚举属性。如果没有找到任何属性，则对象为空。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isEmptyObject</span>(<span class="params">obj</span>)&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> obj)&#123;</span><br><span class="line">    <span class="keyword">if</span>(obj.<span class="title function_">hasOwnProperty</span>(key))&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span><span class="comment">//找到至少一个属性，对象不为空</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span><span class="comment">//</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="垃圾回收机制"><a href="#垃圾回收机制" class="headerlink" title="垃圾回收机制"></a>垃圾回收机制</h2><ol><li>可达性：一个对象如果可以从根对象通过引用链访问到，则认为它是可达的。根对象通常包括全局变量、活动线程栈中的局部变量等。</li><li>不可达对象：无法从根对象访问到的对象被认为是不可达的，可以被垃圾回收器回收。<br><strong>常见的垃圾回收算法</strong></li><li>引用计数法：每个对象都有一个引用计数器，记录有多少个引用指向该对象。当有新的引用指向该对象时，引用计数加一；当引用解除时，引用计数减一。当引用计数变为零时，表示没有引用指向该对象，可以立即回收其占用的内存</li><li>标记清除法：(标记阶段)从根对象开始遍历所有可达对象，并标记它们为可达；(清除阶段)遍历整个堆内存，回收未被标记的对象。</li></ol><h2 id="判断一个元素是否在可视区域"><a href="#判断一个元素是否在可视区域" class="headerlink" title="判断一个元素是否在可视区域"></a>判断一个元素是否在可视区域</h2><ol><li><p><strong>offsetTop、scrollTop</strong></p></li><li><p><strong>getBoundingClientRect</strong></p></li><li><p><strong>Intersection Observer</strong><br>创建观察者</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> options = &#123;</span><br><span class="line">  <span class="comment">// 表示重叠面积占被观察者的比例，从 0 - 1 取值，</span></span><br><span class="line">  <span class="comment">// 1 表示完全被包含</span></span><br><span class="line">  <span class="attr">threshold</span>: <span class="number">1.0</span>, </span><br><span class="line">  <span class="attr">root</span>:<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#scrollArea&#x27;</span>) <span class="comment">// 必须是目标元素的父级元素</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">callback</span> = (<span class="params">entries, observer</span>) =&gt; &#123; ....&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> observer = <span class="keyword">new</span> <span class="title class_">IntersectionObserver</span>(callback, options);</span><br></pre></td></tr></table></figure><p>入的参数 <code>callback </code>在重叠比例超过 <code>threshold</code> 时会被执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> callback = <span class="keyword">function</span>(<span class="params">entries, observer</span>) &#123; </span><br><span class="line">  entries.<span class="title function_">forEach</span>(<span class="function"><span class="params">entry</span> =&gt;</span> &#123;</span><br><span class="line">      entry.<span class="property">time</span>;               <span class="comment">// 触发的时间</span></span><br><span class="line">      entry.<span class="property">rootBounds</span>;         <span class="comment">// 根元素的位置矩形，这种情况下为视窗位置</span></span><br><span class="line">      entry.<span class="property">boundingClientRect</span>; <span class="comment">// 被观察者的位置举行</span></span><br><span class="line">      entry.<span class="property">intersectionRect</span>;   <span class="comment">// 重叠区域的位置矩形</span></span><br><span class="line">      entry.<span class="property">intersectionRatio</span>;  <span class="comment">// 重叠区域占被观察者面积的比例（被观察者不是矩形时也按照矩形计算）</span></span><br><span class="line">      entry.<span class="property">target</span>;             <span class="comment">// 被观察者</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>传入被观察者<br>通过 <code>observer.observe(target)</code> 这一行代码即可简单的注册被观察者</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> target = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.target&#x27;</span>);</span><br><span class="line">observer.<span class="title function_">observe</span>(target);</span><br></pre></td></tr></table></figure></li></ol><h2 id="有个正方形，实现鼠标移入移出的不同提示，以及点击正方形和点击正方形外的不同提示"><a href="#有个正方形，实现鼠标移入移出的不同提示，以及点击正方形和点击正方形外的不同提示" class="headerlink" title="有个正方形，实现鼠标移入移出的不同提示，以及点击正方形和点击正方形外的不同提示"></a>有个正方形，实现鼠标移入移出的不同提示，以及点击正方形和点击正方形外的不同提示</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> square = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;square&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> message = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;message&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Mouse events for hover</span></span><br><span class="line">square.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseenter&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  message.<span class="property">textContent</span> = <span class="string">&#x27;Mouse entered the square!&#x27;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">square.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseleave&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  message.<span class="property">textContent</span> = <span class="string">&#x27;Mouse left the square!&#x27;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Click event for the square</span></span><br><span class="line">square.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">  event.<span class="title function_">stopPropagation</span>(); <span class="comment">// Prevent the click from bubbling up to the document</span></span><br><span class="line">  message.<span class="property">textContent</span> = <span class="string">&#x27;Clicked inside the square!&#x27;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Click event for outside the square</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!square.<span class="title function_">contains</span>(event.<span class="property">target</span>)) &#123;</span><br><span class="line">    message.<span class="property">textContent</span> = <span class="string">&#x27;Clicked outside the square!&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id><a href="#" class="headerlink" title></a></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> object = &#123;</span><br><span class="line">  <span class="attr">a</span>:<span class="number">1</span>,</span><br><span class="line">  <span class="attr">b</span>:<span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line">object.<span class="property">a</span> = <span class="number">4</span> ;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(object)<span class="comment">//a=4</span></span><br><span class="line"><span class="comment">//a的值可以改变吗，</span></span><br></pre></td></tr></table></figure><p><strong>如果不想让它改变需要加什么属性</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(object, <span class="string">&#x27;a&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">writable</span>: <span class="literal">false</span>, <span class="comment">// 属性不可修改</span></span><br><span class="line">  <span class="attr">configurable</span>: <span class="literal">false</span>, <span class="comment">// 属性不可删除或重新定义</span></span><br><span class="line">  <span class="attr">enumerable</span>: <span class="literal">true</span> <span class="comment">// 属性可枚举</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>整个<code>object</code>里面的属性都无法修改</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">freeze</span>(object)</span><br></pre></td></tr></table></figure><h2 id="-1"><a href="#-1" class="headerlink" title="&lt;div draggable=&quot;true&quot;&gt;&lt;/div&gt;"></a><code>&lt;div draggable=&quot;true&quot;&gt;&lt;/div&gt;</code></h2><p><strong>拖动时：</strong></p><ul><li>开始：<code>dragstart</code></li><li>进行中：<code>drag</code></li><li>结束：<code>dragend</code><br><strong>进入区域：</strong></li><li>进入时：<code>dragenter</code></li><li>进入后：<code>dragover</code></li><li>离开：<code>dragleave</code></li><li>放置：<code>drop</code></li></ul><h2 id="parseInt-parseInt-string-radix"><a href="#parseInt-parseInt-string-radix" class="headerlink" title="parseInt:parseInt(string, radix);"></a>parseInt:<code>parseInt(string, radix);</code></h2><p>将字符串转化为一个整数<br>第二个参数：参数为0则为10进制，参数小于2或者大于36：NaN</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>,<span class="string">&quot;3&quot;</span>].<span class="title function_">map</span>(<span class="keyword">function</span>(<span class="params">item,index,array</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">parseInt</span>(item,index,array)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//返回[1,NaN,NaN]</span></span><br></pre></td></tr></table></figure><p>相当于</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(<span class="string">&quot;1&quot;</span>,<span class="number">0</span>)<span class="comment">//1</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&quot;2&quot;</span>,<span class="number">1</span>)<span class="comment">//NaN</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&quot;3&quot;</span>,<span class="number">2</span>)<span class="comment">//NaN(二进制没有大于三的数)</span></span><br></pre></td></tr></table></figure><p>只要<code>map</code>的参数是个函数，那么这个函数默认的参数就是<code>item,index,array</code></p><h2 id="document-addEventListener-‘DOMContentLoaded’-…"><a href="#document-addEventListener-‘DOMContentLoaded’-…" class="headerlink" title="document.addEventListener(‘DOMContentLoaded’, …)"></a>document.addEventListener(‘DOMContentLoaded’, …)</h2><p>用于监听文档加载状态的事件处理器。它确保你的代码在<code> DOM</code>（文档对象模型）完全加载并解析之后执行，但不会等待样式表、图片和子框架完成加载。<br>作用：</p><ol><li><strong>确保DOM已加载</strong>，可以安全地访问和操作DOM元素</li><li>提高性能：与 <code>window.onload</code> 不同，<code>DOMContentLoaded</code> 不会等待所有资源（如图片、样式表等）加载完成。因此，使用 <code>DOMContentLoaded</code> 可以让你的脚本更快地执行，从而提升页面的响应速度。</li></ol><h2 id="会发生强制类型转换的情况"><a href="#会发生强制类型转换的情况" class="headerlink" title="会发生强制类型转换的情况"></a>会发生强制类型转换的情况</h2><ul><li>不同类型的变量赋值</li><li>函数参数传递</li><li>算数运算</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Q&amp;A(HTML&amp;CSS)</title>
      <link href="/2025/02/02/Q&amp;A(HTML&amp;CSS)/"/>
      <url>/2025/02/02/Q&amp;A(HTML&amp;CSS)/</url>
      
        <content type="html"><![CDATA[<h2 id="html5新特性"><a href="#html5新特性" class="headerlink" title="html5新特性"></a>html5新特性</h2><ol><li>语义化标签：<code>&lt;header&gt;</code>,<code>&lt;footer&gt;</code>,<code>&lt;article&gt;</code>,<code>&lt;section&gt;</code>,<code>&lt;nav&gt;</code></li><li>多媒体支持：<code>&lt;audio&gt;</code>,<code>&lt;video&gt;</code></li><li>表单增强：新增了多种输入类型：如<code>&lt;input type=&quot;email&quot;&gt;</code>,<code>date</code>,<code>range</code>等；属性如<code>placeholder</code>,<code>&lt;input type=&quot;text&quot; name=&quot;usrname&quot; required&gt;</code>；提升了表单功能和用户体验</li><li><code>Canvas</code>和<code>SVG</code></li><li>本地存储 <code>Web Storage</code>:<code>localStorage</code>永久存储(除非手动删除)，<code>sessionStorage</code>(关闭页签后失效)</li></ol><h2 id="html元素分类"><a href="#html元素分类" class="headerlink" title="html元素分类"></a>html元素分类</h2><h3 id="行内元素"><a href="#行内元素" class="headerlink" title="行内元素"></a>行内元素</h3><p><code>&lt;span&gt;</code>,<code>&lt;a&gt;</code>,<code>&lt;strong&gt;</code>,<code>&lt;b&gt;</code>、<code>&lt;em&gt;</code>,<code>&lt;i&gt;</code>、<code>&lt;del&gt;</code>、<code>&lt;s&gt;</code>、<code>&lt;ins&gt;</code>、<code>&lt;u&gt;</code>、<code>&lt;img/&gt;</code>、<code>&lt;input/&gt;</code>、<code>&lt;select&gt;</code>、<code>&lt;textarea&gt;</code>、<code>&lt;br/&gt;</code><br>行内元素的特点：<br>① 相邻行内元素在一行上，一行可以显示多个。<br>② 高、宽直接设置是无效的。<br>③ 默认宽度就是它本身内容的宽度。<br>④ 行内元素只能容纳文本或其他行内元素。<br>注意：<br> 链接里面不能再放链接<br> 特殊情况链接 <code>&lt;a&gt;</code> 里面可以放块级元素，但是给 <code>&lt;a&gt;</code> 转换一下块级模式最安全</p><h3 id="行内块元素"><a href="#行内块元素" class="headerlink" title="行内块元素"></a>行内块元素</h3><p>在行内元素中有几个特殊的标签 —— &lt; img &#x2F;&gt;、&lt; input &#x2F;&gt;、&lt; td &gt;，它们同时具有块元素和行内元素的特点。 有些资料称它们为行内块元素。<br>行内块元素的特点：<br>① 和相邻行内元素（行内块）在一行上，但是他们之间会有空白缝隙。一行可以显示多个（行内元素特点）。<br>② 默认宽度就是它本身内容的宽度（行内元素特点）。<br>③ 高度，行高、外边距以及内边距都可以控制（块级元素特点）</p><h3 id="块级元素"><a href="#块级元素" class="headerlink" title="块级元素"></a>块级元素</h3><p>div、p、h1~h6、ul、ol、dl、li、dd、table、hr、blockquote、address、table、menu、pre，HTML5新增的header、section、aside、footer等<br>默认<code>width</code>是父元素的<code>100%</code>，<code>height</code>取决于内容的<code>height</code></p><h3 id="对HTML语义化的理解"><a href="#对HTML语义化的理解" class="headerlink" title="对HTML语义化的理解"></a>对HTML语义化的理解</h3><p><strong>语义化是指根据内容的结构化（内容语义化），选择合适的标签（代码语义化）</strong>。通俗来讲就是用正确的标签做正确的事情。</p><p>语义化的优点如下：</p><ul><li>对机器友好，带有语义的文字表现力丰富，更适合搜索引擎的爬虫爬取有效信息，有利于SEO。除此之外，语义类还支持读屏软件，根据文章可以自动生成目录，帮助视障用户更容易浏览文章或页面，提高了网页的可访问性，提升用户体验；</li><li>对开发者友好，使用语义类标签增强了可读性，结构更加清晰，在没有css的情况下，页面也能呈现出更好的内容结构，代码结构；开发者能清晰的看出网页的结构，便于团队的开发与维护。</li></ul><p>常见的语义化标签：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span><span class="tag">&lt;/<span class="name">header</span>&gt;</span>  头部</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span>&gt;</span><span class="tag">&lt;/<span class="name">nav</span>&gt;</span>  导航栏</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span><span class="tag">&lt;/<span class="name">section</span>&gt;</span>  区块（有语义化的div）</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">main</span>&gt;</span><span class="tag">&lt;/<span class="name">main</span>&gt;</span>  主要区域</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">article</span>&gt;</span><span class="tag">&lt;/<span class="name">article</span>&gt;</span>  主要内容</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">aside</span>&gt;</span><span class="tag">&lt;/<span class="name">aside</span>&gt;</span>  侧边栏</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span><span class="tag">&lt;/<span class="name">footer</span>&gt;</span>  底部</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="：内嵌框架元素"><a href="#：内嵌框架元素" class="headerlink" title="&lt;iframe&gt;：内嵌框架元素"></a><code>&lt;iframe&gt;</code>：内嵌框架元素</h2><p>它能够将另一个 <code>HTML</code> 页面嵌入到当前页面中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe</span><br><span class="line">  id=<span class="string">&quot;inlineFrameExample&quot;</span></span><br><span class="line">  title=<span class="string">&quot;Inline Frame Example&quot;</span></span><br><span class="line">  width=<span class="string">&quot;300&quot;</span></span><br><span class="line">  height=<span class="string">&quot;200&quot;</span></span><br><span class="line">  src=<span class="string">&quot;https://www.openstreetmap.org/export/embed.html?bbox=-0.004017949104309083%2C51.47612752641776%2C0.00030577182769775396%2C51.478569861898606&amp;layer=mapnik&quot;</span>&gt;</span><br><span class="line">&lt;/iframe&gt;</span><br></pre></td></tr></table></figure><p><code>id</code> 属性<br>唯一标识：<code>id</code> 属性为 <code>&lt;iframe&gt;</code> 元素提供了一个<strong>唯一</strong>的标识符，在整个<code>HTML</code>文档中应该是唯一的。<br><code>DOM</code>操作：通过 <code>id</code>，你可以方便地使用 <code>JavaScript</code> 或 <code>CSS</code> 选择器来访问和操作该 <code>&lt;iframe&gt; </code>元素。例如，使用 <code>document.getElementById(&#39;yourIframeId&#39;) </code>来获取该 <code>iframe</code> 的 <code>DOM </code>对象。<br>目标框架名称：<code>name</code> 属性主要用于指定 <code>iframe </code>的名称，它通常与超链接或表单的目标属性一起使用，以确定内容应在哪个 <code>iframe </code>中显示。<br>表单提交：当使用 <code>&lt;form&gt;</code> 标签时，可以通过设置<code>target</code> 属性为某个 <code>iframe </code>的 <code>name</code> 值，使得表单提交的结果显示在该 <code>iframe</code>中。<br>示例：<br><code>&lt;iframe name=&quot;targetFrame&quot; src=&quot;https://example.com&quot;&gt;&lt;/iframe&gt;</code><br><code>&lt;a href=&quot;https://another-example.com&quot; target=&quot;targetFrame&quot;&gt;Go to Another Example&lt;/a&gt;</code><br>在这个例子中，点击链接会将页面加载到名为 <code>targetFrame</code> 的 <code>iframe</code> 中。</p><h2 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h2><p><code>Flexible Box</code>简称<code>flex</code>，意为”弹性布局”，可以简便、完整、响应式地实现各种页面布局<br>采用Flex布局的元素，称为<code>flex</code>容器<code>container</code><br>它的所有子元素自动成为容器成员，称为<code>flex</code>项目<code>item</code></p><h3 id="容器属性"><a href="#容器属性" class="headerlink" title="容器属性"></a>容器属性</h3><h4 id="flex-direction"><a href="#flex-direction" class="headerlink" title="flex-direction"></a>flex-direction</h4><p>决定主轴方向</p><ul><li>row(默认值)：主轴为水平方向，起点在左端</li><li>row-reverse:主轴为水平方向，起点在右端</li><li>column:主轴方向为垂直方向，起点在上沿</li><li>column-reverse:主轴为垂直方向，起点在下沿</li></ul><h4 id="flex-wrap"><a href="#flex-wrap" class="headerlink" title="flex-wrap"></a>flex-wrap</h4><ul><li>nowrap(默认值)：不换行</li><li>wrap:换行</li><li>wrap-reverse:换行，第一行在上方</li></ul><h4 id="flex-flow"><a href="#flex-flow" class="headerlink" title="flex-flow"></a>flex-flow</h4><p>是<code>flex-direction</code>属性和<code>flex-wrap</code>属性的简写形式，默认值为<code>row nowrap</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="attribute">flex-flow</span>: &lt;flex-direction&gt; || &lt;flex-wrap&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="justify-content"><a href="#justify-content" class="headerlink" title="justify-content"></a><code>justify-content</code></h4><p>主轴对齐方式</p><ul><li><code>flex-start</code>(默认值):左对齐</li><li><code>flex-end</code>:右对齐</li><li><code>center</code>:居中</li><li><code>space-between</code>:两端对齐(不留空隙)，项目之间的间隔都相等</li><li><code>space-around:</code>两个<code>item</code>两侧间隔相等</li></ul><h4 id="align-items"><a href="#align-items" class="headerlink" title="align-items"></a>align-items</h4><p>定义<code>item</code>在交叉轴上如何对齐</p><ul><li>flex-start : 交叉轴的起点对齐</li><li>flex-end:交叉轴的终点对齐</li><li>center:交叉轴的中点对齐</li><li>baseline:<code>item</code>的第一行文字的基线对齐</li><li>stretch(默认值):如果<code>item</code>未设置高度或设为<code>auto</code>，将占满整个容器的高度</li></ul><h4 id="align-content"><a href="#align-content" class="headerlink" title="align-content"></a>align-content</h4><p>定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用</p><ul><li>flex-start：与交叉轴的起点对齐</li><li>flex-end：与交叉轴的终点对齐</li><li>center：与交叉轴的中点对齐</li><li>space-between：与交叉轴两端对齐，轴线之间的间隔平均分布</li><li>space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍</li><li>stretch（默认值）：轴线占满整个交叉轴</li></ul><h3 id="容器成员属性"><a href="#容器成员属性" class="headerlink" title="容器成员属性"></a>容器成员属性</h3><ul><li>order：定义项目的排列顺序。数值越小，排列越靠前，默认为0</li><li>flex-grow:上面讲到当容器设为flex-wrap: nowrap;不换行的时候，容器宽度有不够分的情况，弹性元素会根据flex-grow来决定定义项目的放大比例（容器宽度&gt;元素总宽度时如何伸展）默认为0，即如果存在剩余空间，也不放大</li><li>flex-shrink</li><li>flex-basis</li><li>flex：flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto</li><li>align-self</li></ul><h2 id="css中隐藏元素的方法"><a href="#css中隐藏元素的方法" class="headerlink" title="css中隐藏元素的方法"></a>css中隐藏元素的方法</h2><h3 id="display-none"><a href="#display-none" class="headerlink" title="display:none;"></a><code>display:none;</code></h3><p><strong>元素本身占有的空间就会被其他元素占有，也就是说它会导致浏览器的重排和重绘</strong><br>消失后，<strong>自身绑定的事件不会触发</strong>，也不会有过渡效果<br>特点：元素不可见，不占据空间，无法响应点击事件</p><h3 id="opacity-0"><a href="#opacity-0" class="headerlink" title="opacity:0;"></a><code>opacity:0;</code></h3><p>由于其仍然是存在于页面上的，所以他自身的的事件仍然是可以触发的，但被他遮挡的元素是不能触发其事件的，不会引发重排，一般情况下也会引发重绘<br>需要注意的是：其子元素不能设置<code>opacity</code>来达到显示的效果<br>特点：改变元素透明度，元素不可见，占据页面空间，<strong>可以响应点击事件</strong></p><h3 id="visibility-hidden"><a href="#visibility-hidden" class="headerlink" title="visibility:hidden;"></a><code>visibility:hidden;</code></h3><p>给人的效果是隐藏了，所以他自身的事件不会触发；不会触发重排，但是会触发重绘<br>特点：元素不可见，占据页面空间，无法响应点击事件</p><h3 id="position-absolute-将元素移除可视区域"><a href="#position-absolute-将元素移除可视区域" class="headerlink" title="position:absolute 将元素移除可视区域"></a><code>position:absolute</code> 将元素移除可视区域</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.hide</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: -<span class="number">9999px</span>;</span><br><span class="line">  <span class="attribute">left</span>: -<span class="number">9999px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="display-none-与visibility-hidden"><a href="#display-none-与visibility-hidden" class="headerlink" title="display:none;与visibility:hidden;"></a><code>display:none;</code>与<code>visibility:hidden;</code></h2><ul><li>共同点：都可以让元素不可见</li><li>不同点：1. <code>display:none;</code>会让元素从渲染树中完全消失，不渲染时不占据任何空间。而<code>visibility:hidden</code>不会让元素从渲染树中消失，不渲染时元素继续占据空间，只是内容不可见；</li><li><code>display</code>是非继承属性 <code>visibility</code>是继承属性</li></ul><h2 id="为什么要初始化CSS样式"><a href="#为什么要初始化CSS样式" class="headerlink" title="为什么要初始化CSS样式"></a>为什么要初始化CSS样式</h2><p>因为浏览器有兼容问题，不同浏览器对有些元素的默认样式是不同的，并且默认的样式会影响到项目最终的布局，如果没有CSS初始化，那么有可能会出此浏览器之间的显示页面差异</p><h2 id="盒模型是什么？标准盒模型和怪异盒模型的区别？"><a href="#盒模型是什么？标准盒模型和怪异盒模型的区别？" class="headerlink" title="盒模型是什么？标准盒模型和怪异盒模型的区别？"></a>盒模型是什么？标准盒模型和怪异盒模型的区别？</h2><p>盒模型是描述元素在页面中占据空间的模型，由4部分组成：</p><ul><li>内容区(<code>content</code>)</li><li>内边距(<code>padding</code>)</li><li>边框(<code>border</code>)</li><li>外边距(<code>margin</code>)<br>标准盒模型（<code>content-box</code>）：元素总宽度 &#x3D; <code>width</code> + <code>padding</code> + <code>border</code>(仅指内容区域的宽度)<br>怪异盒模型（<code>border-box</code>）：元素总宽度 &#x3D; <code>width</code>（包含<code>padding</code>和<code>border</code>）(包括内容区域，内边距和边框，但不包括外边距)<br>👉 通过<code>box-sizing: border-box</code>切换</li></ul><h2 id="如何实现一个元素水平垂直居中？（至少说出3种方法）"><a href="#如何实现一个元素水平垂直居中？（至少说出3种方法）" class="headerlink" title="如何实现一个元素水平垂直居中？（至少说出3种方法）"></a>如何实现一个元素水平垂直居中？（至少说出3种方法）</h2><ul><li>定位+<code>margin:auto;</code><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.f</span> &#123;//父元素</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">1200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">900px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: pink;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.s</span> &#123;//子元素</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">  <span class="attribute">background-color</span>: skyblue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>定位+margin:负值<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.f</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">1200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">600px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: pink;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.s</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: -<span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: skyblue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>方法3：定位 + <code>transform </code><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.child</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>Flex布局（推荐）<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>方法2：Grid布局 <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  place-items: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>它允许你在 <code>Grid</code>或<code>Flexbox</code>中可以同时沿着块级和内联方向对齐元素<br>(例如：<code>align-items</code> 和 <code>justify-items</code> 属性) 。如果未提供第二个值，则第一个值作为第二个值的默认值。</li></ul><h2 id="实现元素固定在右下角"><a href="#实现元素固定在右下角" class="headerlink" title="实现元素固定在右下角"></a>实现元素固定在右下角</h2><ol><li><code> position:fixed;</code><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><code>flex</code>布局<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: flex-end;</span><br><span class="line">  <span class="attribute">align-items</span>: flex-end;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="flex-1"><a href="#flex-1" class="headerlink" title="flex:1"></a>flex:1</h2><p>是<code>flex-grow: 1</code>、<code>flex-shrink: 1</code>、<code>flex-basis: 0%</code> 的简写，表示该元素会占据剩余空间。<br>初始大小：<br><code>flex-basis: 0%;</code> 意味着弹性项目在开始时不占据任何空间。这意味着所有的弹性项目都将从零大小开始分配剩余空间。<br>分配剩余空间：<br><code>flex-grow: 1;</code> 表示如果有剩余空间，所有设置了 flex: 1; 的弹性项目将平均分配这些剩余空间。无论弹性项目的实际内容有多少，它们都会平分剩余空间。<br>缩小处理：<br><code>flex-shrink: 1;</code> 表示如果没有足够的空间，所有设置了 flex: 1; 的弹性项目将按比例缩小，直到它们能够全部适应容器的宽度。</p><h2 id="Flex布局中justify-content和align-items的区别是什么？"><a href="#Flex布局中justify-content和align-items的区别是什么？" class="headerlink" title="Flex布局中justify-content和align-items的区别是什么？"></a>Flex布局中justify-content和align-items的区别是什么？</h2><p>justify-content控制主轴（默认水平方向）的排列方式，align-items控制交叉轴（默认垂直方向）的排列方式。<br>👉 补充：如果父元素设置了flex-direction: column，主轴会变成垂直方向！</p><h2 id="Grid-布局"><a href="#Grid-布局" class="headerlink" title="Grid 布局"></a>Grid 布局</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grid-container</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>:grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr <span class="number">2</span>fr;<span class="comment">/* 两列，比例 1:2 */</span></span><br><span class="line">  <span class="attribute">grid-template-rows</span>:<span class="number">100px</span> auto;<span class="comment">/* 第一行固定高度，第二行自适应 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>fr</code>单位：按比例分配剩余空间（类似<code>Flex</code>的<code>flex-grow</code>）。</p><h2 id="flexbox和grid布局"><a href="#flexbox和grid布局" class="headerlink" title="flexbox和grid布局"></a>flexbox和grid布局</h2><p>flexbox适用于一维布局(行或者列)，主要用于对齐和分布空间；<br>grid适用于二维布局(行和列)，可以更灵活的控制布局</p><h2 id="两栏布局（左侧固定，右侧自适应）"><a href="#两栏布局（左侧固定，右侧自适应）" class="headerlink" title="两栏布局（左侧固定，右侧自适应）"></a>两栏布局（左侧固定，右侧自适应）</h2><ol><li>浮动+BFC （左侧浮动，右侧通过BFC避免环绕浮动元素）<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="comment">/* 左侧固定宽度 */</span></span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: pink;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="comment">/* 触发BFC */</span></span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: skyblue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>浮动 + <code>Margin</code>  (左侧浮动，右侧通过 <code>margin-left</code> 留出空间)<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>; <span class="comment">/* 左侧固定宽度 */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">200px</span>; <span class="comment">/* 右侧留出左侧宽度 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>Flex 布局<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>; <span class="comment">/* 左侧固定宽度 */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">1</span>; <span class="comment">/* 右侧自适应 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>Grid 布局<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">200px</span> <span class="number">1</span>fr; <span class="comment">/* 左侧固定宽度，右侧自适应 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="三栏布局"><a href="#三栏布局" class="headerlink" title="三栏布局"></a>三栏布局</h2><ol><li>两边<code>float</code>中间<code>margin-left</code><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: pink;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: right;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: skyblue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.mid</span> &#123;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: purple;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span>左<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span>右<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mid&quot;</span>&gt;</span>中<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>两边<code>absolute</code>，中间<code>margin</code><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: pink;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.mid</span> &#123;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: purple;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: skyblue;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>flex布局<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrap</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: pink;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.mid</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: purple;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: skyblue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>网格布局<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrap</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">300px</span> auto <span class="number">300px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: pink;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.mid</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: purple;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: skyblue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="CSS选择器优先级如何计算？-classA-div-idB和-idB-classA谁的优先级高"><a href="#CSS选择器优先级如何计算？-classA-div-idB和-idB-classA谁的优先级高" class="headerlink" title="CSS选择器优先级如何计算？.classA div#idB和#idB.classA谁的优先级高"></a>CSS选择器优先级如何计算？.classA div#idB和#idB.classA谁的优先级高</h2><p>优先级从高到低：</p><ol><li><code>!important</code></li><li>内联样式（<code>style=&quot;...&quot;</code>）(1000)</li><li>ID 选择器（<code>#id</code>）(100)</li><li>类选择器（<code>.class</code>）、属性选择器（<code>[type=&quot;text&quot;]</code>）、伪类（<code>:hover</code>）(10)</li><li>标签选择器（<code>div</code>）、伪元素（<code>::before</code>）(1)<br>标签前大于号表示子元素选择器(选择直接后代)</li></ol><h2 id="通过CSS选择器把div下面的最后一个p标签选出来"><a href="#通过CSS选择器把div下面的最后一个p标签选出来" class="headerlink" title="通过CSS选择器把div下面的最后一个p标签选出来"></a>通过CSS选择器把div下面的最后一个p标签选出来</h2><ol><li><code>div p:last-child</code>如果最后一个不是<code>p</code>那么将不会选中任何元素</li><li><code>div p:last-of-type</code>会选择其父元素中特定类型的最后一个子元素。</li></ol><h2 id="如何用CSS实现一个三角形？"><a href="#如何用CSS实现一个三角形？" class="headerlink" title="如何用CSS实现一个三角形？"></a>如何用CSS实现一个三角形？</h2><p>透明边框 的作用是占据空间并形成斜角，迫使目标边框收缩为三角形。<br>三角形底边长度 &#x3D; 左右（或上下）边框宽度之和<br>三角形高度 &#x3D; 目标边框的宽度</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.triangle</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border-left</span>: <span class="number">50px</span> solid transparent;</span><br><span class="line">  <span class="attribute">border-right</span>: <span class="number">50px</span> solid transparent;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">100px</span> solid red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.triangle</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border-left</span>: <span class="number">100px</span> solid red;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">100px</span> solid transparent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="用css画一个扇形"><a href="#用css画一个扇形" class="headerlink" title="用css画一个扇形"></a>用css画一个扇形</h2><ol><li>使用使用锥形渐变（<code>conic-gradient</code>）<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.sector</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">background</span>:<span class="built_in">conic-gradient</span>(</span><br><span class="line">    pink <span class="number">0deg</span> <span class="number">90deg</span>,</span><br><span class="line">    transparent <span class="number">90deg</span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="什么是BFC（块级格式化上下文）？如何触发BFC？列举应用场景。"><a href="#什么是BFC（块级格式化上下文）？如何触发BFC？列举应用场景。" class="headerlink" title="什么是BFC（块级格式化上下文）？如何触发BFC？列举应用场景。"></a>什么是BFC（块级格式化上下文）？如何触发BFC？列举应用场景。</h2><p><a href="https://juejin.cn/post/7031065166317879310">https://juejin.cn/post/7031065166317879310</a></p><ul><li>BFC 是一个<strong>独立渲染</strong>的区域，内部元素的布局不会影响外部元素</li><li>触发条件<ul><li><code>overflow:hidden / auto / scroll </code></li><li><code>display: inline-block / table-cell / flex / grid</code></li><li><code>position: absolute / fixed</code></li><li><code>float:left / right</code></li></ul></li><li>应用条件：<ul><li>避免外边距合并： 两个相邻元素的上下外边距会合并，<code>BFC</code> 可隔离他们</li><li>清除浮动：父元素触发<code>BFC</code>可包含浮动子元素</li><li>阻止元素被浮动覆盖：非浮动元素触发<code>BFC</code>后，不会与浮动元素重叠</li></ul></li></ul><h2 id="BFC解决外边距合并问题的原理"><a href="#BFC解决外边距合并问题的原理" class="headerlink" title="BFC解决外边距合并问题的原理"></a>BFC解决外边距合并问题的原理</h2><p>父元素创建<code>BFC</code>后，内部子元素的外边距被限制在父容器内，不会与外部元素的外边距重叠。</p><h2 id="CSS中position-sticky的作用是什么？和fixed有何区别？"><a href="#CSS中position-sticky的作用是什么？和fixed有何区别？" class="headerlink" title="CSS中position: sticky的作用是什么？和fixed有何区别？"></a>CSS中position: sticky的作用是什么？和fixed有何区别？</h2><p>sticky的作用:元素根据滚动位置在相对定位（relative）和固定定位（fixed）之间切换。<br>与 fixed 的区别：</p><ul><li>fixed：直接相对于视口定位，不保留原始空间。</li><li>sticky：在父容器内滚动到阈值（如 top: 10px）后变为固定定位，保留原始空间。</li></ul><h2 id="如何实现一个自适应正方形（宽高相等）的盒子？"><a href="#如何实现一个自适应正方形（宽高相等）的盒子？" class="headerlink" title="如何实现一个自适应正方形（宽高相等）的盒子？"></a>如何实现一个自适应正方形（宽高相等）的盒子？</h2><ul><li><p>利用padding百分比（相对于父元素宽度）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.square</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">padding-top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>padding-top: 50%</code><br>它的 50% 是相对于父元素的宽度来计算的。<br><code>padding</code>的计算是基于父元素的宽度<br>这意味着 .square 元素的上边距会等于它的宽度的 50%（即宽度的一半）。<br>由于内边距是在元素的内容区之上，因此它增加了元素的高度。如果元素宽度是 50%（父容器的 50%），则内边距 padding-top 会让元素的高度变成宽度的 50%，从而使元素的高度等于宽度。</p></li><li><p>使用vw单位</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.square</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50vw</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50vw</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="CSS选择器div-p和div-p的区别是什么？"><a href="#CSS选择器div-p和div-p的区别是什么？" class="headerlink" title="CSS选择器div &gt; p和div p的区别是什么？"></a>CSS选择器div &gt; p和div p的区别是什么？</h2><p>div &gt; p：选择 div 的直接子元素 </p><p>（仅一代）。</p><p>div p：选择 <code>div</code> 的所有后代元素 <code>&lt;p&gt;</code>（不限层级）。<br>在 CSS 中，选择 <code>&lt;div&gt;</code> 中的第一个 <code>&lt;p&gt;</code> 元素有多种方法</p><ul><li><code>first-child</code> ：只有当p是div的第一个子元素时才会生效</li><li><code>first-of-type</code>：即使p不是第一个子元素，只要是第一个p类型元素就会生效</li><li><code>nth-child(1)</code>: 只有当p是div的第一个子元素时才会生效</li><li><code>nth-of-type(1)</code>:即使p不是第一个子元素，只要是第一个p类型元素就会生效<br>在js中<code>const firstP = document.querySelector(&#39;div p&#39;);</code></li></ul><h2 id="瀑布流布局"><a href="#瀑布流布局" class="headerlink" title="瀑布流布局"></a>瀑布流布局</h2><ol><li>第三方库：如 Masonry.js。<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grid&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grid-item&quot;</span>&gt;</span>Item 1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grid-item&quot;</span>&gt;</span>Item 2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grid-item&quot;</span>&gt;</span>Item 3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grid-item&quot;</span>&gt;</span>Item 4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grid-item&quot;</span>&gt;</span>Item 5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grid-item&quot;</span>&gt;</span>Item 6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grid-item&quot;</span>&gt;</span>Item 7<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grid-item&quot;</span>&gt;</span>Item 8<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grid-item&quot;</span>&gt;</span>Item 9<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grid-item&quot;</span>&gt;</span>Item 10<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grid</span> &#123;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">1200px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.grid-item</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">33.333%</span> - <span class="number">20px</span>);</span><br><span class="line">  <span class="comment">/* 减去列间距 */</span></span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: lightblue;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.grid-item</span><span class="selector-pseudo">:nth-child</span>(odd) &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.grid-item</span><span class="selector-pseudo">:nth-child</span>(even) &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;https://unpkg.com/masonry-layout@4/dist/masonry.pkgd.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> grid = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.grid&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> msnry = <span class="keyword">new</span> <span class="title class_">Masonry</span>(grid, &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">itemSelector</span>: <span class="string">&#x27;.grid-item&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">columnWidth</span>: <span class="string">&#x27;.grid-item&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">gutter</span>: <span class="number">20</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">fitWidth</span>: <span class="literal">true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li><li>纯手写<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>Item 1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>Item 2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>Item 3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>Item 4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>Item 5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>Item 6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>Item 7<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>Item 8<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">90%</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">20px</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 项目样式 */</span></span><br><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="comment">/* 固定项目宽度 */</span></span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#f0f0f0</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">0.3s</span> ease;</span><br><span class="line">  <span class="comment">/* 平滑过渡效果 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 为不同项目添加不同高度示例 */</span></span><br><span class="line"><span class="selector-class">.item</span><span class="selector-pseudo">:nth-child</span>(odd) &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.item</span><span class="selector-pseudo">:nth-child</span>(even) &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">250px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">waterfall</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> container = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.container&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> items = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.item&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">GAP</span> = <span class="number">20</span>;          <span class="comment">// 列间距</span></span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">COLUMN_WIDTH</span> = <span class="number">300</span>; <span class="comment">// 列宽</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 计算列数（确保至少1列）</span></span><br><span class="line">  <span class="keyword">const</span> containerWidth = container.<span class="property">offsetWidth</span>;</span><br><span class="line">  <span class="keyword">const</span> columnCount = <span class="title class_">Math</span>.<span class="title function_">max</span>(</span><br><span class="line">    <span class="number">1</span>,</span><br><span class="line">    <span class="title class_">Math</span>.<span class="title function_">floor</span>(containerWidth / (<span class="variable constant_">COLUMN_WIDTH</span> + <span class="variable constant_">GAP</span>))</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 初始化列数据</span></span><br><span class="line">  <span class="comment">//记录每列的当前高度，初始值全为0</span></span><br><span class="line">  <span class="keyword">const</span> colHeights = <span class="keyword">new</span> <span class="title class_">Array</span>(columnCount).<span class="title function_">fill</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="comment">//计算每列最左侧的位置</span></span><br><span class="line">  <span class="keyword">const</span> colPositions = <span class="title class_">Array</span>.<span class="title function_">from</span>(</span><br><span class="line">    &#123; <span class="attr">length</span>: columnCount &#125;,  <span class="comment">// 创建指定长度的空数组</span></span><br><span class="line">    <span class="function">(<span class="params">_, i</span>) =&gt;</span> i * (<span class="variable constant_">COLUMN_WIDTH</span> + <span class="variable constant_">GAP</span>) <span class="comment">// 映射函数</span></span><br><span class="line">  );</span><br><span class="line">  <span class="comment">//通过第二个参数的回调函数进行转换：</span></span><br><span class="line">      <span class="comment">//       (当前元素, 索引) =&gt; 返回值</span></span><br><span class="line">      <span class="comment">//       这里：</span></span><br><span class="line">      <span class="comment">// 使用 _ 忽略第一个参数（因为原始数组元素都是 undefined）</span></span><br><span class="line">    <span class="comment">// 利用索引 i 进行计算</span></span><br><span class="line">    <span class="comment">//[0,320,640]</span></span><br><span class="line">  <span class="comment">// 遍历所有项目进行布局</span></span><br><span class="line">  items.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 找到当前最短列</span></span><br><span class="line">    <span class="keyword">const</span> minHeight = <span class="title class_">Math</span>.<span class="title function_">min</span>(...colHeights);</span><br><span class="line">    <span class="comment">//找出最短列的下标</span></span><br><span class="line">    <span class="keyword">const</span> colIndex = colHeights.<span class="title function_">indexOf</span>(minHeight);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置项目位置</span></span><br><span class="line">    item.<span class="property">style</span>.<span class="property">left</span> = <span class="string">`<span class="subst">$&#123;colPositions[colIndex]&#125;</span>px`</span>;</span><br><span class="line">    item.<span class="property">style</span>.<span class="property">top</span> = <span class="string">`<span class="subst">$&#123;colHeights[colIndex]&#125;</span>px`</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新列高度（包含间距）</span></span><br><span class="line">    colHeights[colIndex] += item.<span class="property">offsetHeight</span> + <span class="variable constant_">GAP</span>;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 设置容器高度（去掉最后一行的多余间距）</span></span><br><span class="line">  container.<span class="property">style</span>.<span class="property">height</span> = <span class="string">`<span class="subst">$&#123;<span class="built_in">Math</span>.max(...colHeights) - GAP&#125;</span>px`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化布局</span></span><br><span class="line"><span class="title function_">waterfall</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加防抖的窗口resize监听</span></span><br><span class="line"><span class="keyword">let</span> resizeTimer;</span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;resize&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">clearTimeout</span>(resizeTimer);</span><br><span class="line">  resizeTimer = <span class="built_in">setTimeout</span>(waterfall, <span class="number">100</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ol><h2 id="clientWidth-offsetWidth-scrollWidth"><a href="#clientWidth-offsetWidth-scrollWidth" class="headerlink" title="clientWidth, offsetWidth, scrollWidth"></a>clientWidth, offsetWidth, scrollWidth</h2><ol><li><code>clientWidth</code>:内容区包括<code>padding</code>的宽度</li><li><code>offsetWidth</code>:实际就是<code>box-sizing: border-box;</code>时元素的真实宽度</li><li><code>scrollWidth</code>:溢出的文字长度只使用了 <code>box</code> 的 <code>padding-left</code>，而 <code>padding-right</code> 还在盒子本体内。所以 <code>390px</code> 实际上就是 文字区域 + <code>box</code> 的 <code>padding-left</code> 区域的宽度。现在让我们给 <code>box</code> 设置为 <code>overflow:auto</code>。此时我们会观察到<code>scrollwidth</code>变为了 <code>400px</code>。因为此时我们的 <code>span</code> 元素被完全 “限制” 在了 <code>box</code> 中，那么此时 <code>box</code> 的 <code>scrollwidth</code> 计算方式就变成了 <code>span</code> 的宽度 <code>380px</code> + <code>padding-left</code> + <code>padding-right</code> &#x3D; <code>380 + 10 +10</code>  也就是 <code>400 px</code>。</li></ol><h2 id="css实现自适应布局"><a href="#css实现自适应布局" class="headerlink" title="css实现自适应布局"></a>css实现自适应布局</h2><ol><li>媒体查询</li><li>使用相对单位如(百分比%和<code>rem</code>)避免使用绝对单位<code>px</code></li><li>流式布局：通过使用百分比而不是固定的像素值来定义元素的宽度和间距，使得布局可以随浏览器窗口大小调整而自动调整。</li></ol><h2 id="css常用单位"><a href="#css常用单位" class="headerlink" title="css常用单位"></a>css常用单位</h2><ol><li>绝对单位：在不同设备上的显示大小是固定的如<code>px</code>,<code>in</code>(英寸)，<code>cm</code>,<code>mm</code></li><li>相对单位：基于其他元素的大小或视窗大小变化而变化。如<code>em</code>,<code>rem</code>,<code>%</code>,<code>vw</code>,<code>vh</code>,<code>vmax</code>,<code>vmin</code></li></ol><h2 id="文本加粗、下划线等如何实现"><a href="#文本加粗、下划线等如何实现" class="headerlink" title="文本加粗、下划线等如何实现"></a>文本加粗、下划线等如何实现</h2><ol><li>用<code>&lt;u&gt;&lt;/u&gt;</code>下划线，<code>&lt;b&gt;&lt;/b&gt;</code>加粗</li><li><code>text-decoration: underline;</code> 和 <code>font-weight: bold;</code></li><li><code>border-bottom: 2px solid #000;font-weight: bold;</code>700等同于<code>bold</code>, 400等同于<code>normal</code></li></ol><h2 id="移动端1px边框问题的解决方案"><a href="#移动端1px边框问题的解决方案" class="headerlink" title="移动端1px边框问题的解决方案"></a>移动端1px边框问题的解决方案</h2><h2 id="em与rem"><a href="#em与rem" class="headerlink" title="em与rem"></a>em与rem</h2><p><code>em</code>是相对于<strong>父元素的字体大小</strong>来说的<br><code>rem</code>是相对于**<code>html</code>元素**的字体大小来说的<br><code>rem</code>的优点是可以通过修改<code>html</code>里面的文字大小来改变页面中的元素的大小</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">3rem</span>;</span><br><span class="line">  <span class="comment">/* 48 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h2</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">2em</span>;</span><br><span class="line">  <span class="comment">/* 48*2=96px */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">2rem</span>;</span><br><span class="line">  <span class="comment">/* 32px */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="媒体查询可以针对不同的屏幕尺寸设置不同的样式"><a href="#媒体查询可以针对不同的屏幕尺寸设置不同的样式" class="headerlink" title="媒体查询可以针对不同的屏幕尺寸设置不同的样式"></a>媒体查询可以针对不同的屏幕尺寸设置不同的样式</h2><p>@media mediatype and|not|only 媒体特性</p><p>mediatype: all(用于所有设备) print(用于打印机和打印预览) screen （用于电脑屏幕，平板电脑，智能手机等）<br>and: 将多个媒体特性连接到一起，相当于且的意思<br>not:排除某个媒体类型，相当于非的意思，可以省略<br>only: 置顶某个特定的媒体类型，可以省略</p><p>媒体特性</p><table><thead><tr><th align="center">值</th><th align="center">解释说明</th></tr></thead><tbody><tr><td align="center">width</td><td align="center">定义输出设备中页面可见区域的宽度</td></tr><tr><td align="center">min-width</td><td align="center">定义输出设备中页面最小可见区域宽度</td></tr><tr><td align="center">max-width</td><td align="center">定义输出设备中页面最大可见区域宽度</td></tr></tbody></table><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>:<span class="number">800px</span>)&#123;</span><br><span class="line">  <span class="comment">/* max-width：小于等于800px */</span></span><br><span class="line">  <span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>:pink</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="媒体查询中min-width和max-width的匹配规则"><a href="#媒体查询中min-width和max-width的匹配规则" class="headerlink" title="媒体查询中min-width和max-width的匹配规则"></a>媒体查询中min-width和max-width的匹配规则</h2><p><code>min-width</code>大于等于<br><code>max-width</code>小于等于</p><h2 id="cookies-sessionStorage和localStorage的区别"><a href="#cookies-sessionStorage和localStorage的区别" class="headerlink" title="cookies,sessionStorage和localStorage的区别"></a>cookies,sessionStorage和localStorage的区别</h2><p>共同点：都是保存在浏览器端，且是同源的。<br><strong><code>cookies</code></strong><br>是网站用来标记用户身份的一段数据，通常情况下是一段<strong>加密的字符串</strong>，并且默认情况下**只会在同源的HTTP(同域名同端口同协议)**请求中携带;容量小；较安全；通过 <code>Cookie</code> 请求头自动发送到服务器；同域名、同路径;</p><ul><li><code>Expires</code> 用于设置<code> Cookie</code> 的过期时间</li><li><code>Max-Age</code> 用于设置在<code> Cookie</code> 失效之前需要经过的秒数（优先级比<code>Expires</code>高）</li><li><code>Domain</code>指定了 <code>Cookie</code> 可以送达的主机名</li><li>最后<code>cookie</code>的删除，最常用的方法就是给<code>cookie</code>设置一个过期的事件，这样<code>cookie</code>过期后会被浏览器删除</li></ul><p><strong><code>sessionStorage</code></strong><br>是浏览器本地存储的一种方式，以<strong>键值对</strong>的形式进行存储，并且<strong>存储的数据会在浏览器关闭之后自动删除</strong>；无内置安全机制，易受 <code>XSS</code> 攻击；同域名、<strong>仅当前标签页</strong></p><p><strong><code>localStorage</code></strong><br>是浏览器本地存储的一种方式，和<code>sessionStorage</code>一样，也是以<strong>键值对</strong>的形式存在，不过它存储的是一个<strong>持久化</strong>的数据，这些数据不会随着页面刷新或关闭而丢失，并且可以在同一个域名下的不同页面之间共享。无内置安全机制，易受 <code>XSS</code> 攻击；同域名、跨标签页;<br>缺点：</p><ul><li>无法像Cookie一样设置过期时间</li><li>只能存入字符串，无法直接存对象<br>需要与服务器交互的小数据 → <code>Cookie</code><br>长期保存的客户端数据 → <code>localStorage</code><br>临时会话数据 → <code>sessionStorage</code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 存储数据</span></span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;key&#x27;</span>, <span class="string">&#x27;value&#x27;</span>);</span><br><span class="line"><span class="comment">// 获取数据</span></span><br><span class="line"><span class="keyword">const</span> value = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;key&#x27;</span>);</span><br><span class="line"><span class="comment">// 删除某一项</span></span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&#x27;key&#x27;</span>);</span><br><span class="line"><span class="comment">// 清空所有数据</span></span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">clear</span>();</span><br></pre></td></tr></table></figure>发送 <code>Token</code> 需要通过 <code>HTTP</code> 请求头（如 <code>Authorization</code> 头），而不是 <code>Local Storage</code> 自动发送。(一般写在请求拦截器中)<br>三者区别：</li></ul><ol><li><p>存储大小：<code>cookie</code>数据大小不能超过4k，<code>sessionStorage</code>和<code>localStorage</code>虽然也有存储大小的限制，但比<code>cookie</code>大得多，可以达到5M或更大</p></li><li><p>有效时间：<code>localStorage</code>存储持久数据，浏览器关闭后数据不丢失除非主动删除数据； <code>sessionStorage</code>数据在当前浏览器窗口关闭后自动删除；<code>cookie</code>设置的<code>cookie</code>过期时间之前一直有效，即使窗口或浏览器关闭</p></li><li><p>数据与服务器之间的交互方式，<code>cookie</code>的数据会自动的传递到服务器，服务器端也可以写<code>cookie</code>到客户端； <code>sessionStorage</code>和<code>localStorage</code>不会自动把数据发给服务器，仅在本地保存</p></li></ol><h2 id="css预处理器如-less-Sass"><a href="#css预处理器如-less-Sass" class="headerlink" title="css预处理器如(less,Sass)"></a>css预处理器如(less,Sass)</h2><p>提供了变量，嵌套，混合，函数等功能，使得编写css更高效</p><ul><li>变量：可以定义颜色，字体等变量，方便复用</li><li>嵌套：可以嵌套选择器，减少代码重复</li><li>混合：可以定义可重用的样式块</li><li>函数：可以编写复杂的逻辑和计算</li></ul><h2 id="css可以被继承的属性"><a href="#css可以被继承的属性" class="headerlink" title="css可以被继承的属性"></a>css可以被继承的属性</h2><ul><li>字体属性：包括<code>font</code>、<code>font-family</code>、<code>font-weight</code>、<code>font-size</code>、<code>font-style</code></li><li>文本属性： 内联元素：<code>color</code>、<code>line-height</code>、<code>word-spacing</code>、<code>letter-spacing</code>、<code>text-transform</code>。 块级元素：<code>text-indent</code>、<code>text-align</code>。</li><li>元素可见性：<code>visibility</code>,<code>opacity</code></li><li>表格布局属性：<code>caption-side</code>、<code>border-collapse</code>、<code>border-spacing</code>、<code>empty-cells</code>、<code>table-layout</code></li><li>列表布局属性：<code>list-style</code></li></ul><h2 id="css不能被继承的属性"><a href="#css不能被继承的属性" class="headerlink" title="css不能被继承的属性"></a>css不能被继承的属性</h2><ul><li>边框属性：<code>border</code></li><li>内边距属性：<code>padding</code></li><li>外边距属性：<code>margin</code></li><li>定位属性：<code>position</code></li><li>大小属性：<code>width</code>、<code>height</code></li><li>背景属性：<code>background</code></li><li>盒模型属性：<code>box-sizing</code></li><li>显示属性：<code>display</code></li><li>文本属性：<code>vertical-align</code>、<code>text-decoration</code></li></ul><h2 id="元素的alt和title有什么异同？"><a href="#元素的alt和title有什么异同？" class="headerlink" title="元素的alt和title有什么异同？"></a>元素的alt和title有什么异同？</h2><p>在alt和title同时设置的时候，alt作为图片的替代文字出现，title是图片的解释文字。</p><h2 id="title与h1的区别、b与strong的区别、i与em的区别？"><a href="#title与h1的区别、b与strong的区别、i与em的区别？" class="headerlink" title="title与h1的区别、b与strong的区别、i与em的区别？"></a>title与h1的区别、b与strong的区别、i与em的区别？</h2><p><code>title</code>属性没有明确意义，只表示标题；<code>h1</code>表示层次明确的标题，对页面信息的抓取也有很大的影响<br><code>strong</code>标明重点内容，语气加强含义；<code>b</code>是无意义的视觉表示<br><code>em</code>表示强调文本；<code>i</code>是斜体，是无意义的视觉表示<br>视觉样式标签：b,i,u,s<br>语义样式标签：<code>strong</code> <code>em</code> <code>ins</code> <code>del</code> <code>code</code></p><h2 id="实现渐变色边框"><a href="#实现渐变色边框" class="headerlink" title="实现渐变色边框"></a>实现渐变色边框</h2><ol><li>使用<code>border-image</code>和<code>linear-gradient</code><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">10px</span> solid transparent;</span><br><span class="line">  <span class="attribute">background</span>:</span><br><span class="line">    <span class="built_in">linear-gradient</span>(white, white) padding-box,</span><br><span class="line">    <span class="built_in">linear-gradient</span>(to right, red, orange, yellow, green, blue, indigo, violet) border-box;</span><br><span class="line">  <span class="attribute">border-image</span>: <span class="built_in">linear-gradient</span>(to right, red, orange, yellow, green, blue, indigo, violet) <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><code>background</code>定义了两个背景层：</li></ol><ul><li>第一层背景：<br><code>linear-gradient(white, white) padding-box</code><br>这是一个纯白色（从白色到白色的线性渐变）的背景图层，应用在 <code>padding-box</code> 区域。<code>padding-box</code> 指的是包含内边距（<code>padding</code>）的区域，但不包括边框（<code>border</code>）。</li><li>第二层背景：<br><code>linear-gradient(to right, red, orange, yellow, green, blue, indigo, violet) border-box</code><br>这是一个从红色到紫色的多色线性渐变背景图层，应用在 <code>border-box</code> 区域。<code>border-box</code> 包含了边框、内边距和内容区域。<br><code>border-image: source slice width outset repeat|initial|inherit;</code><br><code>slice</code>是从四个角向内切割<br><code>border-image-repeat</code>用于设置图像边界是否应重复（<code>repeat</code>）、拉伸（<code>stretch</code>）或铺满（<code>round</code>）。</li></ul><ol start="2"><li><p>使用伪元素(<code>::before</code> 或 <code>::after</code>) 实现</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></li><li></li></ol><h2 id="在使用scoped之后，怎么在父元素中覆盖子元素的样式"><a href="#在使用scoped之后，怎么在父元素中覆盖子元素的样式" class="headerlink" title="在使用scoped之后，怎么在父元素中覆盖子元素的样式"></a>在使用scoped之后，怎么在父元素中覆盖子元素的样式</h2><h2 id="回流与重绘"><a href="#回流与重绘" class="headerlink" title="回流与重绘"></a>回流与重绘</h2><p><strong>回流</strong>：当我们对<code>DOM</code> 的修改引发了<code>DOM</code>几何尺寸的变化（比如修改元素的宽、高或隐藏元素等）时，浏览器需要重新计算<strong>元素的几何属性</strong>，然后再将计算的结果绘制出来</p><p>当我们对<code>DOM</code>的修改导致了样式的变化（<code>color</code>或<code>background-color</code>），却并未影响其几何属性时，浏览器不需重新计算元素的几何属性、直接为该元素绘制新的样式，这里就仅仅触发了重绘</p><h3 id="回流触发时机："><a href="#回流触发时机：" class="headerlink" title="回流触发时机："></a>回流触发时机：</h3><ul><li>添加或删除可见的<code>DOM</code>元素</li><li>元素的<strong>位置</strong>发生变化</li><li>元素的<strong>尺寸</strong>发生变化（包括外边距、内边框、边框大小、高度和宽度等）</li><li><strong>内容</strong>发生变化，比如文本变化或图片被另一个不同尺寸的图片所替代</li><li>页面一开始渲染的时候（这避免不了）</li><li>浏览器的窗口尺寸变化（因为回流是根据视口的大小来计算元素的位置和大小的）<br>还有一些容易被忽略的操作：获取一些特定属性的值<br><code>offsetTop、offsetLeft、 offsetWidth、offsetHeight、scrollTop、scrollLeft、scrollWidth、scrollHeight、clientTop、clientLeft、clientWidth、clientHeight</code><br>这些属性有一个共性，就是需要通过即时计算得到。因此浏览器为了获取这些值，也会进行回流</li></ul><p>除此还包括<code>getComputedStyle</code>方法，原理是一样的<br><strong>注意</strong><br><code>transform</code>操作（包括平移、旋转、缩放）通常不会触发重排，而只会触发重绘。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.element</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">50px</span>, <span class="number">100px</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.element</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">45deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.element</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1.5</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="重绘触发时机"><a href="#重绘触发时机" class="headerlink" title="重绘触发时机"></a>重绘触发时机</h3><p><strong>触发回流一定会触发重绘</strong><br>可以把页面理解为一个黑板，黑板上有一朵画好的小花。现在我们要把这朵从左边移到了右边，那我们要先确定好右边的具体位置，画好形状（回流），再画上它原有的颜色（重绘）<br>除此之外还有一些其他引起重绘行为：</p><ul><li>颜色的修改</li><li>文本方向的修改</li><li>阴影的修改</li></ul><h3 id="避免回流的经验"><a href="#避免回流的经验" class="headerlink" title="避免回流的经验"></a>避免回流的经验</h3><ol><li>如果想设定元素的样式，通过改变元素的 <code>class</code> 类名 (尽可能在 <code>DOM</code> 树的最里层)<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取要操作的元素</span></span><br><span class="line"><span class="keyword">var</span> element = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.your-element-selector&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加一个类</span></span><br><span class="line">element.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;new-class&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 移除一个类</span></span><br><span class="line">element.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;old-class&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 切换一个类（如果类存在则移除它，如果不存在则添加）</span></span><br><span class="line">element.<span class="property">classList</span>.<span class="title function_">toggle</span>(<span class="string">&#x27;toggle-class&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li>避免设置多项内联样式</li><li>应用元素的动画，使用<code>position</code> 属性的 <code>fixed</code> 值或 <code>absolute</code> 值(如前文示例所提)</li><li>避免使用 <code>table</code> 布局，<code>table</code> 中每个元素的大小以及内容的改动，都会导致整个 <code>table</code> 的重新计算</li><li>对于那些复杂的动画，对其设置 <code>position</code>: <code>fixed</code>&#x2F;<code>absolute</code>，尽可能地使元素脱离文档流，从而减少对其他元素的影响</li><li>使用<code>css3</code>硬件加速，可以让<code>transform</code>、<code>opacity</code>、<code>filters</code>这些动画不会引起回流重绘</li><li>避免使用 <code>CSS</code> 的 <code>JavaScript</code> 表达式</li></ol><h2 id="过渡和动画的区别"><a href="#过渡和动画的区别" class="headerlink" title="过渡和动画的区别"></a>过渡和动画的区别</h2><p><code>transition</code>需要触发一个事件才会随着时间改变其CSS属性；<code>animation</code>在不需要任何事件的情况下，也可以显示的随时间来改变元素的<code>css</code>属性，达到一种动画的效果<br>也就是</p><ol><li>动画不需要触发事件，过渡需要</li><li>过渡只有一组（开始，结束）关键帧，动画可以设置多个</li><li><code>transition</code>不能直接修改CSS属性，而<code>animation</code>可以</li><li><code>transition</code>不能一直循环一个动作，<code>animation</code>可以</li><li><code>transition</code>子属性少，而多</li></ol><h2 id="多行省略"><a href="#多行省略" class="headerlink" title="多行省略"></a>多行省略</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line"><span class="comment">/* 现代浏览器支持的标准属性 */</span></span><br><span class="line">  <span class="attribute">display</span>: -webkit-box;</span><br><span class="line">  <span class="comment">/* 必须保留以支持WebKit浏览器 */</span></span><br><span class="line">  -webkit-box-orient: vertical;</span><br><span class="line">  -webkit-<span class="selector-tag">line</span>-clamp: <span class="number">4</span>;</span><br><span class="line">  <span class="attribute">display</span>: -webkit-box;</span><br><span class="line">  <span class="comment">/* 需要重复以确保兼容性 */</span></span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">  <span class="attribute">white-space</span>: normal;</span><br><span class="line">  <span class="comment">/* 允许换行 */</span></span><br><span class="line">  <span class="attribute">word-wrap</span>: break-word;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>单行省略：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">  <span class="attribute">overflow</span>:hidden;</span><br><span class="line">  <span class="attribute">text-overflow</span>:ellipsis;</span><br><span class="line">  <span class="attribute">white-space</span>:nowrap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CSS不用border创建边框"><a href="#CSS不用border创建边框" class="headerlink" title="CSS不用border创建边框"></a>CSS不用<code>border</code>创建边框</h2><ol><li><code>box-shadow:x轴偏移 y轴偏移 模糊半径 扩散半径 颜色</code><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: white;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> black;</span><br><span class="line">  <span class="comment">/* 第四个值是扩展半径，用于模拟边框宽度 */</span></span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>伪元素+定位<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: white;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: -<span class="number">5px</span>;</span><br><span class="line">  <span class="comment">/* 边框宽度的一半 */</span></span><br><span class="line">  <span class="attribute">left</span>: -<span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">right</span>: -<span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: -<span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">5px</span> solid black;</span><br><span class="line">  <span class="attribute">z-index</span>: -<span class="number">1</span>;</span><br><span class="line">  <span class="comment">/* 确保伪元素在背景之下 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><code>outline</code><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">outline</span>: <span class="number">5px</span> solid black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="伪类和伪元素"><a href="#伪类和伪元素" class="headerlink" title="伪类和伪元素"></a>伪类和伪元素</h2><table><thead><tr><th>种类</th><th>语法</th><th>数量</th><th>位置</th><th>类与元素</th></tr></thead><tbody><tr><td>伪类</td><td>：</td><td>多个</td><td>前方和后方</td><td>修饰</td></tr><tr><td>伪元素</td><td>：：</td><td>单个</td><td>后方</td><td>创建对象</td></tr></tbody></table><p>伪类：<br>状态类：<code>:link</code>,<code>:visited</code>,<code>:hover</code>,<code>:active</code>,<code>:focus</code><br>结构类：<code>:first-child</code>,<code>:last-child</code>,<code>:nth-child</code>,<code>:nth-of-type</code><br>表单类：<br>语言类：</p><h2 id="flex：1和width：100％区别，样式表现是什么？"><a href="#flex：1和width：100％区别，样式表现是什么？" class="headerlink" title="flex：1和width：100％区别，样式表现是什么？"></a><code>flex：1</code>和<code>width：100％</code>区别，样式表现是什么？</h2><p><strong><code>width: 100%</code> 的行为</strong><br>作用：将元素的宽度强制设置为<strong>父容器的宽度</strong>。<br><strong>依赖父容器的布局</strong>：父容器必须是<strong>块级元素</strong>且<strong>具有明确宽度</strong><br><strong>适用场景：</strong></p><ol><li>简单全宽布局，无需动态调整。</li><li>非 <code>Flex</code> 容器中的子元素。<br><strong><code>flex:1;</code>的行为</strong><br><code>flex:1;</code>是<code>flex-grow:1;flex-shrink:1;flex-basis:0%;</code>的简写<br><code>flex-basis: 0%;</code> 表示初始宽度为<code>0</code><br><strong>根据剩余空间按比例分配</strong></li></ol><h2 id="html如何实现图片响应式"><a href="#html如何实现图片响应式" class="headerlink" title="html如何实现图片响应式"></a>html如何实现图片响应式</h2><p>使用 <code>srcset</code> 和 <code>sizes</code> 属性<br>这两个属性允许浏览器根据屏幕条件选择最合适的图片源。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">src</span>=<span class="string">&quot;default.jpg&quot;</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">srcset</span>=<span class="string">&quot;small.jpg 480w, medium.jpg 768w, large.jpg 1200w&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">sizes</span>=<span class="string">&quot;(max-width: 600px) 480px, 800px&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">alt</span>=<span class="string">&quot;响应式图片示例&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br></pre></td></tr></table></figure><p><code>srcset</code>：指定不同宽度（或像素密度）的图片源，格式为 文件名 宽度描述符w 或 文件名 像素密度描述符x。</p><p>例如：<code>small.jpg 480w</code> 表示图片宽度为<code>480px</code>。</p><p><code>sizes</code>：定义媒体查询条件下的图片显示尺寸。浏览器根据当前视口选择匹配的条件。</p><p>例如：视口<code>≤600px</code>时，图片显示宽度为<code>480px</code>；否则为<code>800px</code>。</p><h2 id="set和map"><a href="#set和map" class="headerlink" title="set和map"></a>set和map</h2><h3 id="set-成员的值都是唯一的，没有重复的值"><a href="#set-成员的值都是唯一的，没有重复的值" class="headerlink" title="set:成员的值都是唯一的，没有重复的值"></a>set:成员的值都是唯一的，没有重复的值</h3><ul><li><code>Set</code>的实例关于增删改查的方法：<ul><li><code>add()</code>:添加某个值，返回 <code>Set </code>结构本身(可以链式调用),当添加实例中已经存在的元素，<code>set</code>不会进行处理添加</li><li><code>delete()</code>:删除某个值，返回一个布尔值，表示删除是否成功</li><li><code>has()</code>:返回一个布尔值，判断该值是否为<code>Set</code>的成员</li><li><code>clear()</code>:清除所有成员，没有返回值</li></ul></li><li>遍历：<ul><li><code>keys()</code>：返回键名的遍历器</li><li><code>values()</code>：返回键值的遍历器</li><li><code>entries()</code>：返回键值对的遍历器</li><li><code>forEach()</code>：使用回调函数遍历每个成员<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> set.<span class="title function_">entries</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="map"><a href="#map" class="headerlink" title="map:"></a>map:</h3><ul><li>size 属性</li><li>set():<code>map.set(&#39;foo&#39;, true);</code></li><li>get():<code>get</code>方法读取<code>key</code>对应的键值，如果找不到<code>key</code>，返回<code>undefined</code></li><li>has():</li><li>delete()</li><li>clear()</li></ul><h3 id="WeakSet"><a href="#WeakSet" class="headerlink" title="WeakSet"></a>WeakSet</h3><p>在API中<code>WeakSet</code>与Set有两个区别：</p><ul><li>没有遍历操作的API</li><li>没有size属性<br><code>WeakSet</code>只能成员只能是引用类型，而不能是其他类型的值<br><code>WeakSet</code>里面的引用只要在外部消失，它在 <code>WeakSet</code>里面的引用就会自动消失</li></ul><h3 id="WeakMap"><a href="#WeakMap" class="headerlink" title="WeakMap"></a>WeakMap</h3><p>在API中WeakMap与Map有两个区别：</p><ul><li>没有遍历操作的API</li><li>没有clear清空方法<br>WeakMap只接受对象作为键名（null除外），不接受其他类型的值作为键名<br>WeakMap的键名所指向的对象，一旦不再需要，里面的键名对象和所对应的键值对会自动消失，不用手动删除引用</li></ul><h2 id="css元素浮动会导致什么，怎么解决，怎么取消浮动？"><a href="#css元素浮动会导致什么，怎么解决，怎么取消浮动？" class="headerlink" title="css元素浮动会导致什么，怎么解决，怎么取消浮动？"></a>css元素浮动会导致什么，怎么解决，怎么取消浮动？</h2><ol><li><strong>父元素高度塌陷</strong>：当子元素被设置为浮动时，它们会脱离正常的文档流。如果所有子元素都浮动，那么父元素的高度将变为0（因为父元素认为它的内部没有内容），这可能导致父元素无法正确包裹其子元素。</li><li><strong>相邻元素位置异常</strong>：浮动元素会影响周围非浮动元素的位置。例如，非浮动元素可能会试图占据浮动元素留下的空间。<br><strong>清除浮动</strong></li><li>使用 <code>clear</code> 属性：<br>在父元素的最后一项之后添加一个带有 <code>clear</code> 样式的元素，如一个空的 <code>div</code>。<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;floated&quot;</span>&gt;</span>Float me!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;floated&quot;</span>&gt;</span>Float me too!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;clear: both;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="comment">&lt;!-- 清除浮动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>使用伪元素<code>::after</code>:在父元素上使用<code>::after</code>伪元素并应用<code>clear:both;</code><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">  <span class="attribute">content</span>:<span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="attribute">display</span>:block;</span><br><span class="line">  <span class="attribute">clear</span>:both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="W3C标准"><a href="#W3C标准" class="headerlink" title="W3C标准"></a>W3C标准</h2><p>万维网联盟标准不是某一个标准，而是一些列标准的集合。网页主要有三部分组成：结构（<code>XHTML</code>和<code>XML</code>）、表现（<code>CSS</code>）、行为（<code>DOM</code>）。<br>标准规范：</p><ol><li>需要声明（<code>DOCTYPE</code>）文档类型的简写，用来说明你用的<code>XHTML</code>或者<code>HTML</code>是什么版本；</li><li>需要定义语言编码<code>&lt;meta http-equiv=“Content-Type” content=“text/html; charset=gb2312” /&gt;</code></li><li><code>JavaScript</code>定义<code>&lt;script language=&quot;javascript&quot; type=&quot;text/javascript&quot;&gt;</code>以保证在不支持js的浏览器上直接显示出来。</li><li><code>CSS</code>必须要用<code>&lt;style type=&quot;text/css&quot;&gt;</code>开头来定义，为保证各浏览器的兼容性，在写<code>CSS</code>时请都写上数量单位</li><li>使用注释</li></ol><h2 id="父元素里有子元素，给子元素设置margin-top-50-父盒子和子盒子一块塌陷"><a href="#父元素里有子元素，给子元素设置margin-top-50-父盒子和子盒子一块塌陷" class="headerlink" title="父元素里有子元素，给子元素设置margin-top:50;父盒子和子盒子一块塌陷"></a>父元素里有子元素，给子元素设置margin-top:50;父盒子和子盒子一块塌陷</h2><ol><li>给父盒子加一个内边距<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrap</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: pink;</span><br><span class="line">  <span class="attribute">padding-top</span>: <span class="number">1px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: skyblue;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>给父元素加一个透明边框<code>border-top: 1px solid transparent;</code></li><li>为父元素设置 <code>overflow</code> 属性为 <code>hidden</code> 或 <code>auto</code> 可以创建一个新的块格式化上下文（<code>BFC</code>），从而防止外边距折叠。</li><li>使用伪元素:可以通过在父元素中插入一个伪元素来阻止外边距折叠。<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="attribute">display</span>: table;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.child</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="z-index设置成最大值，但是没有起作用，觉得是什么原因"><a href="#z-index设置成最大值，但是没有起作用，觉得是什么原因" class="headerlink" title="z-index设置成最大值，但是没有起作用，觉得是什么原因"></a>z-index设置成最大值，但是没有起作用，觉得是什么原因</h2><ol><li><strong>定位属性未设置</strong><br><code>z-index</code> 只对定位元素有效。定位元素指的是具有以下任意一种 <code>position</code> 值的元素：<code>relative</code>、<code>absolute</code>、<code>fixed</code> 或 <code>sticky</code>。如果元素的 <code>position</code> 属性是默认的 <code>static</code>，那么 <code>z-index</code> 将不会生效。</li><li><strong>父级元素的 overflow 属性</strong><br>如果父级元素设置了 <code>overflow</code> 属性（如 <code>overflow: hidden </code>或 <code>overflow: auto</code>），它可能会限制子元素的 <code>z-index</code>行为，导致子元素无法超出父级元素的边界。</li><li><strong>样式优先级问题</strong><br>有时候，虽然你在样式表中设置了 <code>z-index</code>，但由于 <code>CSS</code>样式的优先级问题，实际应用的样式可能不是你期望的。例如，内联样式、<code>!important</code> 声明或其他更高优先级的选择器可能会覆盖你的 <code>z-index</code> 设置。</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>算法</title>
      <link href="/2025/01/24/%E7%AE%97%E6%B3%95/"/>
      <url>/2025/01/24/%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="二分"><a href="#二分" class="headerlink" title="二分"></a>二分</h1><p>循环的条件就是未确定区间的元素的个数不为0<br>不管是哪种方法，target都被归为右边的那个集合中，所以更改右边界的时候包括<code>nums[mid]&lt;target</code>这一可能</p><h2 id="闭区间-0-n-1"><a href="#闭区间-0-n-1" class="headerlink" title="闭区间[0,n-1]"></a>闭区间[0,n-1]</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">bin</span>(<span class="params">nums,target</span>)&#123;</span><br><span class="line">  <span class="keyword">let</span> left = <span class="number">0</span>,right = nums.<span class="property">length</span>-<span class="number">1</span></span><br><span class="line">  <span class="keyword">while</span>(left&lt;=right)&#123;</span><br><span class="line">    <span class="keyword">let</span> mid = <span class="title class_">Math</span>.<span class="title function_">floor</span>((left+right)/<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">if</span>(nums[mid]&gt;=target) right = mid -<span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span> left = mid + <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// return left</span></span><br><span class="line">  <span class="keyword">return</span> right+<span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="左闭右开区间-0-n"><a href="#左闭右开区间-0-n" class="headerlink" title="左闭右开区间[0,n)"></a>左闭右开区间[0,n)</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">bin</span>(<span class="params">nums,target</span>)&#123;</span><br><span class="line">  <span class="keyword">let</span> left = <span class="number">0</span>,right = nums.<span class="property">length</span></span><br><span class="line">  <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">    <span class="keyword">let</span> mid = <span class="title class_">Math</span>.<span class="title function_">floor</span>((left+right)/<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">if</span>(nums[mid]&lt;target) left = mid + <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span> right=mid</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// return left </span></span><br><span class="line">  <span class="keyword">return</span> right</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="开区间-1-n"><a href="#开区间-1-n" class="headerlink" title="开区间(-1,n)"></a>开区间(-1,n)</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">bin</span>(<span class="params">nums,target</span>)&#123;</span><br><span class="line">  <span class="keyword">let</span> left = -<span class="number">1</span>,right = nums.<span class="property">length</span></span><br><span class="line">  <span class="keyword">while</span>(left+<span class="number">1</span>&lt;right)&#123;</span><br><span class="line">    <span class="keyword">let</span> mid = <span class="title class_">Math</span>.<span class="title function_">floor</span>((left+right)/<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">if</span>(nums[mid]&lt;target) left = mid </span><br><span class="line">    <span class="keyword">else</span> right = mid</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> right</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><p>遍历每一个元素，每次都选出这一趟中最小的一个元素与开头元素进行比较，交换位置</p><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><p>找到一个基准元素，分为两堆，左边指针往右移，右边指针往左移；如果右边元素小于基准元素就移到左下标的位置，如果大于基准元素就继续左移；如果左指针指向元素大于基准元素，就将该元素赋值给右下标的元素，如果小于基准元素就继续右移；</p><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><p>比较相邻的元素，如果序列是逆序，就交换；所以确定的元素的位置都在右边；</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>关于js</title>
      <link href="/2025/01/18/%E5%85%B3%E4%BA%8Ejs/"/>
      <url>/2025/01/18/%E5%85%B3%E4%BA%8Ejs/</url>
      
        <content type="html"><![CDATA[<h1 id="js"><a href="#js" class="headerlink" title="js"></a>js</h1><h2 id="undefined-与-null"><a href="#undefined-与-null" class="headerlink" title="undefined 与 null"></a>undefined 与 null</h2><p><code>console.log(typeof null)</code>&#x2F;&#x2F;object<br><code>console.log(typeof undefined)</code>&#x2F;&#x2F;undefined</p><h3 id="undefined的四种情况"><a href="#undefined的四种情况" class="headerlink" title="undefined的四种情况"></a>undefined的四种情况</h3><ol><li>定义了一个对象但没有赋值<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> o</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o)<span class="comment">//undefined</span></span><br></pre></td></tr></table></figure></li><li>对象的某个属性不存在<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> o = &#123;&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o.<span class="property">a</span>)<span class="comment">//undefined</span></span><br></pre></td></tr></table></figure></li><li>函数调用少参数<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a, b)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">f</span>(<span class="number">4</span>)<span class="comment">//4 undefined</span></span><br></pre></td></tr></table></figure></li><li>函数的默认返回值<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">f1</span>())<span class="comment">//undefined</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="null"><a href="#null" class="headerlink" title="null"></a>null</h3><ol><li>手动释放内存<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj=&#123;&#125;</span><br><span class="line">obj=<span class="literal">null</span></span><br></pre></td></tr></table></figure></li><li>作为函数的参数（此参数不是对象）</li><li>原型链的顶端</li></ol><h2 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h2><ol><li>没有返回值</li><li>不能用break打断</li><li>遍历的是value<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">value,</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value+<span class="string">&#x27;a&#x27;</span><span class="comment">//undefined</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><ol><li>有返回值（数组），默认<code>return</code> 是<code>undefined</code></li><li>接收的参数是一个函数</li><li>不能用break打断<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"><span class="keyword">let</span> res = arr.<span class="title function_">map</span>(<span class="function">(<span class="params">value,key</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value+<span class="string">&#x27;1&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res)<span class="comment">//a1  b1  c1</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="js递归求和"><a href="#js递归求和" class="headerlink" title="js递归求和"></a>js递归求和</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> num = num1 + num2</span><br><span class="line">  <span class="keyword">if</span> (num2 + <span class="number">1</span> &gt; <span class="number">100</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">add</span>(num, num2 + <span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="去重"><a href="#去重" class="headerlink" title="去重"></a>去重</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">12</span>, <span class="number">43</span>, <span class="number">23</span>, <span class="number">12</span>, <span class="number">43</span>, <span class="number">55</span>]</span><br><span class="line"><span class="keyword">let</span> item = [...<span class="keyword">new</span> <span class="title class_">Set</span>(arr)]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(item)<span class="comment">//[ 12, 43, 23, 55 ]</span></span><br></pre></td></tr></table></figure><h2 id="const"><a href="#const" class="headerlink" title="const"></a>const</h2><ol><li>const 声明之后必须赋值，否则就报错</li><li>定义的值不能修改，否则报错</li><li>支持let其他属性</li></ol><h2 id="var"><a href="#var" class="headerlink" title="var"></a>var</h2><ol><li>声明提升</li><li>变量可覆盖<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> n=<span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> n=<span class="number">2</span></span><br></pre></td></tr></table></figure></li><li>没有块级作用域<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="判断是否是数组的几种方法"><a href="#判断是否是数组的几种方法" class="headerlink" title="判断是否是数组的几种方法"></a>判断是否是数组的几种方法</h2><ol><li><code>Array.isArray()</code>(ES5)</li><li><code>Object.prototype.toString.call()</code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(arr) === <span class="string">&#x27;[object Array]&#x27;</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li><li><code>instanceof Array</code>检查对象是否是 Array 构造函数的实例。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr <span class="keyword">instanceof</span> <span class="title class_">Array</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li><li>检查 <code>constructor</code> 属性,但<code>constructor</code>可能被修改<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="property">constructor</span> === <span class="title class_">Array</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>不推荐<code>typeof</code> 运算符<br><code>typeof [] </code>返回 <code>&#39;object&#39;</code>，无法区分数组和普通对象。</li></ol><h3 id="交换a-b的值不用临时变量"><a href="#交换a-b的值不用临时变量" class="headerlink" title="交换a,b的值不用临时变量"></a>交换a,b的值不用临时变量</h3><ol><li>算术运算</li></ol><ul><li>加减法  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = a + b</span><br><span class="line">b = a - b</span><br><span class="line">a = a - b</span><br></pre></td></tr></table></figure></li></ul><ol start="2"><li>位运算(适用于整数，浮点数或字符串会失败)<br>自反性<br><code>a ^ a = 0 </code> 相同数值异或结果为0<br><code>a ^ 0 = a </code> 任何数与0异或结果为其本身<br>可逆性<br><code>a = c ^ b</code><br><code>b = c ^ a</code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a=<span class="number">5</span>,b=<span class="number">3</span></span><br><span class="line">a = a^b<span class="comment">//a=5^3=6</span></span><br><span class="line">b = a^b<span class="comment">//b=6^3=5</span></span><br><span class="line">a = a^b<span class="comment">//a=6^5=3</span></span><br></pre></td></tr></table></figure></li><li>解构赋值<br><code>[a, b] = [b, a]</code></li></ol><h3 id="预编译"><a href="#预编译" class="headerlink" title="预编译"></a>预编译</h3><p><em>AO activation object 活跃对象 函数上下文</em>*</p><ol><li>寻找形参和变量声明</li><li>实参赋值给形参</li><li>找函数声明，赋值</li><li>执行<br><strong>GO global object 全局上下文</strong></li><li>找变量</li><li>找函数声明</li><li>执行<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="title function_">typeof</span> (a) &amp;&amp; (-<span class="literal">true</span>) + (+<span class="literal">undefined</span>) + <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">typeof</span> (a), (-<span class="literal">true</span>), (+<span class="literal">undefined</span>))<span class="comment">//undefined(字符串) -1 NaN</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">typeof</span> (a) &amp;&amp; (-<span class="literal">true</span>) + (+<span class="literal">undefined</span>) + <span class="string">&#x27;&#x27;</span>)<span class="comment">//NaN(字符串)</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;没通过&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">e</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line">  <span class="variable language_">arguments</span>[<span class="number">0</span>] = <span class="number">2</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(e)<span class="comment">//2</span></span><br><span class="line">  <span class="keyword">if</span> (a) &#123;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="number">3</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> c;</span><br><span class="line">  a = <span class="number">4</span>;</span><br><span class="line">  <span class="keyword">var</span> a;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(b)<span class="comment">//undefined</span></span><br><span class="line">  f = <span class="number">5</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(c)<span class="comment">//undefined</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a)<span class="comment">//4</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="title function_">test</span>(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>og:<br>  a:undefined<br>    -&gt;执行<br>    -&gt;1<br>  test:function(){…}<br>oa:<br>  e:undefined<br>    -&gt;1<br>    -&gt;function e(){…}<br>    -&gt;2<br>  c:undefined<br>  a:undefined<br>    -&gt;执行<br>    -&gt;4<br>  b:undefined</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a;</span><br><span class="line">  a = <span class="number">1</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">test</span>())<span class="comment">//ƒ a() &#123; &#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> b = <span class="number">3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)<span class="comment">// a(a) &#123;&#125;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params">a</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a)<span class="comment">//function a() &#123; &#125;</span></span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">2</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a)<span class="comment">//2</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line">  <span class="keyword">var</span> b = <span class="number">5</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(b)<span class="comment">//5</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">a</span>(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>GO:<br>b:undefined-&gt;3<br>a:function a(){…}<br>AO:<br>a:undefined-&gt;1-&gt;function a(){}-&gt;2<br>b:undefined-&gt;5    </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>js手写</title>
      <link href="/2025/01/17/js%E6%89%8B%E5%86%99/"/>
      <url>/2025/01/17/js%E6%89%8B%E5%86%99/</url>
      
        <content type="html"><![CDATA[<h2 id="js基础"><a href="#js基础" class="headerlink" title="js基础"></a>js基础</h2><h3 id="对标签的一些操作"><a href="#对标签的一些操作" class="headerlink" title="对标签的一些操作"></a>对标签的一些操作</h3><p>通过id获取单个元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getElementById=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;myId&#x27;</span>)</span><br></pre></td></tr></table></figure><p>通过标签名获取一组元素，返回类数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> elementsByTagName=<span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;div&#x27;</span>)</span><br></pre></td></tr></table></figure><p>通过类名获取一组元素，返回类数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> elementsByClassName = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;classname&#x27;</span>)</span><br></pre></td></tr></table></figure><p>通过css选择器获取单个符合条件的第一个元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> elementByQuerySelector=<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.myclass&#x27;</span>)</span><br></pre></td></tr></table></figure><p>通过css选择器获取符合条件的一组元素,返回类数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> elementByQuerySelectorAll=<span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.myclass&#x27;</span>)</span><br></pre></td></tr></table></figure><p>创建并插入元素<br>创建一个新的<code>span</code>元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> newElement = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;span&#x27;</span>)</span><br></pre></td></tr></table></figure><p>获取父元素并插入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">newElement.<span class="property">textContent</span>=<span class="string">&#x27;新插入的元素&#x27;</span></span><br><span class="line"><span class="keyword">const</span> parent = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;parent&#x27;</span>)</span><br><span class="line">parent.<span class="title function_">appendChild</span>(newElement)</span><br></pre></td></tr></table></figure><h3 id="手写Object-create"><a href="#手写Object-create" class="headerlink" title="手写Object.create"></a>手写Object.create</h3><p><code>Object.create()</code>静态方法以一个现有对象作为原型，创建一个新对象。换句话说就是obj上的属性以及方法新创建的对象都可以触碰到。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">create</span>(<span class="params">obj</span>)&#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">F</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">  F.<span class="property"><span class="keyword">prototype</span></span>=obj</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">F</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>eg:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">isHuman</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">p</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`My name is <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>. Am I human? <span class="subst">$&#123;<span class="variable language_">this</span>.isHuman&#125;</span>`</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">create</span>(<span class="params">obj</span>)&#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">F</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">  F.<span class="property"><span class="keyword">prototype</span></span> = obj</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">F</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> me = <span class="title function_">create</span>(person);</span><br><span class="line"></span><br><span class="line">me.<span class="property">name</span> = <span class="string">&#x27;kim&#x27;</span>; </span><br><span class="line">me.<span class="property">isHuman</span> = <span class="literal">true</span>;</span><br><span class="line">me.<span class="title function_">p</span>();<span class="comment">//&quot;My name is kim. Am I human? true&quot;</span></span><br></pre></td></tr></table></figure><h3 id="手写call"><a href="#手写call" class="headerlink" title="手写call"></a>手写call</h3><p><code>call</code>方法的作用是：</p><ol><li>修改函数内部的<code>this</code>指向。</li><li>立即调用该函数并传递参数。<br>为了保证所有函数都能调用我们的方法，所以把它添加到<code>Function.prototype</code>上<br>思路：</li><li>确保<code>thisArg</code>指向一个有效的对象：如果<code>thisArg</code>为<code>null</code>或者<code>undefined</code>，我们将其默认值设为<code>globalThis</code></li><li>临时将函数作为对象方法：为了改变<code>this</code>,我们将目标函数赋值为<code>thisArg</code>对象的一个临时方法，使用一个唯一的<code>Symbol</code>作为属性名，避免与已有的属性冲突</li><li>调用函数并传递参数</li><li>清理临时属性：删除临时添加到<code>thisArg</code>对象上的方法</li><li>返回函数执行结果<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myCall</span> = <span class="keyword">function</span> (<span class="params">thisArg, ...args</span>) &#123;</span><br><span class="line">  <span class="comment">//确保thisArg是一个有效对象</span></span><br><span class="line">  thisArg = thisArg || globalThis</span><br><span class="line">  <span class="comment">//生成一个临时属性，且不与已有的属性重名</span></span><br><span class="line">  <span class="keyword">const</span> key = <span class="title class_">Symbol</span>()</span><br><span class="line">  <span class="comment">//因为是func调用的myCall，所以这里的this指向func</span></span><br><span class="line">  thisArg[key] = <span class="variable language_">this</span></span><br><span class="line">  <span class="comment">//传剩余的参数</span></span><br><span class="line">  <span class="keyword">const</span> res = thisArg[key](...args)</span><br><span class="line">  <span class="comment">//删除临时属性</span></span><br><span class="line">  <span class="keyword">delete</span> thisArg[key]</span><br><span class="line">  <span class="comment">//返回结果</span></span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">func</span>(<span class="params">n1, n2</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(n1, n2)</span><br><span class="line">  <span class="keyword">return</span> n1 + n2</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> res = func.<span class="title function_">myCall</span>(person, <span class="number">6</span>, <span class="number">4</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;返回值为&#x27;</span>, res)<span class="comment">//10</span></span><br></pre></td></tr></table></figure></li></ol><ul><li>点语法适用于属性名是合法标识符且固定的情况，语法简洁直观。</li><li>动态属性名通过方括号语法允许属性名是变量、计算值或包含特殊字符的字符串，灵活性更高</li></ul><h3 id="手写apply"><a href="#手写apply" class="headerlink" title="手写apply"></a>手写apply</h3><p>本质上和<code>call</code>差不多，但是多了一个判断第二个参数必须是一个数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myApply</span> = <span class="keyword">function</span> (<span class="params">thisArg, arr</span>) &#123;</span><br><span class="line">  <span class="comment">//确保是一个有效值</span></span><br><span class="line">  thisArg = thisArg || globalThis</span><br><span class="line">  <span class="comment">// 确保 arr 是数组</span></span><br><span class="line">  <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr)) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;第二个参数必须是一个数组&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//创建一个临时属性</span></span><br><span class="line">  <span class="keyword">const</span> key = <span class="title class_">Symbol</span>()</span><br><span class="line">  thisArg[key] = <span class="variable language_">this</span></span><br><span class="line">  <span class="keyword">const</span> res = thisArg[key](...arr)</span><br><span class="line">  <span class="keyword">delete</span> thisArg[key]</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">func</span>(<span class="params">n1, n2</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(n1, n2)</span><br><span class="line">  <span class="keyword">return</span> n1 + n2</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> res = func.<span class="title function_">myApply</span>(person, [<span class="number">6</span>, <span class="number">4</span>])</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;返回值为&#x27;</span>, res)<span class="comment">//10</span></span><br></pre></td></tr></table></figure><h3 id="手写bind"><a href="#手写bind" class="headerlink" title="手写bind"></a>手写bind</h3><p><code>bind</code>创建一个新函数，当调用该新函数时，它会调用原始函数并将其 <code>this</code>关键字设置为给定的值，同时，还可以传入一系列指定的参数，这些参数会插入到调用新函数时传入的参数的前面。</p><ol><li>定义<code>myBind</code>方法</li><li>返回绑定<code>this</code>的新函数</li><li>合并绑定和新传入的参数<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myBind</span> = <span class="keyword">function</span> (<span class="params">thisArg, ...args</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">...reArgs</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//这里的this是func</span></span><br><span class="line">    <span class="comment">//改变this指向</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">call</span>(thisArg, ...args, ...reArgs)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">func</span>(<span class="params">n1, n2, n3, n4</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)<span class="comment">//person</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(n1, n2, n3, n4)<span class="comment">//1,2,3,4</span></span><br><span class="line">  <span class="keyword">return</span> n1 + n2 + n3 + n4</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> bindFunc = func.<span class="title function_">myBind</span>(person, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="keyword">const</span> res = <span class="title function_">bindFunc</span>(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res)<span class="comment">//10</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="手写instanceof"><a href="#手写instanceof" class="headerlink" title="手写instanceof"></a>手写instanceof</h3><p><code>instanceof</code>运算符用于检测构造函数的 prototype 属性是否出现在某个实例对象的原型链上。</p><p>底层逻辑</p><ol><li>获取<code>constructor</code>的原型对象（<code>constructor.prototype</code>）。</li><li>检查<code>object</code>是否在构造函数的原型链上。(循环判断对象的原型是否等于<code>constructor</code>的原型，直到为空)<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myInstanceof</span>(<span class="params">obj,constructor</span>)&#123;</span><br><span class="line">  <span class="comment">//获取对象的原型链</span></span><br><span class="line"><span class="keyword">let</span> prototype = <span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(obj)</span><br><span class="line"><span class="keyword">while</span>(prototype)&#123;</span><br><span class="line">  <span class="keyword">if</span>(prototype === constructor.<span class="property"><span class="keyword">prototype</span></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">  prototype = <span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(prototype)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><code>__proto__</code>与<code> Object.getPrototypeOf()</code><br><code>__proto__</code>可读可修改<br><code> Object.getPrototypeOf()</code>只读</li></ol><h3 id="手写new"><a href="#手写new" class="headerlink" title="手写new"></a>手写new</h3><ol><li>创建一个新的空对象</li><li>将该新对象的<code>__proto__</code>指向构造函数的<code>prototype</code> (<code>obj.__proto__ = Fn.prototype</code>)</li><li>执行构造函数，并将<code>this</code>指向这个新对象</li><li>如果构造函数没有显示返回对象，则返回新创建的对象<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">mynew</span>(<span class="params">func, ...args</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> obj = &#123;&#125;</span><br><span class="line">    obj.<span class="property">__proto__</span> = func.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line">    <span class="keyword">let</span> result = func.<span class="title function_">apply</span>(obj, args)</span><br><span class="line">    <span class="keyword">return</span> result <span class="keyword">instanceof</span> <span class="title class_">Object</span> ? result : obj</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">say</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p = <span class="title function_">mynew</span>(<span class="title class_">Person</span>, <span class="string">&quot;huihui&quot;</span>, <span class="number">123</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p) <span class="comment">// Person &#123;name: &quot;huihui&quot;, age: 123&#125;</span></span><br><span class="line">p.<span class="title function_">say</span>() <span class="comment">// huihui</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="实现继承的5种方式"><a href="#实现继承的5种方式" class="headerlink" title="实现继承的5种方式"></a>实现继承的5种方式</h3><h3 id="手写Promise"><a href="#手写Promise" class="headerlink" title="手写Promise"></a>手写Promise</h3><div class="markmap-container" style="height:900px">  <svg data="{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[0,1]},&quot;v&quot;:&quot;promise&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[1,2]},&quot;v&quot;:&quot;promise 构造函数的实现&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[2,3]},&quot;v&quot;:&quot;定义类&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[3,4]},&quot;v&quot;:&quot;添加构造函数&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[4,5]},&quot;v&quot;:&quot;定义resolve/reject&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[5,6]},&quot;v&quot;:&quot;改变状态且状态不可逆&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[6,7]},&quot;v&quot;:&quot;更新原因&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[7,8]},&quot;v&quot;:&quot;异步的逻辑&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:8,&quot;p&quot;:{&quot;lines&quot;:[8,9]},&quot;v&quot;:&quot;遍历异步的数组中的回调函数并执行&quot;}]}]},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[9,10]},&quot;v&quot;:&quot;执行回调函数&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[10,11]},&quot;v&quot;:&quot;then 的实现&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[11,12]},&quot;v&quot;:&quot;链式编程（要求返回一个promise对象）&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[12,13]},&quot;v&quot;:&quot;判断传入的参数是否为函数&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[13,14]},&quot;v&quot;:&quot;创建一个promise实例对象并返回&quot;}]},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[14,15]},&quot;v&quot;:&quot;状态的判断&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[15,16]},&quot;v&quot;:&quot;fulfilled&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:8,&quot;p&quot;:{&quot;lines&quot;:[16,17]},&quot;v&quot;:&quot;执行then中传入的成功的回调函数,得到结果x&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:8,&quot;p&quot;:{&quot;lines&quot;:[17,18]},&quot;v&quot;:&quot;对于x:处理重复引用，处理返回一个promise(封装成一个函数)&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:8,&quot;p&quot;:{&quot;lines&quot;:[18,19]},&quot;v&quot;:&quot;处理异常&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:8,&quot;p&quot;:{&quot;lines&quot;:[19,20]},&quot;v&quot;:&quot;异步&quot;}]},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[20,21]},&quot;v&quot;:&quot;rejected&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:8,&quot;p&quot;:{&quot;lines&quot;:[21,22]},&quot;v&quot;:&quot;和fulfilled一样&quot;}]},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[22,23]},&quot;v&quot;:&quot;pending&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:8,&quot;p&quot;:{&quot;lines&quot;:[23,24]},&quot;v&quot;:&quot;将传入的两个回调函数压入数组中&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:8,&quot;p&quot;:{&quot;lines&quot;:[24,25]},&quot;v&quot;:&quot;并且是两个异步的函数&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:8,&quot;p&quot;:{&quot;lines&quot;:[25,26]},&quot;v&quot;:&quot;并且也会处理x的2种特殊情况&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:8,&quot;p&quot;:{&quot;lines&quot;:[26,27]},&quot;v&quot;:&quot;并且会处理异常&quot;}]}]}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[27,28]},&quot;v&quot;:&quot;两个实例化方法&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[28,29]},&quot;v&quot;:&quot;catch&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[29,30]},&quot;v&quot;:&quot;内部调用.then的方法&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[30,31]},&quot;v&quot;:&quot;返回的是一个promise对象&quot;}]},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[31,32]},&quot;v&quot;:&quot;finally&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[32,33]},&quot;v&quot;:&quot;内部调用.then的方法&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[33,34]},&quot;v&quot;:&quot;返回的是一个promise对象&quot;}]}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[34,35]},&quot;v&quot;:&quot;静态方法&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[35,36]},&quot;v&quot;:&quot;resolve&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[36,37]},&quot;v&quot;:&quot;如果是promise实例对象就直接返回&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[37,38]},&quot;v&quot;:&quot;如果不是就new一个&quot;}]},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[38,39]},&quot;v&quot;:&quot;reject&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[39,40]},&quot;v&quot;:&quot;返回一个promise实例对象&quot;}]},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[40,41]},&quot;v&quot;:&quot;race&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[41,42]},&quot;v&quot;:&quot;返回一个promise实例对象&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[42,43]},&quot;v&quot;:&quot;判断是否为数组，不是数组则返回错误&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[43,44]},&quot;v&quot;:&quot;等待第一个敲定&quot;}]},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[44,45]},&quot;v&quot;:&quot;all&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[45,46]},&quot;v&quot;:&quot;返回一个promise实例对象&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[46,47]},&quot;v&quot;:&quot;判断是否为数组&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:8,&quot;p&quot;:{&quot;lines&quot;:[47,48]},&quot;v&quot;:&quot;不是数组则返回错误&quot;}]},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[48,49]},&quot;v&quot;:&quot;空数组直接兑现&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[49,50]},&quot;v&quot;:&quot;处理全部兑现&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:8,&quot;p&quot;:{&quot;lines&quot;:[50,51]},&quot;v&quot;:&quot;注意兑现的数组和传入的数组的顺序相同&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:8,&quot;p&quot;:{&quot;lines&quot;:[51,52]},&quot;v&quot;:&quot;如果被拒绝，则返回的 Promise 将被拒绝，并带有第一个被拒绝的原因&quot;}]}]},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[52,53]},&quot;v&quot;:&quot;allSettled&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[53,54]},&quot;v&quot;:&quot;返回一个promise实例对象&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[54,55]},&quot;v&quot;:&quot;判断是否为数组&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:8,&quot;p&quot;:{&quot;lines&quot;:[55,56]},&quot;v&quot;:&quot;不是数组则返回错误&quot;}]},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[56,57]},&quot;v&quot;:&quot;空数组直接兑现&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[57,58]},&quot;v&quot;:&quot;处理全部兑现&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:8,&quot;p&quot;:{&quot;lines&quot;:[58,59]},&quot;v&quot;:&quot;注意兑现的数组和传入的数组的顺序相同&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:8,&quot;p&quot;:{&quot;lines&quot;:[59,60]},&quot;v&quot;:&quot;当所有输入的 Promise 都已敲定时（包括传入空的可迭代对象时），返回的 Promise 将被兑现，&quot;}]}]},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[60,61]},&quot;v&quot;:&quot;any&quot;}]}]}"/></div><h4 id="构造函数-Promise"><a href="#构造函数-Promise" class="headerlink" title="构造函数 Promise"></a>构造函数 Promise</h4><ol><li>添加状态<code>pending/fulfilled/reject</code></li><li>添加原因</li><li>状态不可逆</li></ol><h4 id="then方法"><a href="#then方法" class="headerlink" title="then方法"></a>then方法</h4><h4 id="异步任务"><a href="#异步任务" class="headerlink" title="异步任务"></a>异步任务</h4><p>核心api:<code>queueMicrotask</code>,<code>MutationObserver</code>,<code>setTimeout</code><br>主要思路：把执行异步的操作封装成一个函数，在<code>then</code>中调用<br>typeof 操作符：typeof 用来检查一个值的类型。在这个例子中，我们用 typeof 来确保 queueMicrotask 是否存在且是一个函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">runAsynctask</span>(<span class="params">callback</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> queueMicrotask === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">    <span class="title function_">queueMicrotask</span>(callback)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="title class_">MutationObserver</span> === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> obs = <span class="keyword">new</span> <span class="title class_">MutationObserver</span>(callback)</span><br><span class="line">    <span class="keyword">const</span> divNode = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">    obs.<span class="title function_">observe</span>(divNode, &#123; <span class="attr">childList</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">    divNode.<span class="property">innerText</span> = <span class="string">&#x27;123&#x27;</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(callback, <span class="number">0</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只展示有改动的部分</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">then</span>(<span class="params">onFulfilled, onRejected</span>) &#123;</span><br><span class="line">  <span class="comment">//如果此时状态为成功，执行成功的回调</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> === <span class="variable constant_">FULFILLED</span>) &#123;</span><br><span class="line">    <span class="title function_">runAsynctask</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">onFulfilled</span>(<span class="variable language_">this</span>.<span class="property">result</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> === <span class="variable constant_">REJECTED</span>) &#123;<span class="comment">//如果此时状态为失败，执行失败的回调</span></span><br><span class="line">    <span class="title function_">runAsynctask</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">onRejected</span>(<span class="variable language_">this</span>.<span class="property">result</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> === <span class="variable constant_">PENDING</span>) &#123;<span class="comment">//不是成功或失败，说明内部是一个异步操作,保存成功或者失败的回调</span></span><br><span class="line">    <span class="variable language_">this</span>.#handlers.<span class="title function_">push</span>(&#123;</span><br><span class="line">      <span class="attr">onFulfilled</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">runAsynctask</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="title function_">onFulfilled</span>(<span class="variable language_">this</span>.<span class="property">result</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;, <span class="attr">onRejected</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">runAsynctask</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="title function_">onRejected</span>(<span class="variable language_">this</span>.<span class="property">result</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>异步执行测试</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;success&#x27;</span>)</span><br><span class="line">    <span class="comment">// reject(&#x27;error&#x27;)</span></span><br><span class="line">  &#125;, <span class="number">2000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span><br><span class="line">p.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;then1&#x27;</span>, res)</span><br><span class="line">&#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;then2&#x27;</span>, err)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><h4 id="链式编程"><a href="#链式编程" class="headerlink" title="链式编程"></a>链式编程</h4><p>核心步骤：</p><ol><li>返回<code>Promise</code>实例,获取返回值</li><li><ul><li>处理返回值</li><li>处理异常</li><li>处理返回<code>Promise</code>：判断返回<code>Promise</code>，调用被返回的<code>Promise</code>的<code>then</code>方法</li><li>处理重复引用：判断重复引用，抛出异常<br>为什么要把三种情况的判断放入生成p2的回调中？<br>答：因为我们需要拿到本次执行回调的返回值，并传递给下一个<code>then</code>,所以我们需要拿到创建的新的<code>promise</code>对象的成功的回调函数;<br>并且创建一个<code>promise</code>对象是立即执行，所以对下面三个判断的执行时机并没有影响。</li></ul></li></ol><h5 id="fulfilled状态"><a href="#fulfilled状态" class="headerlink" title="fulfilled状态"></a>fulfilled状态</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">then</span>(<span class="params">onFulfilled, onRejected</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//如果此时状态为成功，执行成功的回调</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> === <span class="variable constant_">FULFILLED</span>) &#123;</span><br><span class="line">      <span class="title function_">runAsynctask</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//处理异常</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="comment">//获取返回值  return 2</span></span><br><span class="line">          <span class="keyword">let</span> x = <span class="title function_">onFulfilled</span>(<span class="variable language_">this</span>.<span class="property">result</span>)</span><br><span class="line">          <span class="comment">//处理重复引用</span></span><br><span class="line">            <span class="keyword">if</span> (x === p2) &#123;</span><br><span class="line">              <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;Chaining cycle detected for promise #&lt;Promise&gt;&#x27;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">          <span class="comment">//判断传过来的是不是promise</span></span><br><span class="line">           <span class="keyword">if</span> (x <span class="keyword">instanceof</span> <span class="title class_">MyPromise</span>) &#123;</span><br><span class="line">              x.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> <span class="title function_">resolve</span>(res), <span class="function"><span class="params">err</span> =&gt;</span> <span class="title function_">reject</span>(err))</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="comment">//把返回值传递给下一个</span></span><br><span class="line">              <span class="title function_">resolve</span>(x)<span class="comment">//2</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">          <span class="title function_">reject</span>(error)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; </span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> p2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="rejected状态"><a href="#rejected状态" class="headerlink" title="rejected状态"></a>rejected状态</h5><p>处理异常-&gt;获取返回值-&gt;处理返回值；处理返回Promise;处理重复引用；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">runAsynctask</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="title function_">onRejected</span>(<span class="variable language_">this</span>.<span class="property">result</span>)</span><br><span class="line">    <span class="title function_">resolvePromise</span>(x, p2, resolve, reject)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="title function_">reject</span>(error)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="pending状态"><a href="#pending状态" class="headerlink" title="pending状态"></a>pending状态</h5><p>处理异常-&gt;获取返回值-&gt;处理返回值；处理返回Promise;处理重复引用；(复用函数)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> === <span class="variable constant_">PENDING</span>) &#123;<span class="comment">//不是成功或失败，说明内部是一个异步操作,保存成功或者失败的回调</span></span><br><span class="line">  <span class="variable language_">this</span>.#handlers.<span class="title function_">push</span>(&#123;</span><br><span class="line">    <span class="attr">onFulfilled</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">runAsynctask</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">let</span> x = <span class="title function_">onFulfilled</span>(<span class="variable language_">this</span>.<span class="property">result</span>)</span><br><span class="line">          <span class="title function_">resolvePromise</span>(x, p2, resolve, reject)</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">          <span class="title function_">reject</span>(error)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;, <span class="attr">onRejected</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">runAsynctask</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">let</span> x = <span class="title function_">onRejected</span>(<span class="variable language_">this</span>.<span class="property">result</span>)</span><br><span class="line">          <span class="title function_">resolvePromise</span>(x, p2, resolve, reject)</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">          <span class="title function_">reject</span>(error)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试代码：<br><code>fulfilled</code>测试链式编程</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">resolve</span>(<span class="number">1</span>)</span><br><span class="line">&#125;)</span><br><span class="line">p.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;p1:&#x27;</span>, res)<span class="comment">//p1: 1</span></span><br><span class="line">  <span class="comment">// throw &#x27;throw-error&#x27;</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;p2&#x27;</span>, res)<span class="comment">//p2 2</span></span><br><span class="line">&#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;p2:&#x27;</span>, err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>测试返回<code>Promise</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">resolve</span>(<span class="number">1</span>)</span><br><span class="line">&#125;)</span><br><span class="line">p.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;p1:&#x27;</span>, res)</span><br><span class="line">  <span class="comment">// throw &#x27;throw-error&#x27;</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="number">2</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;p2&#x27;</span>, res)</span><br><span class="line">&#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;p2:&#x27;</span>, err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>测试重复引用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">resolve</span>(<span class="number">1</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> p2=p.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> p2</span><br><span class="line">&#125;)</span><br><span class="line">p2.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;&#125;)</span><br></pre></td></tr></table></figure><p>rejected测试</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">reject</span>(<span class="number">1</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> p2 = p.<span class="title function_">then</span>(<span class="literal">undefined</span>, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// throw &#x27;err&#x27;</span></span><br><span class="line">  <span class="comment">// return p2</span></span><br><span class="line">  <span class="comment">// return 2</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;MyPromise&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">p2.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;then2&#x27;</span>, res)</span><br><span class="line">&#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;then2&#x27;</span>, err)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>pending测试</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>(<span class="number">1</span>)</span><br><span class="line">  &#125;, <span class="number">300</span>)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> p2 = p.<span class="title function_">then</span>(<span class="literal">undefined</span>, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// throw &#x27;err&#x27;</span></span><br><span class="line">  <span class="comment">// return p2</span></span><br><span class="line">  <span class="comment">// return 2</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">      <span class="title function_">resolve</span>(<span class="string">&#x27;MyPromise&#x27;</span>)</span><br><span class="line">    &#125;,<span class="number">2000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">p2.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;then2&#x27;</span>, res)</span><br><span class="line">&#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;then2&#x27;</span>, err)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="整体代码"><a href="#整体代码" class="headerlink" title="整体代码"></a>整体代码</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">resolvePromise</span>(<span class="params">x, p2, resolve, reject</span>) &#123;</span><br><span class="line">  <span class="comment">//处理重复引用</span></span><br><span class="line">  <span class="keyword">if</span> (x === p2) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;Chaining cycle detected for promise #&lt;Promise&gt;&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//链式编程</span></span><br><span class="line">  <span class="keyword">if</span> (x <span class="keyword">instanceof</span> <span class="title class_">MyPromise</span>) &#123;</span><br><span class="line">    x.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> <span class="title function_">resolve</span>(res), <span class="function"><span class="params">err</span> =&gt;</span> <span class="title function_">reject</span>(err))</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(x)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">runAsynctask</span>(<span class="params">callback</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> queueMicrotask === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">    <span class="title function_">queueMicrotask</span>(callback)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="title class_">MutationObserver</span> === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> obs = <span class="keyword">new</span> <span class="title class_">MutationObserver</span>(callback)</span><br><span class="line">    <span class="keyword">const</span> divNode = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">    obs.<span class="title function_">observe</span>(divNode, &#123; <span class="attr">childList</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">    divNode.<span class="property">innerText</span> = <span class="string">&#x27;123&#x27;</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(callback, <span class="number">0</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">PENDING</span> = <span class="string">&#x27;pending&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">FULFILLED</span> = <span class="string">&#x27;fulfilled&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">REJECTED</span> = <span class="string">&#x27;rejected&#x27;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyPromise</span> &#123;</span><br><span class="line">  state = <span class="variable constant_">PENDING</span></span><br><span class="line">  result = <span class="literal">undefined</span></span><br><span class="line">  #handlers = [] <span class="comment">//[&#123;onFulfilled,onFulfilled&#125;]存的是异步执行的回调</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">func</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">resolve</span> = (<span class="params">result</span>) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> === <span class="variable constant_">PENDING</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">state</span> = <span class="variable constant_">FULFILLED</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">result</span> = result</span><br><span class="line">        <span class="variable language_">this</span>.#handlers.<span class="title function_">forEach</span>(<span class="function">(<span class="params">&#123; onFulfilled &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="title function_">onFulfilled</span>(<span class="variable language_">this</span>.<span class="property">result</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">reject</span> = (<span class="params">result</span>) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> === <span class="variable constant_">PENDING</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">state</span> = <span class="variable constant_">REJECTED</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">result</span> = result</span><br><span class="line">        <span class="variable language_">this</span>.#handlers.<span class="title function_">forEach</span>(<span class="function">(<span class="params">&#123; onRejected &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="title function_">onRejected</span>(<span class="variable language_">this</span>.<span class="property">result</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">func</span>(resolve, reject)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">then</span>(<span class="params">onFulfilled, onRejected</span>) &#123;</span><br><span class="line">    <span class="comment">//判断是否是函数</span></span><br><span class="line">    onFulfilled = <span class="keyword">typeof</span> onFulfilled === <span class="string">&#x27;function&#x27;</span> ? onFulfilled : <span class="function"><span class="params">x</span> =&gt;</span> x</span><br><span class="line">    onRejected = <span class="keyword">typeof</span> onRejected === <span class="string">&#x27;function&#x27;</span> ? onRejected : <span class="function"><span class="params">x</span> =&gt;</span> &#123; <span class="keyword">throw</span> x &#125;</span><br><span class="line">    <span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">//如果此时状态为成功，执行成功的回调</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> === <span class="variable constant_">FULFILLED</span>) &#123;</span><br><span class="line">        <span class="title function_">runAsynctask</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> x = <span class="title function_">onFulfilled</span>(<span class="variable language_">this</span>.<span class="property">result</span>)</span><br><span class="line">            <span class="title function_">resolvePromise</span>(x, p2, resolve, reject)</span><br><span class="line">          &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            <span class="title function_">reject</span>(error)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> === <span class="variable constant_">REJECTED</span>) &#123;<span class="comment">//如果此时状态为失败，执行失败的回调</span></span><br><span class="line">        <span class="title function_">runAsynctask</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> x = <span class="title function_">onRejected</span>(<span class="variable language_">this</span>.<span class="property">result</span>)</span><br><span class="line">            <span class="title function_">resolvePromise</span>(x, p2, resolve, reject)</span><br><span class="line">          &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            <span class="title function_">reject</span>(error)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> === <span class="variable constant_">PENDING</span>) &#123;<span class="comment">//不是成功或失败，说明内部是一个异步操作,保存成功或者失败的回调</span></span><br><span class="line">        <span class="variable language_">this</span>.#handlers.<span class="title function_">push</span>(&#123;</span><br><span class="line">          <span class="attr">onFulfilled</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">runAsynctask</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">              <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> x = <span class="title function_">onFulfilled</span>(<span class="variable language_">this</span>.<span class="property">result</span>)</span><br><span class="line">                <span class="title function_">resolvePromise</span>(x, p2, resolve, reject)</span><br><span class="line">              &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">                <span class="title function_">reject</span>(error)</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;, <span class="attr">onRejected</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">runAsynctask</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">              <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> x = <span class="title function_">onRejected</span>(<span class="variable language_">this</span>.<span class="property">result</span>)</span><br><span class="line">                <span class="title function_">resolvePromise</span>(x, p2, resolve, reject)</span><br><span class="line">              &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">                <span class="title function_">reject</span>(error)</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> p2</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="两个实例化方法catch-finally"><a href="#两个实例化方法catch-finally" class="headerlink" title="两个实例化方法catch,finally"></a>两个实例化方法catch,finally</h4><h5 id="catch"><a href="#catch" class="headerlink" title="catch"></a>catch</h5><p><code>catch()</code>方法用于注册一个在<code>promise</code>被拒绝时调用的函数。它会立即返回一个等效的<code>Promise</code>对象，这可以允许你链式调用其他 <code>promise</code>的方法。此方法是 Promise.p<code>rototype.then(undefined, onRejected)</code> 的一种简写形式。<br>只给出有变化的部分<br><code>constructor</code>中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="title function_">func</span>(resolve, reject)</span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">  <span class="title function_">reject</span>(error)<span class="comment">//处理throw-err</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">catch</span>(onRejected) &#123;</span><br><span class="line">  <span class="comment">//内部调用then方法,且支持链式编程</span></span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">then</span>(<span class="literal">undefined</span>, onRejected)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// reject(&#x27;reject-error&#x27;)</span></span><br><span class="line">  <span class="keyword">throw</span> <span class="string">&#x27;throw-err&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line">p.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="finally"><a href="#finally" class="headerlink" title="finally"></a>finally</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">finally</span>(<span class="params">onFinally</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">then</span>(onFinally, onFinally)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// resolve(&#x27;resolve-res&#x27;)</span></span><br><span class="line">  <span class="comment">// reject(&#x27;reject-res&#x27;)</span></span><br><span class="line">  <span class="keyword">throw</span> <span class="string">&#x27;throw-err&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line">p.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;res:&#x27;</span>, res)</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;err:&#x27;</span>, err)</span><br><span class="line">&#125;).<span class="title function_">finally</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;finally:&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h4><h5 id="resolve"><a href="#resolve" class="headerlink" title="resolve"></a>resolve</h5><p>如果该值本身就是一个<code>Promise</code>，那么该 <code>Promise</code> 将被返回。否则将调用其<code>then()</code>方法及其两个回调函数,返回一个新的<code>promise</code>对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="title function_">resolve</span>(<span class="params">value</span>)&#123;</span><br><span class="line">  <span class="keyword">if</span>(value <span class="keyword">instanceof</span> <span class="title class_">MyPromise</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span><span class="title function_">resolve</span>(value))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">MyPromise</span>.<span class="title function_">resolve</span>(<span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// resolve(&#x27;resolve&#x27;)</span></span><br><span class="line">  <span class="comment">// reject(&#x27;reject&#x27;)</span></span><br><span class="line">  <span class="keyword">throw</span> <span class="string">&#x27;error&#x27;</span></span><br><span class="line">&#125;)).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;res:&#x27;</span>, res)</span><br><span class="line">&#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;err&#x27;</span>, err)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="title class_">MyPromise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;abc&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="reject"><a href="#reject" class="headerlink" title="reject"></a>reject</h5><p>返回一个已拒绝的<code>Promise</code>对象，拒绝原因为给定的参数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="title function_">reject</span>(<span class="params">value</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params"><span class="literal">undefined</span>, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>(value)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">MyPromise</span>.<span class="title function_">reject</span>(<span class="string">&#x27;err&#x27;</span>).<span class="title function_">catch</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)<span class="comment">//err</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="race"><a href="#race" class="headerlink" title="race"></a>race</h5><p>该方法接受一个<code>promise</code>可迭代对象作为输入，并返回一个<code>Promise</code>。这个返回的<code>promise</code>会随着第一个<code>promise</code>的敲定而敲定。<br>如果第一个敲定的 <code>promise</code> 被兑现，那么返回的 <code>promise</code> 也会被兑现；如果第一个敲定的 <code>promise</code> 被拒绝，那么返回的 <code>promise</code> 也会被拒绝。<br>如果传入的 iterable 为空，返回的 <code>promise</code> 就会一直保持待定状态。如果传入的 iterable 非空但其中没有任何一个 <code>promise</code> 是待定状态，返回的 <code>promise</code> 仍会异步敲定（而不是同步敲定）。<br>返回一个<code>promise</code>&#x3D;&gt;判断传入是否为数组&#x3D;&gt;不是数组则返回错误&#x3D;&gt;是数组则等待第一个敲定</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="title function_">race</span>(<span class="params">promises</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(promises))&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;Argument is not iterable&#x27;</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    promises.<span class="title function_">forEach</span>(<span class="function"><span class="params">p</span>=&gt;</span>&#123;</span><br><span class="line">      <span class="title class_">MyPromise</span>.<span class="title function_">resolve</span>(p).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> <span class="title function_">resolve</span>(res), <span class="function"><span class="params">err</span> =&gt;</span> <span class="title function_">reject</span>(err))</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="number">1</span>)</span><br><span class="line">  &#125;,<span class="number">2000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="number">2</span>)</span><br><span class="line">  &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="title class_">MyPromise</span>.<span class="title function_">race</span>([p,p1,<span class="string">&#x27;999&#x27;</span>]).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;res:&#x27;</span>, res)<span class="comment">//999</span></span><br><span class="line">&#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;err&#x27;</span>, err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="all"><a href="#all" class="headerlink" title="all"></a>all</h5><p>接受一个<code>Promise</code>可迭代对象作为输入，并返回一个<code>Promise</code>。<br>结果组的顺序和传入组相同。<br>判断是否为数组 &#x3D;&gt;<strong>空数组直接兑现</strong> &#x3D;&gt; 处理全部兑现&#x2F;处理第一个拒绝<br>当所有输入的 <code>Promise</code> 都被兑现时，返回的 <code>Promise</code> 也将被兑现（即使传入的是一个空的可迭代对象），并返回一个包含所有兑现值的数组。如果输入的<strong>任何 Promise 被拒绝</strong>，则<strong>返回的 Promise 将被拒绝</strong>，并带有第一个被拒绝的原因。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="title function_">all</span>(<span class="params">promises</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(promises))&#123;<span class="comment">//如果不是数组</span></span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;Argument is not iterable&#x27;</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//空数组直接兑现</span></span><br><span class="line">    promises.<span class="property">length</span> === <span class="number">0</span> &amp;&amp; <span class="title function_">resolve</span>(promises)</span><br><span class="line">    <span class="comment">//处理全部兑现</span></span><br><span class="line">    <span class="keyword">const</span> results = []</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span><span class="comment">//记录兑现次数</span></span><br><span class="line">    promises.<span class="title function_">forEach</span>(<span class="function">(<span class="params">p,index</span>)=&gt;</span>&#123;</span><br><span class="line">      <span class="title class_">MyPromise</span>.<span class="title function_">resolve</span>(p).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">        results[index] = res</span><br><span class="line">        count++</span><br><span class="line">        count===promises.<span class="property">length</span> &amp;&amp; <span class="title function_">resolve</span>(results)</span><br><span class="line">      &#125;,<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="title function_">reject</span>(err)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p1 = <span class="title class_">MyPromise</span>.<span class="title function_">resolve</span>(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>(<span class="number">2</span>)</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="title class_">MyPromise</span>.<span class="title function_">all</span>([p1, p2, <span class="string">&#x27;9&#x27;</span>]).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;res:&#x27;</span>, res)</span><br><span class="line">&#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;err&#x27;</span>, err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="allSettled"><a href="#allSettled" class="headerlink" title="allSettled"></a>allSettled</h5><p>返回一个<code>promise</code>;当传入<code>promise</code><strong>都已敲定</strong>，即可获取兑现的结果<br>结果数组<code>[&#123;status:&#39;fulfilled&#39;,value:1&#125;,&#123;status:&#39;rejected&#39;,reason:3&#125;]</code><br>结果组的顺序和传入组相同。<br>空数组直接兑现<br>不是数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="title function_">allSettled</span>(<span class="params">promises</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(promises))&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;Argument is not iterable&#x27;</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//空数组直接兑现</span></span><br><span class="line">    promises.<span class="property">length</span> === <span class="number">0</span> &amp;&amp; <span class="title function_">resolve</span>(promises)</span><br><span class="line">    <span class="comment">//兑现全部</span></span><br><span class="line">    <span class="keyword">let</span> results = []</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span></span><br><span class="line">    promises.<span class="title function_">forEach</span>(<span class="function">(<span class="params">p,index</span>)=&gt;</span>&#123;</span><br><span class="line">      <span class="title class_">MyPromise</span>.<span class="title function_">resolve</span>(p).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">        result[index] = &#123;<span class="attr">status</span>:<span class="string">&#x27;fulfilled&#x27;</span>,<span class="attr">value</span>:res&#125;</span><br><span class="line">        count++</span><br><span class="line">        count === promises.<span class="property">length</span> &amp;&amp; <span class="title function_">resolve</span>(results)</span><br><span class="line">      &#125;,<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">         result[index] = &#123;<span class="attr">status</span>:<span class="string">&#x27;rejected&#x27;</span>,<span class="attr">value</span>:err&#125;</span><br><span class="line">        count++</span><br><span class="line">        count === promises.<span class="property">length</span> &amp;&amp; <span class="title function_">resolve</span>(results)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p1 = <span class="title class_">MyPromise</span>.<span class="title function_">resolve</span>(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">const</span> p2 = <span class="number">2</span></span><br><span class="line"><span class="keyword">const</span> p3 = <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>(<span class="number">3</span>)</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title class_">MyPromise</span>.<span class="title function_">allSettled</span>([p1, p2, p3]).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;res:&#x27;</span>, res)</span><br><span class="line">&#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;err&#x27;</span>, err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">res</span>: [</span><br><span class="line">  &#123; <span class="attr">status</span>: <span class="string">&#x27;fulfilled&#x27;</span>, <span class="attr">value</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">status</span>: <span class="string">&#x27;fulfilled&#x27;</span>, <span class="attr">value</span>: <span class="number">2</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">status</span>: <span class="string">&#x27;rejected&#x27;</span>, <span class="attr">reason</span>: <span class="number">3</span> &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h5 id="any"><a href="#any" class="headerlink" title="any"></a>any</h5><p>它返回一个新的 <code>Promise</code>，这个新的 <code>Promise</code> 会在传入的任意一个 <code>Promise</code> 成功解决时立即解决，并采用那个成功解决的 <code>Promise</code> 的值。如果所有传入的 <code>Promise</code> 都被拒绝，则返回的 <code>Promise</code> 会被拒绝，并且会携带一个 AggregateError 错误，包含了所有被拒绝的 <code>Promise</code> 的错误信息。</p><h3 id="手写防抖函数"><a href="#手写防抖函数" class="headerlink" title="手写防抖函数"></a>手写防抖函数</h3><p>防抖原理：频繁的触发事件，只执行最后一次<br>主要思路：如果已经开启定时器，则关闭重开；如果没有定时器，则直接开启；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">fn,t</span>)&#123;</span><br><span class="line">  <span class="keyword">let</span> timer</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(timer) <span class="built_in">clearTimeout</span>(timer) <span class="comment">//存在定时器</span></span><br><span class="line">    timer = <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="title function_">fn</span>()</span><br><span class="line">    &#125;,t)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">box.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>,<span class="title function_">debounce</span>(move,<span class="number">500</span>))</span><br></pre></td></tr></table></figure><h3 id="手写节流函数"><a href="#手写节流函数" class="headerlink" title="手写节流函数"></a>手写节流函数</h3><p>节流原理：频繁的触发事件，只执行一次<br>思路：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">fn,t</span>)&#123;</span><br><span class="line">  <span class="keyword">let</span> timer = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!timer)&#123;<span class="comment">//如果不存在定时器</span></span><br><span class="line">    timer = <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title function_">fn</span>()</span><br><span class="line">        <span class="comment">//清空定时器</span></span><br><span class="line">        timer= <span class="literal">null</span></span><br><span class="line">      &#125;,t)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">box.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>,<span class="title function_">throttle</span>(move,<span class="number">500</span>))</span><br></pre></td></tr></table></figure><h3 id="函数柯里化"><a href="#函数柯里化" class="headerlink" title="函数柯里化"></a>函数柯里化</h3><p>把接受多个参数的函数变换成接受一个单一参数（最初函数的第一个参数）的函数，并返回接受余下的参数且返回结果的新函数的技术。<br>需求：原函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a,b,c,d,e</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> a+b+c+d+e</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改写函数<code>sum</code>实现：参数传递到5个即可实现累加</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">sum</span>(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>)(<span class="number">4</span>)(<span class="number">5</span>)</span><br><span class="line"><span class="title function_">sum</span>(<span class="number">1</span>)(<span class="number">2</span>,<span class="number">3</span>)(<span class="number">4</span>)(<span class="number">5</span>)</span><br><span class="line"><span class="title function_">sum</span>(<span class="number">1</span>)(<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)(<span class="number">5</span>)</span><br><span class="line"><span class="title function_">sum</span>(<span class="number">1</span>)(<span class="number">2</span>,<span class="number">3</span>)(<span class="number">4</span>,<span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>解法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.保存不定长参数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createSum</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> nums = []; <span class="comment">// 定义在 createSum 内部，成为局部变量</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">    nums.<span class="title function_">push</span>(...args);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断剩余参数的个数</span></span><br><span class="line">    <span class="keyword">if</span> (nums.<span class="property">length</span> &gt;= <span class="number">5</span>) &#123;</span><br><span class="line">      <span class="comment">// 长度到5累加</span></span><br><span class="line">      <span class="keyword">const</span> res = nums.<span class="title function_">slice</span>(<span class="number">0</span>, <span class="number">5</span>).<span class="title function_">reduce</span>(<span class="function">(<span class="params">p, v</span>) =&gt;</span> p + v, <span class="number">0</span>);</span><br><span class="line">      <span class="comment">// 累加后要清空数组，不然会影响下次累加的结果</span></span><br><span class="line">      nums = [];</span><br><span class="line">      <span class="keyword">return</span> res;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sum = <span class="title function_">createSum</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>)(<span class="number">4</span>)(<span class="number">5</span>)); <span class="comment">// 输出: 15</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(<span class="number">1</span>, <span class="number">2</span>)(<span class="number">3</span>, <span class="number">4</span>)(<span class="number">5</span>)); <span class="comment">// 输出: 15</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)(<span class="number">4</span>, <span class="number">5</span>)); <span class="comment">// 输出: 15</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)(<span class="number">5</span>)); <span class="comment">// 输出: 15</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)); <span class="comment">// 输出: 15</span></span><br></pre></td></tr></table></figure><p>通过 <code>tyoeOfTest</code> 生成</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2. 动态传入判断的类型</span></span><br><span class="line"><span class="keyword">const</span> typeOfTest = <span class="keyword">function</span>(<span class="params">type</span>)&#123;</span><br><span class="line">  <span class="comment">//1.复用 类型判断函数的逻辑</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">isUndefined</span>(<span class="params">thing</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> thing === type</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> isUndefined</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简写</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">typeOfTest</span> = type=&gt;<span class="function"><span class="params">thing</span>=&gt;</span> <span class="keyword">typeof</span> thing === type</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isString = <span class="title function_">typeOfTest</span>(<span class="string">&#x27;string&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> isUndefined = <span class="title function_">typeOfTest</span>(<span class="string">&#x27;undefined&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h3><p>如果拷贝的是基本数据类型，拷贝的就是基本数据类型的值;<br>如果是引用数据类型，拷贝的就是<strong>内存地址</strong>。如果其中一个对象的引用发生改变，另一个对象也会发生变化。<br>如果数组中的值是一个普通数据类型，那它拷贝的就是该数据的值；<strong>如果是引用数据类型，拷贝的就是地址</strong>。</p><h4 id="（1）Object-assign"><a href="#（1）Object-assign" class="headerlink" title="（1）Object.assign()"></a>（1）Object.assign()</h4><p><code>Object.assign()</code>是ES6中对象的拷贝方法，接受的第一个参数是目标对象，其余参数是源对象，用法：<code>Object.assign(target, source_1, ···)</code>，该方法可以实现浅拷贝，也可以实现一维对象的深拷贝。<br><strong>不拷贝对象的继承属性</strong>，<strong>不会拷贝对象的不可枚举属性</strong>，可以拷贝Symbol类型的属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj1 = &#123;</span><br><span class="line">  <span class="attr">a</span>: &#123; <span class="attr">b</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  <span class="attr">sym</span>: <span class="title class_">Symbol</span>(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj1, <span class="string">&#x27;123&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="string">&#x27;不可枚举属性&#x27;</span>,</span><br><span class="line">  <span class="attr">enumerable</span>: <span class="literal">false</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">let</span> obj2 = &#123;&#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(obj2, obj1)</span><br><span class="line">obj1.<span class="property">a</span>.<span class="property">b</span> = <span class="number">2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;obj1&#x27;</span>, obj1)<span class="comment">//&#123;a: &#123;…&#125;, sym: Symbol(1), 123: &#x27;不可枚举属性&#x27;&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;obj2&#x27;</span>, obj2)<span class="comment">//&#123;a: &#123;…&#125;, sym: Symbol(1)&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1.<span class="property">sym</span> == obj2.<span class="property">sym</span>)<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h4 id="（2）扩展运算符"><a href="#（2）扩展运算符" class="headerlink" title="（2）扩展运算符"></a>（2）扩展运算符</h4><p>使用扩展运算符可以在<strong>构造字面量对象</strong>的时候，进行属性的拷贝。语法：<code>let cloneObj = &#123; ...obj &#125;;</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj1 = &#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:&#123;<span class="attr">c</span>:<span class="number">1</span>&#125;&#125;</span><br><span class="line"><span class="keyword">let</span> obj2 = &#123;...obj1&#125;;</span><br><span class="line">obj1.<span class="property">a</span> = <span class="number">2</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1); <span class="comment">//&#123;a:2,b:&#123;c:1&#125;&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2); <span class="comment">//&#123;a:1,b:&#123;c:1&#125;&#125;</span></span><br><span class="line">obj1.<span class="property">b</span>.<span class="property">c</span> = <span class="number">2</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1); <span class="comment">//&#123;a:2,b:&#123;c:2&#125;&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2); <span class="comment">//&#123;a:1,b:&#123;c:2&#125;&#125;</span></span><br></pre></td></tr></table></figure><h4 id="（3）数组方法实现数组浅拷贝"><a href="#（3）数组方法实现数组浅拷贝" class="headerlink" title="（3）数组方法实现数组浅拷贝"></a>（3）数组方法实现数组浅拷贝</h4><h6 id="1）Array-prototype-slice"><a href="#1）Array-prototype-slice" class="headerlink" title="1）Array.prototype.slice"></a><strong>1）Array.prototype.slice</strong></h6><ul><li><code>slice()</code>方法是<code>JavaScript</code>数组的一个方法，这个方法可以从已有数组中返回选定的元素：用法：<code>array.slice(start, end)</code>，该方法不会改变原始数组。</li><li>该方法有两个参数，两个参数都可选，如果<strong>两个参数都不写，就可以实现一个数组的浅拷贝</strong>。</li></ul><h6 id="2）Array-prototype-concat"><a href="#2）Array-prototype-concat" class="headerlink" title="2）Array.prototype.concat"></a><strong>2）Array.prototype.concat</strong></h6><ul><li><code>concat()</code> 方法用于合并两个或多个数组。此方法不会更改现有数组，而是返回一个新数组。</li><li>该方法有两个参数，两个参数都可选，如果<strong>两个参数都不写，就可以实现一个数组的浅拷贝</strong>。</li></ul><h4 id="（4）手写实现浅拷贝"><a href="#（4）手写实现浅拷贝" class="headerlink" title="（4）手写实现浅拷贝"></a>（4）手写实现浅拷贝</h4><p><code>hasOwnProperty</code> 这个方法用来判断一个对象是否自身（而不是通过原型链）包含一个特定的属性。换句话说，它用来检查对象是否有某个自有的属性，而不是从它的原型链上继承来的属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">shallowCopy</span>(<span class="params">obj</span>)&#123;</span><br><span class="line">  <span class="comment">//如果obj不是对象或null，则直接返回它</span></span><br><span class="line">  <span class="keyword">if</span>(!obj||<span class="keyword">typeof</span> obj !==<span class="string">&quot;object&quot;</span>) <span class="keyword">return</span> obj;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//根据object 的类型判断是新建一个数组还是对象</span></span><br><span class="line">  <span class="keyword">let</span> newObject = <span class="title class_">Array</span>.<span class="title function_">isArray</span>(obj)?[]:&#123;&#125;</span><br><span class="line">  <span class="comment">//遍历obj,是obj本身的属性再拷贝</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> obj)&#123;</span><br><span class="line">    <span class="keyword">if</span>(obj.<span class="title function_">hasOwnProperty</span>(key))&#123;</span><br><span class="line">      newObject[key] = obj[key]<span class="comment">//直接赋值，对于引用数据类型只是复制了引用</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> newObject</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h3><h4 id="（1）JSON-parse-JSON-stringify-obj"><a href="#（1）JSON-parse-JSON-stringify-obj" class="headerlink" title="（1）JSON.parse(JSON.stringify(obj))"></a>（1）JSON.parse(JSON.stringify(obj))</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj1 = &#123;  <span class="attr">a</span>: <span class="number">0</span>,</span><br><span class="line">              <span class="attr">b</span>: &#123;</span><br><span class="line">                 <span class="attr">c</span>: <span class="number">0</span></span><br><span class="line">                 &#125;</span><br><span class="line">            &#125;;</span><br><span class="line"><span class="keyword">let</span> obj2 = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj1));</span><br><span class="line">obj1.<span class="property">a</span> = <span class="number">1</span>;</span><br><span class="line">obj1.<span class="property">b</span>.<span class="property">c</span> = <span class="number">1</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1); <span class="comment">// &#123;a: 1, b: &#123;c: 1&#125;&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2); <span class="comment">// &#123;a: 0, b: &#123;c: 0&#125;&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="无法处理特殊数据类型"><a href="#无法处理特殊数据类型" class="headerlink" title="无法处理特殊数据类型"></a><strong>无法处理特殊数据类型</strong></h5><ul><li>函数（<code>Function</code>）：属性值会被完全忽略。</li><li><code>undefined</code>：属性值会被忽略。</li><li><code>Symbol</code>：属性值会被跳过。</li><li><code>NaN</code> 和 <code>Infinity</code>：会被转换为 <code>null</code>。</li><li><code>BigInt</code>：直接报错（<code>TypeError）</code>。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; </span><br><span class="line">  <span class="attr">a</span>: <span class="literal">undefined</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello&quot;</span>),</span><br><span class="line">  <span class="attr">c</span>: <span class="title class_">Symbol</span>(<span class="string">&quot;foo&quot;</span>),</span><br><span class="line">  <span class="attr">d</span>: <span class="title class_">NaN</span>,</span><br><span class="line">  <span class="attr">e</span>: <span class="number">1n</span> <span class="comment">// BigInt</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> copy = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj));</span><br><span class="line"><span class="comment">// 结果：&#123; d: null &#125;（其他属性全部丢失，BigInt 会直接报错）</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="2-无法处理循环引用"><a href="#2-无法处理循环引用" class="headerlink" title="2. 无法处理循环引用"></a>2. 无法处理循环引用</h5><p>如果对象存在循环引用（对象内部属性相互引用），<code>JSON.stringify</code> 会直接报错。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;;</span><br><span class="line">obj.<span class="property">self</span> = obj; <span class="comment">// 循环引用</span></span><br><span class="line"><span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj); <span class="comment">// 报错：TypeError: Converting circular structure to JSON</span></span><br></pre></td></tr></table></figure><h5 id="3-日期对象被转换为字符串"><a href="#3-日期对象被转换为字符串" class="headerlink" title="3. 日期对象被转换为字符串"></a>3. 日期对象被转换为字符串</h5><p><code>Date</code> 类型会被序列化为 ISO 格式的字符串，反序列化后不会恢复为 <code>Date</code> 对象，而是保持字符串形式。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">date</span>: <span class="keyword">new</span> <span class="title class_">Date</span>() &#125;;</span><br><span class="line"><span class="keyword">const</span> copy = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(copy.<span class="property">date</span>); <span class="comment">// 输出字符串，而非 Date 对象（如 &quot;2023-10-01T12:00:00.000Z&quot;）</span></span><br></pre></td></tr></table></figure><h5 id="4-正则表达式、Map、Set-等被处理为普通对象"><a href="#4-正则表达式、Map、Set-等被处理为普通对象" class="headerlink" title="4. 正则表达式、Map、Set 等被处理为普通对象"></a>4. 正则表达式、Map、Set 等被处理为普通对象</h5><p>特殊对象（如 RegExp、Map、Set）会被序列化为空对象 {}，导致数据丢失。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; </span><br><span class="line">  <span class="attr">regex</span>: <span class="regexp">/abc/g</span>, </span><br><span class="line">  <span class="attr">map</span>: <span class="keyword">new</span> <span class="title class_">Map</span>([[<span class="string">&quot;key&quot;</span>, <span class="string">&quot;value&quot;</span>]]), </span><br><span class="line">  <span class="attr">set</span>: <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]) </span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> copy = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj));</span><br><span class="line"><span class="comment">// 结果：&#123; regex: &#123;&#125;, map: &#123;&#125;, set: &#123;&#125; &#125;</span></span><br></pre></td></tr></table></figure><h5 id="5-原型链和构造函数丢失"><a href="#5-原型链和构造函数丢失" class="headerlink" title="5. 原型链和构造函数丢失"></a>5. 原型链和构造函数丢失</h5><p>拷贝后的对象会变成一个普通的 Object 实例，原型的继承关系和构造函数会被丢弃。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123; <span class="variable language_">this</span>.<span class="property">name</span> = name; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> obj = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Alice&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> copy = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(copy <span class="keyword">instanceof</span> <span class="title class_">Person</span>); <span class="comment">// false（原型链断裂）</span></span><br></pre></td></tr></table></figure><h4 id="（2）函数库lodash的-cloneDeep方法"><a href="#（2）函数库lodash的-cloneDeep方法" class="headerlink" title="（2）函数库lodash的_.cloneDeep方法"></a>（2）函数库lodash的_.cloneDeep方法</h4><ol><li><code>npm install lodash</code></li><li><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> _ = <span class="built_in">require</span>(<span class="string">&#x27;lodash&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">b</span>: &#123; <span class="attr">f</span>: &#123; <span class="attr">g</span>: <span class="number">1</span> &#125; &#125;,</span><br><span class="line">    <span class="attr">c</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> obj2 = _.<span class="title function_">cloneDeep</span>(obj1);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1.<span class="property">b</span>.<span class="property">f</span> === obj2.<span class="property">b</span>.<span class="property">f</span>);<span class="comment">// false</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="（3）手写实现深拷贝函数"><a href="#（3）手写实现深拷贝函数" class="headerlink" title="（3）手写实现深拷贝函数"></a>（3）手写实现深拷贝函数</h4><p><code>WeakMap</code>是ES6引入的一种集合类型，与普通Map不同，它的键必须是对象，并且键是弱引用的。这意味着如果没有其他引用指向键对象，该键值对会被垃圾回收。这对于防止内存泄漏很有用。<br><code>new WeakMap() </code>创建一个弱引用键值对集合，用于解决深拷贝中的循环引用问题。</p><ul><li>优势：避免内存泄漏、自动垃圾回收、无需手动清理。</li><li>适用场景：临时存储对象关联关系（如深拷贝、缓存等）。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">deepCopy</span>(<span class="params">obj,map = <span class="keyword">new</span> <span class="built_in">WeakMap</span>()</span>)&#123;</span><br><span class="line">  <span class="comment">//基本类型直接返回</span></span><br><span class="line">  <span class="keyword">if</span> (!object || <span class="keyword">typeof</span> object !== <span class="string">&quot;object&quot;</span>) <span class="keyword">return</span> obj</span><br><span class="line">  <span class="comment">//处理Date情况</span></span><br><span class="line">  <span class="keyword">if</span>(obj <span class="keyword">instanceof</span> <span class="title class_">Date</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Date</span>(obj)</span><br><span class="line">  <span class="comment">//处理RegExp</span></span><br><span class="line">  <span class="keyword">if</span>(obj <span class="keyword">instanceof</span> <span class="title class_">RegExp</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RegExp</span>(obj)</span><br><span class="line">  <span class="comment">// 4. 防止循环引用：用 WeakMap 存储已处理的对象</span></span><br><span class="line">  <span class="keyword">if</span> (map.<span class="title function_">has</span>(obj)) &#123;</span><br><span class="line">      <span class="keyword">return</span> map.<span class="title function_">get</span>(obj);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//创建新对象</span></span><br><span class="line">  <span class="keyword">let</span> cloneObject = <span class="title class_">Array</span>.<span class="title function_">isArray</span>(object) ? [] : &#123;&#125;;</span><br><span class="line">  <span class="comment">// 将当前对象存入 map，避免循环引用</span></span><br><span class="line">  map.<span class="title function_">set</span>(obj, cloneObj);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> obj)&#123;</span><br><span class="line">    <span class="keyword">if</span>(obj.<span class="title function_">hasOwnProperty</span>(key))&#123;</span><br><span class="line">      cloneObject[key] = <span class="title function_">deepCopy</span>(obj[key],map)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> cloneObject</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h3 id="css"><a href="#css" class="headerlink" title="css"></a>css</h3><p>方案一：使用 justify-content: space-between<br>如果你希望盒子之间的空隙相等，且 盒子不紧贴容器的两边，你可以使用 justify-content: space-between，并且给容器加上适当的左右内边距（padding）。<br>使用 justify-content: space-evenly<br>如果你希望每个盒子之间的间距相等，同时包括容器两端的空隙，可以使用 justify-content: space-evenly。</p><h3 id="实现AJAX请求"><a href="#实现AJAX请求" class="headerlink" title="实现AJAX请求"></a>实现AJAX请求</h3><p>AJAX是 Asynchronous JavaScript and XML 的缩写，指的是通过 JavaScript 的 异步通信，从服务器获取 XML 文档从中提取数据，再更新当前网页的对应部分，而不用刷新整个网页。</p><ol><li>创建一个<code>XMLHttpRequest</code>对象</li><li>open方法所需要的参数是请求方法，请求地址，是否异步和用户的认证信息</li><li>setRequestHeader(header, value)：设置请求的 HTTP 头（如果有）。例如可以设置 Content-Type。</li><li>send(data)：发送请求，可以选择性地传递请求体（例如 POST 请求中的数据）。如果是 GET 请求，通常不需要传递数据。</li><li>onreadystatechange：事件监听器，readyState 为 4 表示请求已完成。通过检查 status 来判断请求是否成功（状态码在 200-299 之间表示成功）。</li><li>success 和 error 回调函数：请求成功时执行 success 回调，失败时执行 error 回调。</li></ol><h3 id="发布订阅模式"><a href="#发布订阅模式" class="headerlink" title="发布订阅模式"></a>发布订阅模式</h3><p><code>$on</code>:</p><ul><li>添加私有属性</li><li>保存事件<br><code>$emit</code>触发事件</li><li>接收不定长参数</li><li>循环触发事件<br><code>$off</code>移除事件</li></ul><p><code>$once</code>一次性事件</p><ul><li>调用<code>$on</code>注册事件</li><li>事件内调用<code>$off</code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyEmmiter</span> &#123;</span><br><span class="line">  <span class="comment">//添加私有属性</span></span><br><span class="line">  #handler = &#123;</span><br><span class="line">    <span class="comment">//事件名：[callback,callback]</span></span><br><span class="line">  &#125;</span><br><span class="line">  $on(event, callback) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.#handler[event] === <span class="literal">undefined</span>) <span class="variable language_">this</span>.#handler[event] = []</span><br><span class="line">    <span class="variable language_">this</span>.#handler[event].<span class="title function_">push</span>(callback)</span><br><span class="line">  &#125;</span><br><span class="line">  $emit(event, ...args) &#123;</span><br><span class="line">    <span class="keyword">const</span> funcs = <span class="variable language_">this</span>.#handler[event] || []</span><br><span class="line">    funcs.<span class="title function_">forEach</span>(<span class="function"><span class="params">callback</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">callback</span>(...args)</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  $off(event) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.#handler[event] = <span class="literal">undefined</span></span><br><span class="line">  &#125;</span><br><span class="line">  $once(event, callback) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.$on(event, ...args =&gt; &#123;</span><br><span class="line">      <span class="title function_">callback</span>(...args)</span><br><span class="line">      <span class="variable language_">this</span>.$off(event)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>测试<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;button <span class="keyword">class</span>=<span class="string">&quot;on&quot;</span>&gt;$on&lt;/button&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;e&quot;</span>&gt;</span>$emit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;off&quot;</span>&gt;</span>$off<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;once&quot;</span>&gt;</span>$once<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> bus = <span class="keyword">new</span> <span class="title class_">MyEmmiter</span>()</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.on&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  bus.$on(<span class="string">&#x27;event1&#x27;</span>, <span class="function">() =&gt;</span> &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;回调1&#x27;</span>) &#125;)</span><br><span class="line">  bus.$on(<span class="string">&#x27;event2&#x27;</span>, <span class="function">(<span class="params">name, info</span>) =&gt;</span> &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(name, info) &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.e&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  bus.$emit(<span class="string">&#x27;event1&#x27;</span>)</span><br><span class="line">  bus.$emit(<span class="string">&#x27;event2&#x27;</span>, <span class="string">&#x27;xs&#x27;</span>, <span class="string">&#x27;wqwq&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.off&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  bus.$off(<span class="string">&#x27;event1&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.once&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  bus.$once(<span class="string">&#x27;event3&#x27;</span>, <span class="function"><span class="params">age</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(age))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h2 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h2><h3 id="数组的几种方法"><a href="#数组的几种方法" class="headerlink" title="数组的几种方法"></a>数组的几种方法</h3><h4 id="push"><a href="#push" class="headerlink" title="push"></a>push</h4><p><strong>记得返回数组长度</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">MyPush</span>=<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;<span class="variable language_">arguments</span>.<span class="property">length</span>;i++)&#123;</span><br><span class="line">    <span class="variable language_">this</span>[<span class="variable language_">this</span>.<span class="property">length</span>]=<span class="variable language_">arguments</span>[i]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">length</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h4><p>找到符合条件的元素，返回一个新数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myFilter</span>=<span class="keyword">function</span>(<span class="params">fn</span>)&#123;</span><br><span class="line">  <span class="keyword">let</span> newArr=[]</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> fn !== <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;参数必须是一个函数！&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;<span class="variable language_">this</span>.<span class="property">length</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="title function_">fn</span>(<span class="variable language_">this</span>[i],i,<span class="variable language_">this</span>)</span><br><span class="line">    <span class="keyword">if</span>(result) newArr.<span class="title function_">push</span>(<span class="variable language_">this</span>[i])</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> newArr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="find"><a href="#find" class="headerlink" title="find"></a>find</h4><p>返回数组中满足提供的测试函数的第一个元素的值。否则返回 undefined。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myFind</span>=<span class="keyword">function</span>(<span class="params">fn</span>)&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> fn !== <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;参数必须是一个函数！&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;<span class="variable language_">this</span>.<span class="property">length</span>;i++)&#123;</span><br><span class="line">    result = <span class="title function_">fn</span>(<span class="variable language_">this</span>[i],i,<span class="variable language_">this</span>)</span><br><span class="line">    <span class="keyword">if</span>(result) <span class="keyword">return</span> <span class="variable language_">this</span>[i]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="findIndex"><a href="#findIndex" class="headerlink" title="findIndex"></a>findIndex</h4><p>findIndex() 方法返回数组中满足提供的测试函数的第一个元素的索引。若没有找到对应元素则返回 -1。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myFindIndex</span>=<span class="keyword">function</span>(<span class="params">fn</span>)&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> fn !== <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;参数必须是一个函数！&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;<span class="variable language_">this</span>.<span class="property">length</span>;i++)&#123;</span><br><span class="line">    result = <span class="title function_">fn</span>(<span class="variable language_">this</span>[i],i,<span class="variable language_">this</span>)</span><br><span class="line">    <span class="keyword">if</span>(result) <span class="keyword">return</span> i</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myForEach</span>=<span class="keyword">function</span>(<span class="params">fn</span>)&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> fn !== <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;参数必须是一个函数！&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;<span class="variable language_">this</span>.<span class="property">length</span>;i++)&#123;</span><br><span class="line">    <span class="title function_">fn</span>(<span class="variable language_">this</span>[i],i,<span class="variable language_">this</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="map"><a href="#map" class="headerlink" title="map"></a>map</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myMap</span>=<span class="keyword">function</span>(<span class="params">fn</span>)&#123;</span><br><span class="line">  <span class="keyword">let</span> newArr = []</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> fn !== <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;参数必须是一个函数！&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;<span class="variable language_">this</span>.<span class="property">length</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="title function_">fn</span>(<span class="variable language_">this</span>[i],i,<span class="variable language_">this</span>)</span><br><span class="line">    newArr.<span class="title function_">push</span>(result)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> newArr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="every"><a href="#every" class="headerlink" title="every"></a>every</h4><p>只要有一个不满足条件就返回<code>false</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myEvery</span>=<span class="keyword">function</span>(<span class="params">fn</span>)&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> fn !== <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="title function_">error</span>(<span class="string">&#x27;参数必须是一个函数！&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;<span class="variable language_">this</span>.<span class="property">length</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="title function_">fn</span>(<span class="variable language_">this</span>[i],i,<span class="variable language_">this</span>)</span><br><span class="line">    <span class="keyword">if</span>(!result) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="some"><a href="#some" class="headerlink" title="some"></a>some</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">mySome</span>=<span class="keyword">function</span>(<span class="params">fn</span>)&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> fn !== <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="title function_">error</span>(<span class="string">&#x27;参数必须是一个函数！&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;<span class="variable language_">this</span>.<span class="property">length</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="title function_">fn</span>(<span class="variable language_">this</span>[i],i,<span class="variable language_">this</span>)</span><br><span class="line">    <span class="keyword">if</span>(result) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myReduce</span> = <span class="keyword">function</span>(<span class="params">fn, initValue</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> fn !== <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;参数必须是一个函数！&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> array = <span class="variable language_">this</span>;</span><br><span class="line">  <span class="keyword">let</span> startIndex = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> accumulator = initValue;</span><br><span class="line">  <span class="comment">// 处理未传递初始值的情况</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">arguments</span>.<span class="property">length</span> &lt; <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (array.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;空数组且无初始值时，reduce 无法执行！&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    accumulator = array[<span class="number">0</span>]; <span class="comment">// 初始值设为第一个元素</span></span><br><span class="line">    startIndex = <span class="number">1</span>; <span class="comment">// 从第二个元素开始遍历</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = startIndex; i &lt; array.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    accumulator = <span class="title function_">fn</span>(accumulator, array[i], i, array); </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> accumulator;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> sum = arr.<span class="title function_">myReduce</span>(<span class="function">(<span class="params">acc, cur</span>) =&gt;</span> acc + cur, <span class="number">0</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sum); <span class="comment">// 输出 6（0+1+2+3）</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> words = [<span class="string">&#x27;Hello&#x27;</span>, <span class="string">&#x27;World&#x27;</span>, <span class="string">&#x27;!&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> sentence = words.<span class="title function_">myReduce</span>(<span class="function">(<span class="params">acc, cur</span>) =&gt;</span> acc + <span class="string">&#x27; &#x27;</span> + cur, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sentence); <span class="comment">// 输出 &quot; Hello World !&quot;</span></span><br></pre></td></tr></table></figure><h4 id="for-in"><a href="#for-in" class="headerlink" title="for in"></a>for in</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 手动实现 for...in 逻辑</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">myForIn</span>(<span class="params">obj, callback</span>) &#123;</span><br><span class="line">  <span class="comment">// 遍历对象自身及原型链属性</span></span><br><span class="line">  <span class="keyword">let</span> current = obj;</span><br><span class="line">  <span class="keyword">while</span> (current !== <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="comment">// 获取对象自身可枚举属性（不含 Symbol）</span></span><br><span class="line">    <span class="keyword">const</span> keys = <span class="title class_">Object</span>.<span class="title function_">keys</span>(current);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">of</span> keys) &#123;</span><br><span class="line">      <span class="title function_">callback</span>(key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 向上遍历原型链</span></span><br><span class="line">    current = <span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(current);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">const</span> proto = &#123; <span class="attr">d</span>: <span class="number">4</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> obj = <span class="title class_">Object</span>.<span class="title function_">create</span>(proto);</span><br><span class="line">obj.<span class="property">a</span> = <span class="number">1</span>;</span><br><span class="line">obj.<span class="property">b</span> = <span class="number">2</span>;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&#x27;c&#x27;</span>, &#123; <span class="attr">value</span>: <span class="number">3</span>, <span class="attr">enumerable</span>: <span class="literal">false</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="title function_">myForIn</span>(obj, <span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(key); <span class="comment">// 输出: &#x27;a&#x27;, &#x27;b&#x27;, &#x27;d&#x27;（遍历原型链上的可枚举属性）</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="for-of"><a href="#for-of" class="headerlink" title="for of"></a>for of</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 手动实现 for...of 逻辑</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">myForOf</span>(<span class="params">iterable, callback</span>) &#123;</span><br><span class="line">  <span class="comment">// 获取迭代器对象</span></span><br><span class="line">  <span class="keyword">const</span> iterator = iterable[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]();</span><br><span class="line">  <span class="keyword">let</span> result = iterator.<span class="title function_">next</span>();</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 循环直到迭代完成</span></span><br><span class="line">  <span class="keyword">while</span> (!result.<span class="property">done</span>) &#123;</span><br><span class="line">    <span class="title function_">callback</span>(result.<span class="property">value</span>);</span><br><span class="line">    result = iterator.<span class="title function_">next</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用示例（数组）</span></span><br><span class="line"><span class="title function_">myForOf</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value); <span class="comment">// 输出: 1, 2, 3</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例（字符串）</span></span><br><span class="line"><span class="title function_">myForOf</span>(<span class="string">&#x27;hello&#x27;</span>, <span class="function">(<span class="params">char</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(char); <span class="comment">// 输出: &#x27;h&#x27;, &#x27;e&#x27;, &#x27;l&#x27;, &#x27;l&#x27;, &#x27;o&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="flat"><a href="#flat" class="headerlink" title="flat"></a>flat</h4><h3 id="随机生成值且不能连续生成相同的值"><a href="#随机生成值且不能连续生成相同的值" class="headerlink" title="随机生成值且不能连续生成相同的值"></a>随机生成值且不能连续生成相同的值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">factory</span>(<span class="params">arr</span>)&#123;</span><br><span class="line">  <span class="keyword">let</span> prev</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">gen</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//新生成的随机索引</span></span><br><span class="line">    <span class="keyword">const</span> r = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * arr.<span class="property">length</span>)</span><br><span class="line">    <span class="keyword">if</span>(r!==prev) &#123;</span><br><span class="line">      <span class="comment">//记录当前值</span></span><br><span class="line">      prev=r</span><br><span class="line">      <span class="keyword">return</span> arr[r]</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;<span class="comment">//如果和上一次的索引值相同的话，再次调用函数，记得要return </span></span><br><span class="line">      <span class="comment">//如果不return ,那么本次gen的返回值就是undefined</span></span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">gen</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> gen</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现日期格式化函数"><a href="#实现日期格式化函数" class="headerlink" title="实现日期格式化函数"></a>实现日期格式化函数</h3><h3 id="实现数组的乱序输出-洗牌算法"><a href="#实现数组的乱序输出-洗牌算法" class="headerlink" title="实现数组的乱序输出(洗牌算法)"></a>实现数组的乱序输出(洗牌算法)</h3><p><code>Math.random()</code> 返回一个 <code>[0, 1)</code> 区间的浮点数（包含 0，不包含 1）。<br><code>Math.random() * (max - min) + min;</code> 返回<code>[min,max)</code><br><code>Math.floor(Math.random() * (max - min + 1)) + min;</code> 返回<code>[min,max]</code><br>洗牌算法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = arr.<span class="property">length</span> - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">  <span class="comment">//每次生成的都是0到i</span></span><br><span class="line">  <span class="keyword">const</span> randomIndex = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * (i + <span class="number">1</span>));</span><br><span class="line">  [arr[i], arr[randomIndex]] = [arr[randomIndex], arr[i]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span><br></pre></td></tr></table></figure><p>正向的洗牌算法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>]</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;arr.<span class="property">length</span>-<span class="number">1</span>;i++)&#123;</span><br><span class="line">  <span class="comment">//生成i到length-1</span></span><br><span class="line">  <span class="keyword">const</span> randomIndex = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()*(arr.<span class="property">length</span>-i)+i)</span><br><span class="line">  [arr[i],arr[randomIndex]] = [arr[randomIndex],arr[i]]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意终止条件：<code>i&lt;arr.length-1</code>(避免最后一次无效交换)</p><h3 id="实现数组元素求和"><a href="#实现数组元素求和" class="headerlink" title="实现数组元素求和"></a>实现数组元素求和</h3><ul><li>arr &#x3D; [1,2,3,4,5,6,7,8,9,10]，求和<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">p,c</span>)=&gt;</span>p+c,<span class="number">0</span>)</span><br></pre></td></tr></table></figure></li><li>arr&#x3D;[1,2,3,[[4,5],6],7,8,9]，求和</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,[[<span class="number">4</span>,<span class="number">5</span>],<span class="number">6</span>],<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">toString</span>().<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>).<span class="title function_">reduce</span>( <span class="function">(<span class="params">total,i</span>) =&gt;</span> total + <span class="title class_">Number</span>(i),<span class="number">0</span>));</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sumNestedArray</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> arr.<span class="title function_">flat</span>(<span class="title class_">Infinity</span>).<span class="title function_">reduce</span>(<span class="function">(<span class="params">total, i</span>) =&gt;</span> total + <span class="title class_">Number</span>(i), <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [[<span class="number">4</span>, <span class="number">5</span>], <span class="number">6</span>], <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sumNestedArray</span>(arr)); <span class="comment">// 输出 45</span></span><br></pre></td></tr></table></figure><p>递归</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [[<span class="number">4</span>, <span class="number">5</span>], <span class="number">6</span>], <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">flattenAndSum</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> flattened = arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">p, c</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(c)) <span class="keyword">return</span> p.<span class="title function_">concat</span>(<span class="title function_">flattenAndSum</span>(c))</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">typeof</span> c === <span class="string">&#x27;number&#x27;</span> ? p.<span class="title function_">concat</span>(c) : p.<span class="title function_">concat</span>(<span class="number">0</span>)</span><br><span class="line">  &#125;, [])</span><br><span class="line">  <span class="keyword">return</span> flattened.<span class="title function_">reduce</span>(<span class="function">(<span class="params">p, c</span>) =&gt;</span> p + c, <span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">flattenAndSum</span>(arr))<span class="comment">//45</span></span><br></pre></td></tr></table></figure><h3 id="实现数组扁平化"><a href="#实现数组扁平化" class="headerlink" title="实现数组扁平化"></a>实现数组扁平化</h3><h4 id="1-递归"><a href="#1-递归" class="headerlink" title="1.递归"></a>1.递归</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [[<span class="number">4</span>, <span class="number">5</span>], <span class="number">6</span>], <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">flatten</span>(<span class="params">arr</span>)&#123;</span><br><span class="line">  <span class="keyword">let</span> result = []</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;arr.<span class="property">length</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr[i]))&#123;</span><br><span class="line">      result = result.<span class="title function_">concat</span>(<span class="title function_">flatten</span>(arr[i]))</span><br><span class="line">    &#125;<span class="keyword">else</span> result.<span class="title function_">push</span>(arr[i])</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">flatten</span>(arr))</span><br></pre></td></tr></table></figure><h4 id="2-reduce实现"><a href="#2-reduce实现" class="headerlink" title="2.reduce实现"></a>2.reduce实现</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [[<span class="number">4</span>, <span class="number">5</span>], <span class="number">6</span>], <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">flatten</span>(<span class="params">arr</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev,cur</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> prev.<span class="title function_">concat</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>(cur)?<span class="title function_">flatten</span>(cur):cur)</span><br><span class="line">  &#125;,[])</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">flatten</span>(arr))</span><br></pre></td></tr></table></figure><h4 id="3-扩展运算符"><a href="#3-扩展运算符" class="headerlink" title="3.扩展运算符"></a>3.扩展运算符</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [[<span class="number">4</span>, <span class="number">5</span>], <span class="number">6</span>], <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">flatten</span>(<span class="params">arr</span>)&#123;</span><br><span class="line">  <span class="keyword">while</span>(arr.<span class="title function_">some</span>(<span class="function"><span class="params">i</span>=&gt;</span><span class="title class_">Array</span>.<span class="title function_">isArray</span>(i)))&#123;</span><br><span class="line">    arr = [].<span class="title function_">concat</span>(...arr)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">flatten</span>(arr));</span><br></pre></td></tr></table></figure><h4 id="4-split-toString-实现"><a href="#4-split-toString-实现" class="headerlink" title="4.split + toString 实现"></a>4.split + toString 实现</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [[<span class="number">4</span>, <span class="number">5</span>], <span class="number">6</span>], <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">flatten</span>(<span class="params">arr</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> arr.<span class="title function_">toString</span>().<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>).<span class="title function_">map</span>(<span class="function"><span class="params">i</span>=&gt;</span><span class="title class_">Number</span>(i))</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">flatten</span>(arr))</span><br></pre></td></tr></table></figure><h4 id="5-ES6中的flat"><a href="#5-ES6中的flat" class="headerlink" title="5.ES6中的flat"></a>5.ES6中的flat</h4><p><code>arr.flat([depth])</code><br>其中 depth 是 flat 的参数，depth 是可以传递数组的展开深度（默认不填、数值是 1），即展开一层数组。如果层数不确定，参数可以传进 Infinity，代表不论多少层都要展开：</p><h4 id="6-正则-JSON"><a href="#6-正则-JSON" class="headerlink" title="6.正则+JSON"></a>6.正则+JSON</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>]]], <span class="number">6</span>];</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">flatten</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> str = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(arr);</span><br><span class="line">  str = str.<span class="title function_">replace</span>(<span class="regexp">/(\[|\])/g</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">  <span class="comment">// 拼接最外层，变成JSON能解析的格式</span></span><br><span class="line">  str = <span class="string">&#x27;[&#x27;</span> + str + <span class="string">&#x27;]&#x27;</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">JSON</span>.<span class="title function_">parse</span>(str); </span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">flatten</span>(arr)); <span class="comment">//  [1, 2, 3, 4，5]</span></span><br></pre></td></tr></table></figure><h3 id="实现数组去重"><a href="#实现数组去重" class="headerlink" title="实现数组去重"></a>实现数组去重</h3><p>给定某无序数组，要求去除数组中的重复数字并且返回新的无重复数组。<br>ES6方法（使用数据结构集合）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">8</span>];</span><br><span class="line"><span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="keyword">new</span> <span class="title class_">Set</span>(array)); <span class="comment">// [1, 2, 3, 5, 9, 8]</span></span><br></pre></td></tr></table></figure><p><code>Array.from()</code> 静态方法从可迭代或类数组对象创建一个新的浅拷贝的数组实例。<br>ES5方法：使用map存储不重复的数字</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">8</span>];</span><br><span class="line"><span class="title function_">uniqueArray</span>(array); <span class="comment">// [1, 2, 3, 5, 9, 8]</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">uniqueArray</span>(<span class="params">arr</span>)&#123;</span><br><span class="line">  <span class="keyword">let</span> map = &#123;&#125;</span><br><span class="line">  <span class="keyword">let</span> res = []</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr.<span class="property">length</span>;i++)&#123;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>方法2：<code>filter</code> + <code>indexOf</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> uniqueArr = arr.<span class="title function_">filter</span>(<span class="function">(<span class="params">item, index</span>) =&gt;</span> arr.<span class="title function_">indexOf</span>(item) === index);</span><br></pre></td></tr></table></figure><p><code>indexOf()</code> 方法返回数组中第一次出现给定元素的下标，如果不存在则返回 -1。<br>方法3：<code>reduce</code>+<code>includes</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> uniqueArr = arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, cur</span>) =&gt;</span> acc.<span class="title function_">includes</span>(cur) ? acc : [...acc, cur], []);</span><br></pre></td></tr></table></figure><h3 id="实现字符串的repeat方法"><a href="#实现字符串的repeat方法" class="headerlink" title="实现字符串的repeat方法"></a>实现字符串的repeat方法</h3><p><code>str.repeat(重复次数)</code><br>数组是空的，所以 <code>join()</code> 实际上会在 n 个空槽之间插入 s，最终得到一个 s 重复 n 次的字符串。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">repeat</span>(<span class="params">s,n</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> (<span class="keyword">new</span> <span class="title class_">Array</span>(n+<span class="number">1</span>)).<span class="title function_">join</span>(s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>递归：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">repeat</span>(<span class="params">s,n</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> (n&gt;<span class="number">0</span>)?s.<span class="title function_">concat</span>(<span class="title function_">repeat</span>(s,--n)) : <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现字符串翻转"><a href="#实现字符串翻转" class="headerlink" title="实现字符串翻转"></a>实现字符串翻转</h3><p>在字符串的原型链上添加一个方法，实现字符串的翻转</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;abcd&#x27;</span></span><br><span class="line"><span class="title class_">String</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">_reverse</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>).<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">_reverse</span>())</span><br></pre></td></tr></table></figure><h3 id="实现类数组转化为数组"><a href="#实现类数组转化为数组" class="headerlink" title="实现类数组转化为数组"></a>实现类数组转化为数组</h3><ul><li>使用扩展运算符<code>let arr = [...arguments];</code></li><li>通过 <code>Array.from</code> 方法来实现转换<code>Array.from(arrayLike)</code></li><li>通过<code>call</code>调用数组的<strong>slice</strong>方法实现转换<br><code>Array.prototype.slice.call(arrayLike)</code></li><li>通过<code>call</code>调用数组的<strong>splice</strong>方法来实现转换<br><code>Array.prototype.splice.call(arrayLike,0)</code></li><li>通过 <code>apply</code> 调用数组的<strong>concat</strong>方法来实现转换<br><code>Array.prototype.concat.apply([],arrayLike)</code></li></ul><h3 id="使用reduce求和"><a href="#使用reduce求和" class="headerlink" title="使用reduce求和"></a>使用reduce求和</h3><p>arr &#x3D; [1,2,3,4,5,6,7,8,9,10]，求和</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>]</span><br><span class="line">arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev,cur</span>)=&gt;</span> prev+cur,<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>arr &#x3D; [1,2,3,[[4,5],6],7,8,9]，求和</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,[[<span class="number">4</span>,<span class="number">5</span>],<span class="number">6</span>],<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]</span><br><span class="line">arr.<span class="title function_">flat</span>(<span class="title class_">Infinity</span>).<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev,cur</span>)=&gt;</span>prev+cur,<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>arr &#x3D; [{a:1, b:3}, {a:2, b:3, c:4}, {a:3}]，求和</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [&#123;<span class="attr">a</span>:<span class="number">1</span>, <span class="attr">b</span>:<span class="number">3</span>&#125;, &#123;<span class="attr">a</span>:<span class="number">2</span>, <span class="attr">b</span>:<span class="number">3</span>, <span class="attr">c</span>:<span class="number">4</span>&#125;, &#123;<span class="attr">a</span>:<span class="number">3</span>&#125;]</span><br><span class="line">arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev,cur</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> prev + cur[<span class="string">&#x27;a&#x27;</span>]</span><br><span class="line">&#125;,<span class="number">0</span>)</span><br></pre></td></tr></table></figure><h3 id="怎么求多个数组的交集"><a href="#怎么求多个数组的交集" class="headerlink" title="怎么求多个数组的交集"></a>怎么求多个数组的交集</h3><ol><li><p>使用<code>filter</code>和<code>includes</code></p></li><li><p>使用<code>Set</code>和<code>reduce</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>]</span><br><span class="line"><span class="keyword">const</span> arr3 = [<span class="number">3</span>,<span class="number">6</span>]</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">intersection</span> = (<span class="params">...arrays</span>)=&gt;&#123;</span><br><span class="line">  <span class="keyword">return</span> arrays.<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc,cur</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [...<span class="keyword">new</span> <span class="title class_">Set</span>(acc)].<span class="title function_">filter</span>(<span class="function"><span class="params">item</span>=&gt;</span><span class="keyword">new</span> <span class="title class_">Set</span>(cur).<span class="title function_">has</span>(item))</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">intersection</span>(arr1,arr2,arr3))</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><code>lodash</code>库</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">&#x27;lodash&#x27;</span></span><br><span class="line"><span class="keyword">const</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>]</span><br><span class="line"><span class="keyword">const</span> arr3 = [<span class="number">3</span>,<span class="number">6</span>]</span><br><span class="line"><span class="keyword">const</span> result = _.<span class="title function_">intersection</span>(arr1,arr2,arr3)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br></pre></td></tr></table></figure></li></ol><h3 id="快排"><a href="#快排" class="headerlink" title="快排"></a>快排</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">quickSort</span>(<span class="params">arr, low = <span class="number">0</span>, high = arr.length - <span class="number">1</span></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (low &lt; high) &#123;</span><br><span class="line">    <span class="keyword">const</span> pivotIndex = <span class="title function_">partition</span>(arr, low, high);</span><br><span class="line">    <span class="title function_">quickSort</span>(arr, low, pivotIndex - <span class="number">1</span>);</span><br><span class="line">    <span class="title function_">quickSort</span>(arr, pivotIndex + <span class="number">1</span>, high);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">partition</span>(<span class="params">arr, low, high</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> pivot = arr[high]; </span><br><span class="line">  <span class="keyword">let</span> i = low - <span class="number">1</span>; </span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> j = low; j &lt; high; j++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[j] &lt;= pivot) &#123;<span class="comment">//如果小于基准元素，就和基准下标同时变化</span></span><br><span class="line">      i++;</span><br><span class="line">      [arr[i], arr[j]] = [arr[j], arr[i]];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//i一定指向最后一个比基准元素小的</span></span><br><span class="line">  [arr[i + <span class="number">1</span>], arr[high]] = [arr[high], arr[i + <span class="number">1</span>]];</span><br><span class="line">  <span class="keyword">return</span> i + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">9</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">2</span>, <span class="number">14</span>, <span class="number">3</span>, <span class="number">10</span>];</span><br><span class="line"><span class="title function_">quicksort</span>(arr);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// 输出: [2, 3, 5, 7, 9, 10, 11, 12, 14]</span></span><br></pre></td></tr></table></figure><h2 id="场景应用"><a href="#场景应用" class="headerlink" title="场景应用"></a>场景应用</h2><h3 id="循环打印红绿灯"><a href="#循环打印红绿灯" class="headerlink" title="循环打印红绿灯"></a>循环打印红绿灯</h3><h3 id="实现每隔一秒打印1，2，3，4"><a href="#实现每隔一秒打印1，2，3，4" class="headerlink" title="实现每隔一秒打印1，2，3，4"></a>实现每隔一秒打印1，2，3，4</h3><p><code>var i</code> 是函数作用域变量，意味着它在整个 for 循环的生命周期中是同一个变量，循环结束时 i 变成 5。<br><code>setTimeout()</code> 是异步操作，它会在 <code>i * 1000</code> 毫秒后执行。<br>如果直接使用 <code>setTimeout(console.log(i), i * 1000)</code>，它会打印 5 次 5，因为 i 的最终值是 5。<br>使用 <code>IIFE</code>（立即执行函数表达式）<br><code>(function(i) &#123; ... &#125;)(i)</code> 立即执行，并创建一个新的作用域。<br>这里的 i 是传入 <code>IIFE </code>的参数，相当于在每次循环时都复制了当前 i 的值并在独立作用域中保存。<br>因此，每个 <code>setTimeout</code>捕获的是不同的 i 值，导致依次输出 <code>0, 1, 2, 3, 4</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;=<span class="number">5</span>;i++)&#123;</span><br><span class="line">  (<span class="keyword">function</span>(<span class="params">i</span>)&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">    &#125;,i*<span class="number">1000</span>)</span><br><span class="line">  &#125;)(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>let</code> 具有块级作用域，每次循环都会创建一个新的 i 变量，每次 <code>setTimeout </code>都会绑定当前的 i 值。<br>因为 <code>let</code> 在 for 循环的每次迭代中都会创建一个新的 i 变量，所以 <code>setTimeout </code>捕获的是正确的 i 值。<br><code>setTimeout</code> 的延迟时间是从每个 <code>setTimeout</code> 被设置时开始计算的，而不是从上一个 <code>setTimeout</code> 执行完后开始计算。因此，在你的代码中，所有的 <code>setTimeout</code> 是几乎同时被设置的，只是它们的延迟时间不同。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">  &#125;,i*<span class="number">1000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="小孩报数问题"><a href="#小孩报数问题" class="headerlink" title="小孩报数问题"></a>小孩报数问题</h3><p>有30个小孩儿，编号从1-30，围成一圈依此报数，1、2、3 数到 3 的小孩儿退出这个圈， 然后下一个小孩 重新报数 1、2、3，问最后剩下的那个小孩儿的编号是多少?</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">childNum</span>(<span class="params">num, count</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> allplayer = []; </span><br><span class="line">    <span class="comment">//初始化玩家编号数组   </span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; num; i++)&#123;</span><br><span class="line">        allplayer[i] = i + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> exitCount = <span class="number">0</span>;    <span class="comment">// 离开人数</span></span><br><span class="line">    <span class="keyword">let</span> counter = <span class="number">0</span>;      <span class="comment">// 记录报数</span></span><br><span class="line">    <span class="keyword">let</span> curIndex = <span class="number">0</span>;     <span class="comment">// 当前下标</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(exitCount &lt; num - <span class="number">1</span>)&#123;<span class="comment">//剩最后一个人的时候跳出循环</span></span><br><span class="line">        <span class="comment">//当前玩家没有离开，则报数</span></span><br><span class="line">        <span class="keyword">if</span>(allplayer[curIndex] !== <span class="number">0</span>) counter++;    </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(counter == count)&#123;</span><br><span class="line">            allplayer[curIndex] = <span class="number">0</span>;<span class="comment">//离开玩家标记为0                </span></span><br><span class="line">            counter = <span class="number">0</span>;</span><br><span class="line">            exitCount++;  </span><br><span class="line">        &#125;</span><br><span class="line">        curIndex++;</span><br><span class="line">        <span class="keyword">if</span>(curIndex == num)&#123;<span class="comment">//如果是本轮循环的最后一个人报数，重新开始</span></span><br><span class="line">            curIndex = <span class="number">0</span>             </span><br><span class="line">        &#125;;           </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; num; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(allplayer[i] !== <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> allplayer[i]</span><br><span class="line">        &#125;      </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">childNum</span>(<span class="number">30</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure><h3 id="将数字每千分位用逗号隔开"><a href="#将数字每千分位用逗号隔开" class="headerlink" title="将数字每千分位用逗号隔开"></a>将数字每千分位用逗号隔开</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num=<span class="number">1234567</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num.<span class="title function_">toLocaleString</span>())</span><br></pre></td></tr></table></figure><p><strong>数字有小数版本：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">format</span>(<span class="params">n</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> num = n.<span class="title function_">toString</span>();</span><br><span class="line">  <span class="comment">// 分离整数和小数部分</span></span><br><span class="line">  <span class="keyword">let</span> [integerPart, decimalPart] = num.<span class="title function_">split</span>(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">  decimalPart = decimalPart ? <span class="string">&#x27;.&#x27;</span> + decimalPart : <span class="string">&#x27;&#x27;</span>; <span class="comment">// 保留小数部分（含小数点）</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 仅对整数部分处理千位分隔</span></span><br><span class="line">  <span class="keyword">let</span> len = integerPart.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">if</span> (len &lt;= <span class="number">3</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> integerPart + decimalPart;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> remainder = len % <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">let</span> formattedInteger = remainder &gt; <span class="number">0</span></span><br><span class="line">      ? integerPart.<span class="title function_">slice</span>(<span class="number">0</span>, remainder) + <span class="string">&#x27;,&#x27;</span> + integerPart.<span class="title function_">slice</span>(remainder).<span class="title function_">match</span>(<span class="regexp">/\d&#123;3&#125;/g</span>).<span class="title function_">join</span>(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">      : integerPart.<span class="title function_">match</span>(<span class="regexp">/\d&#123;3&#125;/g</span>).<span class="title function_">join</span>(<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> formattedInteger + decimalPart;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">format</span>(<span class="number">12323.33</span>)  <span class="comment">// &#x27;12,323.33&#x27;</span></span><br></pre></td></tr></table></figure><p><code>/\d&#123;3&#125;/g</code> 的意思是“在字符串中找到所有<strong>由三个连续数字</strong>组成的子串”。<br><code>\d</code>: 匹配任何数字字符（等价于<code> [0-9]</code>）。<br><code>&#123;3&#125;</code>: 表示前面的模式（在这里是 <code>\d</code>）必须出现恰好 3 次。<br><code>g</code>: 全局标志，表示在整个字符串中查找所有匹配项，而不仅仅是找到第一个匹配项后停止。<br><strong>数字无小数版本：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">format</span> = n =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> num = n.<span class="title function_">toString</span>() </span><br><span class="line">    <span class="keyword">let</span> len = num.<span class="property">length</span></span><br><span class="line">    <span class="keyword">if</span> (len &lt;= <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> num</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> remainder = len % <span class="number">3</span></span><br><span class="line">        <span class="keyword">if</span> (remainder &gt; <span class="number">0</span>) &#123; <span class="comment">// 不是3的整数倍</span></span><br><span class="line">            <span class="keyword">return</span> num.<span class="title function_">slice</span>(<span class="number">0</span>, remainder) + <span class="string">&#x27;,&#x27;</span> + num.<span class="title function_">slice</span>(remainder, len).<span class="title function_">match</span>(<span class="regexp">/\d&#123;3&#125;/g</span>).<span class="title function_">join</span>(<span class="string">&#x27;,&#x27;</span>) </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 是3的整数倍</span></span><br><span class="line">            <span class="keyword">return</span> num.<span class="title function_">slice</span>(<span class="number">0</span>, len).<span class="title function_">match</span>(<span class="regexp">/\d&#123;3&#125;/g</span>).<span class="title function_">join</span>(<span class="string">&#x27;,&#x27;</span>) </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">format</span>(<span class="number">1232323</span>)  <span class="comment">// &#x27;1,232,323&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="双向数据绑定"><a href="#双向数据绑定" class="headerlink" title="双向数据绑定"></a>双向数据绑定</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> input = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;input&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> span = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;span&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj,<span class="string">&#x27;text&#x27;</span>,&#123;</span><br><span class="line">  <span class="attr">configurable</span>:<span class="literal">true</span>,<span class="comment">//允许删除或重新定义属性。</span></span><br><span class="line">  <span class="attr">enumerable</span>:<span class="literal">true</span>,<span class="comment">//可枚举，决定属性是否出现在 for...in和 Object.keys 里</span></span><br><span class="line">  <span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;获取数据&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">set</span>(<span class="params">newVal</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;数据更新了&#x27;</span>)</span><br><span class="line">    input.<span class="property">value</span> = newVal</span><br><span class="line">    span.<span class="property">innerHTML</span> = newVal</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//将input框的变化绑定到obj身上</span></span><br><span class="line">input.<span class="title function_">addEventListener</span>(<span class="string">&#x27;keyup&#x27;</span>,<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">  obj.<span class="property">text</span> = e.<span class="property">target</span>.<span class="property">value</span><span class="comment">//input 的当前值赋给 obj.text</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="二维数组斜向打印"><a href="#二维数组斜向打印" class="headerlink" title="二维数组斜向打印"></a>二维数组斜向打印</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">diagonalTraverse</span>(<span class="params">matrix</span>) &#123;</span><br><span class="line">  <span class="comment">//确保是一个二维数组</span></span><br><span class="line">  <span class="keyword">if</span> (!matrix || matrix.<span class="property">length</span> === <span class="number">0</span>) <span class="keyword">return</span> [];</span><br><span class="line">  <span class="keyword">const</span> rows = matrix.<span class="property">length</span>, cols = matrix[<span class="number">0</span>].<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">const</span> result = [];</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> s = <span class="number">0</span>; s &lt;= rows + cols - <span class="number">2</span>; s++) &#123;</span><br><span class="line">      <span class="comment">// 确定当前对角线 i 的范围</span></span><br><span class="line">      <span class="keyword">const</span> iStart = <span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="number">0</span>, s - (cols - <span class="number">1</span>));</span><br><span class="line">      <span class="keyword">const</span> iEnd = <span class="title class_">Math</span>.<span class="title function_">min</span>(rows - <span class="number">1</span>, s);</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 遍历 i，收集元素</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = iStart; i &lt;= iEnd; i++) &#123;</span><br><span class="line">          <span class="keyword">const</span> j = s - i;</span><br><span class="line">          result.<span class="title function_">push</span>(matrix[i][j]);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="从-0-到给定数-n-之间所有数字各个位上-1-出现的总次数的代码。"><a href="#从-0-到给定数-n-之间所有数字各个位上-1-出现的总次数的代码。" class="headerlink" title="从 0 到给定数 n 之间所有数字各个位上 1 出现的总次数的代码。"></a>从 0 到给定数 n 之间所有数字各个位上 1 出现的总次数的代码。</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">countDigitOne</span>(<span class="params">n</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> base = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (<span class="title class_">Math</span>.<span class="title function_">floor</span>(n / base) !== <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// 高位部分</span></span><br><span class="line">      <span class="keyword">const</span> higher = <span class="title class_">Math</span>.<span class="title function_">floor</span>(n / (base * <span class="number">10</span>));</span><br><span class="line">      <span class="comment">// 当前位</span></span><br><span class="line">      <span class="keyword">const</span> current = <span class="title class_">Math</span>.<span class="title function_">floor</span>((n / base) % <span class="number">10</span>);</span><br><span class="line">      <span class="comment">// 低位部分</span></span><br><span class="line">      <span class="keyword">const</span> lower = n % base;</span><br><span class="line">      <span class="comment">//当前位为0</span></span><br><span class="line">      <span class="keyword">if</span> (current === <span class="number">0</span>) &#123;</span><br><span class="line">          count += higher * base;</span><br><span class="line">          <span class="comment">//当前位为1</span></span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (current === <span class="number">1</span>) &#123;</span><br><span class="line">          count += higher * base + lower + <span class="number">1</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;<span class="comment">//当前位大于1</span></span><br><span class="line">          count += (higher + <span class="number">1</span>) * base;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 处理下一位</span></span><br><span class="line">      base *= <span class="number">10</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">const</span> n = <span class="number">259</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`从 0 到 <span class="subst">$&#123;n&#125;</span> 之间所有数字各个位上 1 出现的总次数: <span class="subst">$&#123;countDigitOne(n)&#125;</span>`</span>);</span><br></pre></td></tr></table></figure><h3 id="输出多级嵌套解构的Object的所有key"><a href="#输出多级嵌套解构的Object的所有key" class="headerlink" title="输出多级嵌套解构的Object的所有key"></a>输出多级嵌套解构的Object的所有key</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="string">&quot;12&quot;</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="string">&quot;23&quot;</span>,</span><br><span class="line">  <span class="attr">first</span>: &#123;</span><br><span class="line">    <span class="attr">c</span>: <span class="string">&quot;34&quot;</span>,</span><br><span class="line">    <span class="attr">d</span>: <span class="string">&quot;45&quot;</span>,</span><br><span class="line">    <span class="attr">second</span>: &#123; <span class="number">3</span>: <span class="string">&quot;56&quot;</span>, <span class="attr">f</span>: <span class="string">&quot;67&quot;</span>, <span class="attr">three</span>: &#123; <span class="attr">g</span>: <span class="string">&quot;78&quot;</span>, <span class="attr">h</span>: <span class="string">&quot;89&quot;</span>, <span class="attr">i</span>: <span class="string">&quot;90&quot;</span> &#125; &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">printKey</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> result = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="comment">//如果是一个对象</span></span><br><span class="line">    result.<span class="title function_">push</span>(key)</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> obj[key] === <span class="string">&quot;object&quot;</span>) result = result.<span class="title function_">concat</span>(<span class="title function_">printKey</span>(obj[key]))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">printKey</span>(obj)) </span><br></pre></td></tr></table></figure><h2 id="倒计时"><a href="#倒计时" class="headerlink" title="倒计时"></a>倒计时</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> deadline = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&#x27;2025-3-8 00:00&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> daySpan = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.day&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> hourSpan = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.hour&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> minSpan = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.min&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> sSpan = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.s&#x27;</span>)</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">countDown</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> now = <span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line">  timeRemaining = deadline - now</span><br><span class="line">  <span class="keyword">let</span> day, hour, minute, second</span><br><span class="line">  <span class="keyword">if</span> (timeRemaining &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">  second = <span class="title class_">Math</span>.<span class="title function_">floor</span>(timeRemaining / <span class="number">1000</span> % <span class="number">60</span>)</span><br><span class="line">  minute = <span class="title class_">Math</span>.<span class="title function_">floor</span>(timeRemaining / <span class="number">1000</span> / <span class="number">60</span> % <span class="number">60</span>)</span><br><span class="line">  hour = <span class="title class_">Math</span>.<span class="title function_">floor</span>(timeRemaining / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span> % <span class="number">24</span>)</span><br><span class="line">  day = <span class="title class_">Math</span>.<span class="title function_">floor</span>(timeRemaining / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span> / <span class="number">24</span>)</span><br><span class="line">  daySpan.<span class="property">innerHTML</span> = day</span><br><span class="line">  minSpan.<span class="property">innerHTML</span> = minute</span><br><span class="line">  hourSpan.<span class="property">innerHTML</span> = hour</span><br><span class="line">  sSpan.<span class="property">innerHTML</span> = second</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">setInterval</span>(countDown, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure><h2 id="实现eventBus"><a href="#实现eventBus" class="headerlink" title="实现eventBus"></a>实现eventBus</h2><ol><li>注册事件：订阅某个事件</li><li>触发事件：发布某个事件，通知所有订阅者</li><li>移除事件：取消某个订阅事件<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">EventBus</span>&#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">events</span> = &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">on</span>(<span class="params">eventName,callback</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="variable language_">this</span>.<span class="property">events</span>[eventName])&#123;<span class="comment">//如果不存在这个事件</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">events</span>[eventName]=[]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">events</span>[eventName].<span class="title function_">push</span>(callback)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">emit</span>(<span class="params">eventName,...args</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">events</span>[eventName])&#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">events</span>[eventName].<span class="title function_">forEach</span>(<span class="function"><span class="params">callback</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="title function_">callback</span>(...args)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">`No event listeners registered for event: <span class="subst">$&#123;eventName&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">off</span>(<span class="params">eventName,callback</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">events</span>[eventName])&#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">events</span>[eventName]=<span class="variable language_">this</span>.<span class="property">events</span>[eventName].<span class="title function_">filter</span>(<span class="function"><span class="params">cb</span>=&gt;</span>cb!==callback)</span><br><span class="line">      <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">events</span>[eventName].<span class="property">length</span>===<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">delete</span> <span class="variable language_">this</span>.<span class="property">events</span>[eventName]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">once</span>(<span class="params">eventName,callback</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">wrapper</span> = (<span class="params">...args</span>)=&gt;&#123;</span><br><span class="line">      <span class="title function_">callback</span>(...args)</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">off</span>(eventName,wrapper)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">on</span>(eventName, wrapper);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">getEventList</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;...<span class="variable language_">this</span>.<span class="property">events</span>&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">clearAllEvents</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">events</span> = &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> eventBus = <span class="keyword">new</span> <span class="title class_">EventBus</span>()</span><br></pre></td></tr></table></figure></li></ol><h2 id="将class转换为function"><a href="#将class转换为function" class="headerlink" title="将class转换为function"></a>将class转换为function</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Example</span>&#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span>=name</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">func</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>类是在严格模式下的</li><li>类中的函数不可枚举</li><li>类通过new使用</li><li>类中的函数</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Example</span>(<span class="params">name</span>)&#123;</span><br><span class="line">  <span class="comment">//验证this的指向</span></span><br><span class="line">  <span class="keyword">if</span>(!(<span class="variable language_">this</span> <span class="keyword">instanceof</span> <span class="title class_">Example</span>))&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(</span><br><span class="line">      <span class="string">`Class constructor Example cannot be invoked without &#x27;new`</span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span>=name</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="title class_">Example</span>.<span class="property"><span class="keyword">prototype</span></span>,<span class="string">&#x27;func&#x27;</span>,&#123;</span><br><span class="line">  <span class="attr">value</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">     <span class="keyword">if</span>(!(<span class="variable language_">this</span> <span class="keyword">instanceof</span> <span class="title class_">Example</span>))&#123;<span class="comment">//确保不能通过new调用</span></span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(</span><br><span class="line">        <span class="string">`e.func is not a constructor`</span></span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="attr">enumerable</span>:<span class="literal">false</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>js中this的指向</title>
      <link href="/2025/01/17/js%E4%B8%ADthis%E7%9A%84%E6%8C%87%E5%90%91/"/>
      <url>/2025/01/17/js%E4%B8%ADthis%E7%9A%84%E6%8C%87%E5%90%91/</url>
      
        <content type="html"><![CDATA[<h2 id="使用场合"><a href="#使用场合" class="headerlink" title="使用场合"></a>使用场合</h2><h3 id="全局环境下"><a href="#全局环境下" class="headerlink" title="全局环境下"></a>全局环境下</h3><ul><li><code>this</code>始终指向全局对象(window),无论是否严格模式<br><code>console.log(this === window) //true</code></li><li>普通函数<br>非严格模式<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">f</span>() <span class="comment">//window</span></span><br></pre></td></tr></table></figure>严格模式下<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="string">&#x27;use strict&#x27;</span><span class="comment">//需要写在最顶端</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)<span class="comment">//undefined</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">f1</span>()</span><br></pre></td></tr></table></figure></li></ul><h3 id="在构造函数中，指向实例对象"><a href="#在构造函数中，指向实例对象" class="headerlink" title="在构造函数中，指向实例对象"></a>在构造函数中，指向实例对象</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">F</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> person = <span class="keyword">new</span> <span class="title function_">F</span>(<span class="string">&#x27;zs&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="对象方法中"><a href="#对象方法中" class="headerlink" title="对象方法中"></a>对象方法中</h3><ul><li>由于对象的属性可以赋给另一个对象，所以属性所在的当前对象是可变的，即this的指向是可变的。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> A = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">  <span class="attr">describe</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;姓名：&#x27;</span> + <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> B = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;李四&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">B.<span class="property">describe</span> = A.<span class="property">describe</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(B.<span class="title function_">describe</span>())<span class="comment">// &quot;姓名：李四&quot;</span></span><br></pre></td></tr></table></figure></li><li>只要函数被赋给另一个变量，this的指向就会被改变</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> A = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">  <span class="attr">describe</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;姓名：&#x27;</span> + <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;李四&#x27;</span>;</span><br><span class="line"><span class="comment">// global.name = &#x27;李四&#x27;</span></span><br><span class="line"><span class="keyword">var</span> f = A.<span class="property">describe</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">f</span>())<span class="comment">// &quot;姓名：李四&quot;</span></span><br></pre></td></tr></table></figure><p>这里注意，如果是在<code>nodejs</code>环境下运行的话，<code>this</code>的指向是<code>global</code>，在浏览器环境下运行才是<code>windows</code><br>因为是<code>windows</code>调用的<code>f()</code>,所以指向是<code>windows</code>,因此此时的<code>name</code>为全局变量的<code>name</code>值</p><ul><li>如果this所在的方法不在对象的第一层，这时this只是指向当前一层的对象，而不会继承更上面的层。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;ls&#x27;</span>,</span><br><span class="line">  <span class="attr">b</span>: &#123;</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="attr">c</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)<span class="comment">//undefined</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">age</span>)<span class="comment">//age</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">a.<span class="property">b</span>.<span class="title function_">c</span>()</span><br></pre></td></tr></table></figure></li></ul><h3 id="数组中的"><a href="#数组中的" class="headerlink" title="数组中的"></a>数组中的</h3><p>数组的map和foreach方法，允许提供一个函数作为参数。这个函数内部不应该使用this。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line">  <span class="attr">arr</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">  <span class="attr">b</span>: <span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line">  <span class="attr">f</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">arr</span>.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">item</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">b</span>)<span class="comment">// undefined</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)<span class="comment">//window</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">a.<span class="title function_">f</span>()</span><br></pre></td></tr></table></figure><p>要想让上述两个方法的<code>this</code>指向该对象，可以使用箭头函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line">  <span class="attr">arr</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">  <span class="attr">b</span>: <span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line">  <span class="attr">f</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">arr</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">b</span> + item)<span class="comment">// hello1 hello2 hello3</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">a.<span class="title function_">f</span>()</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line">  <span class="attr">arr</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">  <span class="attr">b</span>: <span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line">  <span class="attr">f</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> that=<span class="variable language_">this</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">arr</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(that.<span class="property">b</span> + item)<span class="comment">// hello1 hello2 hello3</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">a.<span class="title function_">f</span>()</span><br></pre></td></tr></table></figure><p>或者将this当作foreach方法的第二个参数，固定它的运行环境。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line">  <span class="attr">arr</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">  <span class="attr">b</span>: <span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line">  <span class="attr">f</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">arr</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">b</span> + item)<span class="comment">// hello1 hello2 hello3</span></span><br><span class="line">    &#125;,<span class="variable language_">this</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">a.<span class="title function_">f</span>()</span><br></pre></td></tr></table></figure><h3 id="原型链中的"><a href="#原型链中的" class="headerlink" title="原型链中的"></a>原型链中的</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>可拖拽组件</title>
      <link href="/2024/12/24/%E5%8F%AF%E6%8B%96%E6%8B%BD%E7%BB%84%E4%BB%B6/"/>
      <url>/2024/12/24/%E5%8F%AF%E6%8B%96%E6%8B%BD%E7%BB%84%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>用到的原生DOM事件</p><ul><li><code>@mousedown=&quot;handlerMouseDown</code>，默认参数为event，鼠标等在dom元素上按下时触发事件</li><li><code>@dragover.prevent @drop=&quot;onDrop&quot;</code> 用于处理拖拽事件的指令；@dragover.prevent：这个指令监听 dragover 事件，.prevent 修饰符用于阻止事件的默认行为（默认行为可能会阻止放置操作）。</li></ul><h1 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h1><p>将列表拆分成组件时，<code>onMouseDown</code>需要绑定在子组件上，但函数体在父组件中，因此用到了父子组件通信，由于是父给子传递信息，可以用props；但是，如果在子组件中直接写<code>@mousedown=&quot;handlerMouseDown(e, type)&quot;</code>的话，无法获取到事件e，因为 e 并不是在模板作用域中定义的变量。解决这个问题，可以有以下两种方法：</p><ol><li>直接使用箭头函数<code> @mousedown=&quot;(e) =&gt; handlerMouseDown(e, type)&quot;</code>(影响性能不推荐)</li><li>让 Vue 自动传递事件对象：<code> @mousedown=&quot;handlerMouseDown($event, type)&quot;</code></li></ol><p>在Vue.js中，使用onMounted（或其他生命周期钩子，如onUpdated, onBeforeUnmount等）是为了确保你的代码在组件的特定生命周期阶段执行。onMounted是Vue 3 Composition API中的一个生命周期钩子，它确保你的代码在组件的DOM已经被挂载（即插入到实际的HTML文档中）之后执行。<br>并且使用echarts来绘制图表时，需要确保echarts.init方法被调用时，其参数（在这里是charts.value）已经是一个可用的DOM元素。这是因为在组件的初始渲染阶段，Vue可能还没有完成DOM的创建和插入。如果试图在DOM元素还未准备好时初始化echarts，将会导致错误，因为echarts需要一个有效的DOM容器来绘制图表。</p><p>在 <code>&lt;script setup&gt;</code> 中，defineOptions 主要用于配置组件的一些选项，例如注册组件、声明 props、emits 等。它可以简化一些常见的配置，可以集中管理。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">defineOptions(&#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    MyText,</span><br><span class="line">    MyVideo</span><br><span class="line">  &#125;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    msg: String</span><br><span class="line">  &#125;,</span><br><span class="line">  emits: [&#x27;update&#x27;]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>如果使用<code>&lt;component :is=&quot;string&quot;/&gt;</code>动态绑定组件的话</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">defineOptions</span>(&#123;</span><br><span class="line">  <span class="attr">components</span>: &#123;</span><br><span class="line">    <span class="title class_">MyText</span>, <span class="title class_">MyVideo</span>, <span class="title class_">MyArea</span>, <span class="title class_">MyBar</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>使用<code>vue-context</code>时，需注意<br>如果组件想用一个原生标签的时间，需要加一个<code>native</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;dragger @contextmenu.native.prevent=&quot;$refs.menu.open&quot;&gt;</span><br></pre></td></tr></table></figure><p>因为<code>@contextmenu.prevent=&quot;$refs.menu.open&quot;</code>是绑定在原生标签上的<br><code>@contextmenu.native.prevent=&quot;onTextMenuOpen($event, item)</code>我们需要做更多的逻辑所以把右边的封装成一个函数，但这个函数有默认参数<code>$event</code>；不注意到这一点的话，右键的选项会跑到左上角</p><p>关于<code>find</code>函数<br><code>const currentItem = this.list.find(item =&gt; item.focused);</code><br>返回第一个使<code>=&gt;</code>右侧为真的元素，返回的是该元素本身(item)</p><h2 id="当把一个图层放到另一个上面时，位置不对："><a href="#当把一个图层放到另一个上面时，位置不对：" class="headerlink" title="当把一个图层放到另一个上面时，位置不对："></a>当把一个图层放到另一个上面时，位置不对：</h2><ul><li>原因：<code>$event</code>的<code>offsetX</code>的值是相对于落点的父元素<br>所以我们如果把一个图层放到另一个图层上时，我们<code>onDrop(e, index)</code>的<code>e.target</code>指的是被落置的图层(如果不叠放的话指整个<code>penal</code>),而此时的<code>e.offsetY</code>指的是相对于被落置图层的，<code>e.target.offsetLeft</code>指的是被落置图层相对于他的父元素的左边的距离，这仍然不是我们想要的。现在我们需要的是被落置的元素距离屏幕右边的距离；因此我们想获取到<code>dragger</code>的组件实例，可是会出现多个<code>dragger</code>,而且我们利用<code>ref</code>绑定到组件身上，因此获得的是vue实例对象，在js代码中，我们想获取dragger的dom元素利用<code>currentWidget = this.$refs[&#39;widget&#39;][index].$el</code>因为获取到的<code>dragger</code>是<code>vfor</code>渲染出来的数组；所以此时我们可以得到被放置元素的<code>currentWidget.offsetTop</code>然后再减去鼠标落点相对于被拖动组件的位置。</li></ul><p>因为是叠放组件，所以我们在<code>&lt;component&gt;</code>上面也绑定一个<code> @drop.native.stop=&quot;onDrop($event, index)&quot;</code>函数，注意这个函数的写法，需要停止冒泡，因为外面的组件还有一个<code>drop</code>函数，如果不停止冒泡就会被触发两次。还有就是给组件绑定原生事件的方法需要加上<code>native</code><br>区分两个<code>onDrop</code>:放置在其他图层上就会有index，触发<code>onDrop</code>；</p><p><code>@dragover = &quot;e=&gt;e.preventDefault()&quot;</code>&#x3D;<code>@dragover.prevent</code></p><p>在<code>record</code>函数中<br><code>recordList.push(this.list.concat())</code>要加上<code>concat()</code>,因为如果不加的话，每次push进的都是同一个地址，所以每次list有改变的话，前面已经被push进去的也会发生变化，最后<code>recordList</code>的元素会相同<br><code>concat</code>是浅拷贝，也就是说，每次push进的list数组的地址都不相同，但是引用的对象都指向同一个。</p><p>为啥不加<code>created</code>第一次撤回就无法执行？<br>created 钩子会在组件实例创建后立即调用，但 此时组件尚未被挂载到 DOM 中。<br>组件的 data、methods、computed 等 已经初始化，但 DOM 还未渲染。</p><h2 id="图层样式控制"><a href="#图层样式控制" class="headerlink" title="图层样式控制"></a>图层样式控制</h2><p>整体思路：<br>首先需要配置好相应的配置（可以修改的是文字大小和文字颜色）<br>在这里我用的的改变文字大小的是element的组件，改变颜色的是在github上找的；<br>引入的时候注意如果是abh-bd那么组件注册应该是AbhBd<br>这里需要注意的是组件之间数据的传递，最好写下来！否则会浪费很多时间！<br>然后就是更改样式：我们想把更改的字体颜色和大小呈现出来，只需要在记录下当前组件的样式，然后传递给相应的组件，利用行内样式做动态变化即可，注意传递的props不要命名为style;命名的时候都尽量与html原生标签的名字不要重复。<br>更改字体颜色这个外来组件给我们的color并不是直接的值，而是一个对象；学到了一个方法：利用updated生命周期钩子，打印看styles的值，根据打印出来的值再对拿到的数据进行筛选再绑定样式即可。</p><h2 id="撤回"><a href="#撤回" class="headerlink" title="撤回"></a>撤回</h2><p>一开始我们实现撤回功能是利用一个记录数组，通过将每次对list实现的push和pop时list的整个数组的状态都记录下来，也就是说，记录数组的最后一个元素内容就是list数组的最新状态。可是很快我们就发现了问题，当对list数组某一元素的内部数据进行操作时，并不会被记录。<br>我们把record函数绑到 <code>@dragstop=&quot;record&quot;@resizestop=&quot;record&quot;</code>上，这样停止拖拽或者改变组件大小都会被记录下来。<br>但不同于<code>push</code>，我们直接绑定到<code>dragstop</code>和<code>resizestop</code>上的还没有获取最新的数组就被更新了。所以我们要在<code>record</code>内部获取到最新的数据后对list进行更新。记录数组也应该深克隆list。<br>由于在该组件中撤回时，一次只能改变x或y其中一个的值，所以在更新某一item的数据时有些麻烦，我们将它封装成一个函数<code>setNewList</code>，封装这个函数的目的是为了解决在同时改变组件的x和y的情况先，默认撤回只会撤回一个方向的问题。<br>所以在撤回函数中调用<code>setNewList</code>;由于此时list已经被更新，所以该函数传入的参数是一整个新的<code>list</code>数组，所以我们进一步操作筛选出到底是哪个组件的x,y被改变了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">withdraw() &#123;</span><br><span class="line">  currentIndex--;</span><br><span class="line">  this.setNewList(recordList[currentIndex])</span><br><span class="line">  this.list = recordList[currentIndex] || []</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>再看一下我们撤回的逻辑。如果执行撤回操作，就把list更新为list改变前的哪个list的数据</p><p>又遇到一个问题，当我们撤回时，也就是更改了x或y时，触发了<code>dragstop</code>和<code>dragging</code>，然后我们又给这两个事件绑定了<code>record</code>，所以又被记录了<br>我们舍弃这两个事件换成<code>@mouseup</code>但是如何拿到<code>rect</code>最新数据呢？看源码，ref上有，所以我们通过ref获取</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>node.js</title>
      <link href="/2024/12/16/node-js/"/>
      <url>/2024/12/16/node-js/</url>
      
        <content type="html"><![CDATA[<ul><li>浏览器是js的前端运行环境</li><li>node.js是后端运行环境</li><li>node.js无法调用Dom,BOM,ajax等浏览器内置API</li><li>使用node.js执行js文件： node 文件名</li></ul><h1 id="内置API模块"><a href="#内置API模块" class="headerlink" title="内置API模块"></a>内置API模块</h1><h2 id="fs文件系统"><a href="#fs文件系统" class="headerlink" title="fs文件系统"></a>fs文件系统</h2><ol><li>导入fs<code>const fs=require(&#39;fs&#39;)</code></li><li>读取指定文件内容<code>fs.readFile(path[,options],callback)</code><br>callback(err,dataStr)回调函数可以拿到读取失败和成功的结果<br>读取成功：err为null<br>读取失败：dataStr为undefined</li><li>向指定文件写入内容<code>fs.writeFile(path,data[,options],callback)</code><br>data:写入内容<br>callback(err){}<br><strong>使用fs操作文件（相对路径）时，会以<font color="red">执行node命令所处的目录</font>动态拼接出被操纵文件的完整目录</strong><br>使用<code>__dirname</code>（表示当前文件所处目录）</li></ol><h2 id="Path模块"><a href="#Path模块" class="headerlink" title="Path模块"></a>Path模块</h2><ol><li>导入<code>const path = require(&#39;path&#39;)</code></li><li><code>path.join(&#39;/a&#39;,&#39;../b&#39;)</code>将多个路径片段拼接成一个完整的路径字符串——结果：’&#x2F;b’</li><li><code>path.basename(path[,ext])</code>从路径字符串中将文件名解析出来<br>ext:文件扩展名，如果传入扩展名，则返回结果时不带扩展名；如果不传，则返回  文件名.扩展名<br>返回值：string–表示路径中的最后一部分</li></ol><h2 id="http模块"><a href="#http模块" class="headerlink" title="http模块"></a>http模块</h2><h3 id="创建一个最基本的web服务器"><a href="#创建一个最基本的web服务器" class="headerlink" title="创建一个最基本的web服务器"></a>创建一个最基本的web服务器</h3><ol><li>导入<code>const http=require(&#39;http&#39;)</code></li><li>创建一个服务器实例<code>const server = http.createServer()</code></li><li>为服务器实例绑定request事件<code>server.on(&#39;request&#39;,function(req,res)=&gt;&#123;&#125;)</code></li></ol><ul><li>客户端请求地址req.url</li><li>客户端请求方式req.method</li><li>res.end()向客户端响应一些内容</li><li>防止中文乱码，设置响应头Content-Type的值为text&#x2F;html<code>res.setHeader(&#39;Content-Type&#39;, &#39;text/html;charset=utf-8&#39;);</code></li></ul><ol start="4"><li>启动服务器<code>server.listen(端口,function()=&gt;&#123;&#125;)</code></li></ol><h3 id="查看一个端口是否被占用"><a href="#查看一个端口是否被占用" class="headerlink" title="查看一个端口是否被占用"></a>查看一个端口是否被占用</h3><p><code>netstat -ano|findstr 8080</code><br><code>.taskkill -PID 13512 -F</code></p><h2 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h2><h3 id="模块的分类"><a href="#模块的分类" class="headerlink" title="模块的分类"></a>模块的分类</h3><ul><li>内置模块（fs,path,http…）</li><li>自定义模块（用户创建的.js文件）</li><li>第三方模块(包，基于内置模块封装出来的)</li><li>外界用require()方法导入自定义模块时，得到的时modeule.exports所指对象（默认为空）<br>模块作用域：防止了全局变量的污染<br>用require()导入模块时，得到的永远是module.exports指向的对象<br>例如：<img src="/2024/12/16/node-js/image%20copy%202.png"><br>所以导入该模块时，得到的是下面的对象</li></ul><p>npm与包<br><code>npm init -y</code> 快速创建package.json文件<strong>项目文件夹不要包含中文和空格</strong><br><code>npm i</code>将package.json的dependencies的包全部安装<br><code>npm i -D </code>  <code>npm install 包名 --save-dev</code></p><ul><li>安装全局包<code>npm i -g </code>，卸载全局包<code>npm uninstall 包名 -g </code></li></ul><h1 id="Express"><a href="#Express" class="headerlink" title="Express"></a>Express</h1><p>创建一个基本的web服务器</p><ol><li><code>npm i express</code></li><li>导入express <code>const express = require(&#39;express&#39;)</code></li><li>创建web服务器<code>const app = express()</code></li><li>启动服务器<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">listen</span>(<span class="number">80</span>,()=&#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>Get请求<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;请求url&#x27;</span>,<span class="keyword">function</span>(<span class="params">req,res</span>)&#123;&#125;)</span><br></pre></td></tr></table></figure></li></ol><p>Post请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;请求url&#x27;</span>,<span class="keyword">function</span>(<span class="params">req,res</span>)&#123;&#125;)</span><br></pre></td></tr></table></figure><p>把内容相应给客户端<code>res.send()</code><br>获取URL中携带的查询参数<code>req.query()</code><br>获取URL中携带的动态参数<code>req.params()</code>，通过:匹配到动态参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.get(&#x27;/user/:id&#x27;,(req,res)=&gt;&#123;&#125;)</span><br></pre></td></tr></table></figure><h2 id="托管静态资源express-static"><a href="#托管静态资源express-static" class="headerlink" title="托管静态资源express.static()"></a>托管静态资源express.static()</h2><p>例如：<code>app.use(express.static(&#39;public&#39;))</code><br>表示对外开放public这个文件夹<br>public不会出现在访问路径中<br>若使用<code>app.use(&#39;/public&#39;,express.static(&#39;public&#39;))</code><br>此时访问public目录中的文件时，需要加上&#x2F;public</p><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><p>express中的路由<br>例如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&quot;asdhja&quot;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>使用路由模块</p><ol><li>引入express<code>const express = require(&#39;express&#39;)</code></li><li>创建路由对象<code>const router = express.Router()</code></li><li>挂载具体路由，如上</li><li>暴露路由，module.exports&#x3D;router</li><li>在入口文件中引入<code>const useRouter=require(&#39;./router&#39;)</code></li><li>注册路由<code>app.use(useRouter)</code><br><code>app.use()</code>注册全局中间件</li></ol><h3 id="为路由添加前缀"><a href="#为路由添加前缀" class="headerlink" title="为路由添加前缀"></a>为路由添加前缀</h3><p><code>app.use(&#39;/api&#39;,useRouter)</code></p><h2 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h2><ul><li>注册在路由之前<font color="red">！！！错误级别的中间件除外！！！</font></li><li>作用：对请求进行预处理；多个中间件之间，共享同一份req和res，我们可以在上游的中间件中，统一为req或res对象添加自定义的属性或方法，供下游的中间件或路由进行使用。</li><li>注册为全局生效的中间件函数 app.use(中间件函数) 客户端发起任何请求，到达服务器后，都会触发的中间件</li><li>中间件函数的形参列表中<strong>必须包含next参数</strong>，而路由处理函数中只包含req和res</li></ul><h3 id="next-函数"><a href="#next-函数" class="headerlink" title="next()函数"></a>next()函数</h3><p>实现多个中间件连续调用，把流转关系转交给下一个中间件或者路由</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const mw = (req,res,next)=&gt;&#123;</span><br><span class="line">  console.log(&quot;这是一个最简单的中间件函数&quot;)</span><br><span class="line">  //把流转关系转交给下一个中间件或者路由</span><br><span class="line">  next()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="局部生效的中间件"><a href="#局部生效的中间件" class="headerlink" title="局部生效的中间件"></a>局部生效的中间件</h3><p><img src="/2024/12/16/node-js/image%20copy%203.png"><br><img src="/2024/12/16/node-js/image%20copy%204.png"></p><h3 id="中间件的分类"><a href="#中间件的分类" class="headerlink" title="中间件的分类"></a>中间件的分类</h3><h4 id="应用级别的中间件"><a href="#应用级别的中间件" class="headerlink" title="应用级别的中间件"></a>应用级别的中间件</h4><p>通过<code>app.use()</code> <code>app.get()</code> <code>app.post()</code> 绑定到app实例上的中间件</p><h4 id="路由级别的中间件"><a href="#路由级别的中间件" class="headerlink" title="路由级别的中间件"></a>路由级别的中间件</h4><p>绑定到express.Router()上的</p><h4 id="错误级别的中间件"><a href="#错误级别的中间件" class="headerlink" title="错误级别的中间件"></a>错误级别的中间件</h4><p><font color="red">错误级别的中间件必须注册在所有路由之后</font><br>捕获整个项目中发生的异常错误，防止项目异常崩溃(如果不加，程序直接崩溃，无法进行下去)<br>格式： <code>function(err,req,res,next)&#123;&#125;</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;程序出错了！&quot;</span>)</span><br><span class="line">  res.<span class="title function_">end</span>(<span class="string">&quot;这里是&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">err, req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;发生了粗哦&quot;</span> + err.<span class="property">message</span>)</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;Error&#x27;</span> + err.<span class="property">message</span>)<span class="comment">//Error程序出错了！</span></span><br><span class="line">  <span class="title function_">next</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="Express-内置的中间件"><a href="#Express-内置的中间件" class="headerlink" title="Express 内置的中间件"></a>Express 内置的中间件</h4><ul><li>express.static()</li><li>express.json()解析JSON格式的请求数据</li><li>express.urlencoded()解析URL-encoded格式的请求体数据</li></ul><h4 id="第三方的中间件"><a href="#第三方的中间件" class="headerlink" title="第三方的中间件"></a>第三方的中间件</h4><h2 id="express写接口"><a href="#express写接口" class="headerlink" title="express写接口"></a>express写接口</h2><h3 id="CORS解决跨域问题"><a href="#CORS解决跨域问题" class="headerlink" title="CORS解决跨域问题"></a>CORS解决跨域问题</h3><ol><li><code>npm install cors</code></li><li><code>const cors = require(&#39;cors&#39;)</code>导入中间件</li><li>在路由之前调用<code>app.use(cors())</code>配置中间件</li></ol><h2 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h2><p><code>npm i mysql</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mysql= <span class="built_in">require</span>(<span class="string">&#x27;mysql&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> db = mysql.<span class="title function_">createPool</span>(&#123;</span><br><span class="line">  <span class="attr">host</span>: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">  <span class="attr">port</span>: <span class="number">3306</span>,</span><br><span class="line">  <span class="attr">user</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">  <span class="attr">password</span>: <span class="string">&#x27;123456&#x27;</span>,</span><br><span class="line">  <span class="attr">database</span>: <span class="string">&#x27;itcase&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db.<span class="title function_">query</span>(<span class="string">&#x27;SELECT * FROM 表名&#x27;</span>,<span class="function">(<span class="params">err,result</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(err) <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">message</span>)</span><br><span class="line">  <span class="keyword">if</span> (results.<span class="property">affectedRows</span> === <span class="number">1</span>) &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;更新成功！&quot;</span>) &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h3><ul><li>方式一<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sqlStr = <span class="string">&#x27;UPDATE student SET name=?,pwd=? WHERE id=?&#x27;</span></span><br><span class="line">  db.<span class="title function_">query</span>(sqlStr, [user.<span class="property">name</span>, user.<span class="property">pwd</span>, user.<span class="property">id</span>], <span class="function">(<span class="params">err, results</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">message</span>)</span><br><span class="line">  <span class="keyword">if</span> (results.<span class="property">affectedRows</span> === <span class="number">1</span>) &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;更新成功！&quot;</span>) &#125;</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure></li><li>方式二<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123; <span class="attr">id</span>: <span class="number">23</span>, <span class="attr">name</span>: <span class="string">&#x27;wwww&#x27;</span>, <span class="attr">pwd</span>: <span class="string">&#x27;666&#x27;</span> &#125;</span><br><span class="line"><span class="keyword">const</span> sqlStr = <span class="string">&#x27;UPDATE student SET ? WHERE id=?&#x27;</span></span><br><span class="line">db.<span class="title function_">query</span>(sqlStr, [user, user.<span class="property">id</span>], <span class="function">(<span class="params">err, results</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">message</span>)</span><br><span class="line">  <span class="keyword">if</span> (results.<span class="property">affectedRows</span> === <span class="number">1</span>) &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;更新成功！&quot;</span>) &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sqlStr = <span class="string">&#x27;DELETE FROM student WHERE id=?&#x27;</span></span><br><span class="line">db.<span class="title function_">query</span>(sqlStr, <span class="number">23</span>, <span class="function">(<span class="params">err, results</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">message</span>)</span><br><span class="line">  <span class="keyword">if</span> (results.<span class="property">affectedRows</span> === <span class="number">1</span>) &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;删除成功&quot;</span>) &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>标记删除<br>没有真正的删除，只是把状态更新为1<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sqlStr = <span class="string">&#x27;UPDATE student SET status=? WHERE id=?&#x27;</span></span><br><span class="line">db.<span class="title function_">query</span>(sqlStr,[<span class="number">1</span>,<span class="number">6</span>],<span class="function">(<span class="params">err,results</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">message</span>)</span><br><span class="line">  <span class="keyword">if</span> (results.<span class="property">affectedRows</span> === <span class="number">1</span>) &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;标记删除成功&quot;</span>) &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h2 id="session认证"><a href="#session认证" class="headerlink" title="session认证"></a>session认证</h2><p>cookie:键值对进行表示的(key-value)，例如name&#x3D;jack<br>Cookie就是一些数据，用于存储服务器返回给客服端的信息，客户端进行保存。在下一次访问该网站时，客户端会将保存的cookie一同发给服务器，服务器再利用cookie进行一些操作。利用cookie我们就可以实现自动登录，保存游览历史，身份验证等功能。(不安全)<br>session就是一个对象，用于存储信息。session是<font color="red">存储于服务器端</font>的特殊对象，服务器会为每一个游览器(客户端)创建一个唯一的session。这个session是服务器端共享，每个浏览器(客户端)独享的。我们可以在session存储数据，实现数据共享。<br><code>npm i express-session</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> session = <span class="built_in">require</span>(<span class="string">&#x27;express-session&#x27;</span>)<span class="comment">//引入</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">session</span>(&#123;<span class="comment">//注册为全局中间件</span></span><br><span class="line">  <span class="attr">secret</span>:<span class="string">&#x27;itheima&#x27;</span>,</span><br><span class="line">  <span class="attr">resave</span>:<span class="literal">false</span>,</span><br><span class="line">  <span class="attr">saveUninitialized</span>:<span class="literal">true</span></span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure><ul><li>向session中存数据<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/post&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/html;charset=utf-8&#x27;</span>);</span><br><span class="line">  <span class="keyword">if</span> (req.<span class="property">body</span>.<span class="property">username</span> !== <span class="string">&#x27;admin&#x27;</span> || req.<span class="property">body</span>.<span class="property">password</span> !== <span class="string">&#x27;000000&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">send</span>(&#123; <span class="attr">status</span>: <span class="number">1</span>, <span class="attr">msg</span>: <span class="string">&#x27;登陆失败&#x27;</span> &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  req.<span class="property">session</span>.<span class="property">user</span> = req.<span class="property">body</span>;</span><br><span class="line">  req.<span class="property">session</span>.<span class="property">isLogin</span> = <span class="literal">true</span></span><br><span class="line">  res.<span class="title function_">send</span>(&#123; <span class="attr">status</span>: <span class="number">0</span>, <span class="attr">msg</span>: <span class="string">&#x27;登陆成功&#x27;</span> &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li>从session 中取数据<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">app.get(&#x27;/get&#x27;, (req, res) =&gt; &#123;</span><br><span class="line">  if (!req.session.isLogin) &#123;</span><br><span class="line">    return res.send(&#123; status: 1, msg: &#x27;fail&#x27; &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  res.send(&#123; status: 0, msg: &#x27;success&#x27;, username: req.session.username, &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li>用于req.body获取值的<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var bodyParser = require(&#x27;body-parser&#x27;);</span><br><span class="line">app.use(bodyParser.json());</span><br></pre></td></tr></table></figure></li><li>清空当前用户的session，(退出登录等)<br><code>req.session.destory()</code></li></ul><p><strong>前端请求后端接口不存在跨域问题，推荐使用session身份认证</strong><br><strong>前端需要跨域请求后端接口时，推荐使用JWT认证机制</strong></p><h2 id="JWT-跨域认证方案"><a href="#JWT-跨域认证方案" class="headerlink" title="JWT 跨域认证方案"></a>JWT 跨域认证方案</h2><p>用户向服务器提交账号和密码,<font color="red">服务端</font>验证通过后，将用户的信息对象，经过加密后生成的Token字符串，(服务端不保留该字符串)，发送给客户端，<font color="red">客户端将Token存到LocalStorage或者SessionStorage中</font>，当客户端再次发送请求时，通过请求头的Authorization字段，将Token发送给服务器。服务器将Token字符串还原成用户的信息对象，认证成功后服务器响应特定的内容。</p><ul><li>jwt的组成部分 Header.Payload.Signature<br>Payload:真正的用户信息，用户信息加密后生成的字符串<br>Header,Signature:安全性相关的部分，为了保证Token的安全性</li></ul><h3 id="在Express中使用JWT"><a href="#在Express中使用JWT" class="headerlink" title="在Express中使用JWT"></a>在Express中使用JWT</h3><ol><li>安装相关的包<code>npm install jsonwebtoken express-jwt</code><br>jsonwebtoken:用于生成JWT字符串<br>express-jwt:将JWT字符串解析还原成JSON对象</li><li>导入包<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const jwt=require(&#x27;jsonwebtoken&#x27;)</span><br><span class="line">const expressJWT = require(&#x27;express-jwt&#x27;)</span><br></pre></td></tr></table></figure></li><li>定义secret密钥(对用户信息进行加密)，是一个字符串</li><li>生成JWT字符串：(调用sign方法)<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const tokenStr = jwt.sign(&#123;name:userInfo.name&#125;,secretKey,&#123;expiresIn:&#x27;30s&#x27;&#125;)</span><br></pre></td></tr></table></figure>参数一：用户的信息对象<br>参数二：密钥<br>参数三：配置对象，可以配置当前token的有效期<br>然后通过响应头的token属性把tokenStr带上去</li><li>将JWT字符串还原为JSON对象，<strong>只要配置成功express-jwt中间件，就自动把解析出来的用户信息，挂载到req.auth属性上</strong><br><code>app.use(expressJWT.expressjwt(&#123; secret: secretKey, algorithms: [&#39;HS256&#39;] &#125;).unless(&#123; path: [/^\/api\//] &#125;))</code><br>&#x2F;正则&#x2F;,以&#x2F;api开头的都不需要访问权限<br>注意：<font color="red">密码不要加密到token字符串中！</font></li><li>获取用户信息<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">app.get(&#x27;/admin/getInfo&#x27;, (req, res) =&gt; &#123;</span><br><span class="line">  console.log(req.auth)</span><br><span class="line">  res.send(&#123;</span><br><span class="line">    status: 200,</span><br><span class="line">    message: &#x27;获取用户信息成功&#x27;,</span><br><span class="line">    data: req.auth,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li>使用全局错误处理中间件；捕获解析JWT失败后产生的错误<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">app.use((err, req, res, next) =&gt; &#123;</span><br><span class="line">  if (err.name === &#x27;UnauthorizedError&#x27;) &#123;</span><br><span class="line">    return res.send(&#123;</span><br><span class="line">      stauts: 401,</span><br><span class="line">      message: &#x27;无效token&#x27;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  res.send(&#123;</span><br><span class="line">    status: 500,</span><br><span class="line">    message: &#x27;未知错误&#x27;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h1 id="综合案例"><a href="#综合案例" class="headerlink" title="综合案例"></a>综合案例</h1><p>使用<code>bcryptjs</code>对密码进行加密</p><ul><li>加密之后，无法逆向破解</li><li>同一明文密码多次加密，得到的加密结果各不相同，保证了安全性</li></ul><ol><li><code>npm i bcryptjs</code></li><li>在<code>/router_handler/user.js</code>中，导入bcryptjs</li><li>调用<code>bcrypyjs.hashSync(明文密码，随机盐的长度)</code><br>第二个参数可以保证密码的安全性</li></ol><p><code>bcryptjs.compareSync(用户提交的密码，数据库的密码)</code></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>git</title>
      <link href="/2024/12/13/git/"/>
      <url>/2024/12/13/git/</url>
      
        <content type="html"><![CDATA[<p>工作区、暂存区、版本区，三个区共同组成了一个 Git 仓库<br><img src="/2024/12/13/git/image%20copy%204.png" alt="alt text"></p><h1 id="基本操作流程"><a href="#基本操作流程" class="headerlink" title="基本操作流程"></a>基本操作流程</h1><ol><li>创建一个空文件夹（名称不要包含中文），随后双击打开文件夹。</li><li>在文件夹空白处右键启动命令行</li><li>创建一个 Git 仓库，<code>git init</code>(工作区)，可以创建一些文件，我们创建a.txt</li><li><code>git add a.txt</code>把工作区中【a.txt】添加到暂存区;<code>git add -A</code>可以把工作区中的所有文件，都添加到暂存区.</li><li>把暂存区a.txt添加到版本区，具体命令为：<code>git commit -m &#39;xxx&#39;</code></li></ol><h2 id="查看仓库状态"><a href="#查看仓库状态" class="headerlink" title="查看仓库状态"></a>查看仓库状态</h2><p><code>git status</code>或<code>git status -s</code></p><ul><li>On branch master(当前所在的分支)<br>nothing to commit, working tree clean(当前没有任何文件需要提交)<br><img src="/2024/12/13/git/image.png"><br>刚创建一个文件,还在工作区，没有接受版本控制。<br><img src="/2024/12/13/git/image%20copy.png"></li><li>红色的含义：操作停留在工作区</li><li>？的含义：当前文件还没有接受版本控制<br><code>git add</code>已经存入了暂存区<br><img src="/2024/12/13/git/image%20copy%202.png" alt="alt text"></li><li>绿色的含义：操作已经存入暂存区</li><li>A 的含义：新增（单词：add）<br>对文件进行修改<br><img src="/2024/12/13/git/image%20copy%203.png" alt="alt text"></li><li>M的含义：修改（单词： modify）</li></ul><h1 id="Gitee"><a href="#Gitee" class="headerlink" title="Gitee"></a>Gitee</h1><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ul><li>维护好本地仓库（所有文件均接受版本控制<br><code>git add xxxx</code><br><code>git commit -m &#39;注释&#39;</code></li><li>配置本地仓库关联远程仓库：<br><code>git remote add origin https://xxxx/xxxx/xxxxx.git</code><ul><li>查看当前仓库关联远程仓库地址：git remote -v</li><li>更改远程仓库的 URL：<code>git remote set-url origin</code> 新的仓库URL</li><li>删除与远程仓库的关联：<code>git remote remove origin</code></li></ul></li><li>将本地仓库的 <code>master</code> 分支推送到远程仓库<br><code>git push -u origin master</code></li><li>当本地仓库想获得远程仓库的最新修改时，可以使用<code>git pull</code>命令拉取远端代码。</li></ul><h2 id="克隆远程库"><a href="#克隆远程库" class="headerlink" title="克隆远程库"></a>克隆远程库</h2><p>获取一个远程仓库的地址，随后执行克隆命令<br><code>git clone https://xxxx/xxxx/xxxx.git</code><br>使用–depth 1 参数可以克隆仓库的最近一次提交，这样可以减少克隆所需的时间和空间。<br><code>git clone --depth 1 https://xxxx/xxxx/xxxx.git</code></p><h2 id="如何撤销已提交的代码更改？"><a href="#如何撤销已提交的代码更改？" class="headerlink" title="如何撤销已提交的代码更改？"></a>如何撤销已提交的代码更改？</h2><ul><li><code>git revert</code>命令通过创建一个新的提交来撤销之前的更改，保持历史记录完整。</li><li><code>git reset</code>命令，该命令允许将分支指针移动到先前的提交，但需要谨慎使用，因为它会改变版本历史。<br><code>A -- B -- C (HEAD)</code><br>如果你想撤销最近的一次提交 C，可以这样做：<br><code>git reset --soft HEAD~1</code><br>现在提交历史变成：<br><code>A -- B (HEAD)</code><br>但是你的工作目录和暂存区仍然包含提交 C 的更改</li></ul><h2 id="创建一个新仓库并将本地代码push到远程"><a href="#创建一个新仓库并将本地代码push到远程" class="headerlink" title="创建一个新仓库并将本地代码push到远程"></a>创建一个新仓库并将本地代码push到远程</h2><p>创建仓库</p><p>上传本地代码</p><ol><li>设置用户名以及邮箱<br><code>git config --global user.name &quot;123&quot;</code><br><code>git config --global user.email &quot;667@qq.com&quot;</code></li><li>设置<code>SSH</code>公钥</li><li>添加生成的<code>SSH</code>公钥</li><li>在需要提交代码的文件夹中启动一个新的<code>git bash</code></li></ol><ul><li><code>git add .</code>&#x2F;&#x2F;提交所有代码到中转站</li><li><code>git commit -m &quot;注释内容&quot;</code>提交所有代码到本地仓库</li><li><code>git push</code> 提交本地仓库到远程</li></ul><h2 id="一些命令："><a href="#一些命令：" class="headerlink" title="一些命令："></a>一些命令：</h2><ol><li><code>git init</code>初始化仓库 </li><li><code>git config -l</code> 查看配置(user.email user.name)</li><li><code>git status</code> 查看状态：红色的没有被git管理；绿色的存储在版本库暂缓区</li><li><code>git add .</code> 添加到暂缓区</li><li><code>git commit -m &#39;注释内容&#39;</code></li><li><code>git diff</code> 查看修改文件  <code>git diff index.js</code>查看某一个文件</li><li><code>git log</code> 查看修改历史   <code>git reflog</code> (简单形式)</li><li>回到上一个版本<code>git reset --hard HEAD^</code>  回到指定版本<code>git reset --hard 版本号</code></li></ol><h2 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h2><p>默认主分支:<code>master</code></p><ol><li>查看本地分支<code>git branch</code></li><li>新建分支<code>git branch 分支名称</code></li><li>切换分支<code>git checkout 分支名称</code></li><li>查看远程仓库分支 <code>git branch -r</code></li><li>本地分支提交到远程仓库<code>git push --set-upstream origin 分支名称</code></li><li>删除本地分支<code>git branch -d 分支名称</code></li><li>删除远程仓库的分支<code>git push origin --delete 分支名称</code></li><li><code>git merge 分支名称</code>如果当前是在<code>master</code>分支下写入：<code>git merge dev</code> 那么<code>master</code>和<code>dev</code>会进行合并；相当于<code>master+=dev</code><br>本地没有<code>dev</code>分支，但远程有，可以直接切换<code>git checkout dev</code></li></ol><h2 id="多人合作开发以及提交冲突问题"><a href="#多人合作开发以及提交冲突问题" class="headerlink" title="多人合作开发以及提交冲突问题"></a>多人合作开发以及提交冲突问题</h2><ol><li>克隆下载代码</li><li>配置<code>git config user.name &#39;用户名&#39;</code>,<code>git config user.email &#39;邮箱&#39;</code></li><li><code>git add .</code></li><li><code>git commit -m &#39;注释内容&#39;</code></li><li><code>git push</code><br><code>git push</code>可能会报错；原因：远程仓库有人更新了代码，不能直接<code>git push</code><br>解决：我们必须先把远程仓库的代码往下拉，然后再<code>push</code>;<code>git pull</code>,<code>git push</code><br> <strong>如何解决合并冲突？</strong><br>合并冲突发生在合并分支时，当两个分支的同一部分产生了不同的更改时。解决合并冲突的一般步骤如下：</li></ol><ul><li>使用<code>git status</code>命令查看冲突的文件。</li><li>打开冲突文件，手动解决冲突并选择要保留的更改。</li><li>使用<code>git add</code>命令将解决冲突后的文件标记为已解决。</li><li>使用<code>git commit</code>命令提交解决冲突的结果。<br><code>git clone </code>用于从远程仓库完整地克隆一个新的本地仓库。这是你第一次从远程仓库获取项目代码时使用的命令。<br><code>git pull</code> 用于更新现有的本地仓库，使其与远程仓库同步。它通常是在已经存在本地仓库的情况下用来获取最新的更改。<br><code>git pull</code>是下面两个操作的融合<br><code>git fetch</code>：<br>这个命令会从远程仓库获取最新的更改，但不会自动将这些更改合并到你的工作分支中。<br>它会更新你的本地副本中的远程跟踪分支（例如 <code>origin/main</code>），使你能够查看远程仓库的变化而不影响当前工作目录或本地分支。<br><code>git merge</code>：<br>获取了远程的更改之后，<code>git merge</code> 会尝试将这些更改合并到当前所在的分支中。<br>如果有冲突发生，Git 会提示你需要手动解决这些冲突。</li></ul><h2 id="git-merge-和git-rebase"><a href="#git-merge-和git-rebase" class="headerlink" title="git merge 和git rebase"></a><code>git merge</code> 和<code>git rebase</code></h2><p><code>merge </code>会对提交历史进行保留，很显然更适合多人协作开发的场景，因为如果出现问题也可以追溯到历史的每一次提交。</p><p>而 <code>rebase </code>则是会让提交历史更加简洁易读，保持提交历史的线性结构，所以更适合个人开发和整理分支的情况。</p><h2 id="将本地代码推送到github已创建的仓库"><a href="#将本地代码推送到github已创建的仓库" class="headerlink" title="将本地代码推送到github已创建的仓库"></a>将本地代码推送到github已创建的仓库</h2><ol><li>git remote 查看是否关联远程仓库</li><li>git remote add 地址别名 地址</li><li>git remote -v 把地址别名和地址列出来</li><li>看分支名是否有冲突</li><li>git branch -m main (-M强制) 切换远程分支 </li><li>ssh-keygen -t ed25519 -C “<a href="mailto:&#x77;&#119;&#x77;&#x79;&#104;&#49;&#50;&#x33;&#x40;&#x67;&#105;&#x74;&#104;&#117;&#x62;&#x2e;&#99;&#111;&#109;">&#x77;&#119;&#x77;&#x79;&#104;&#49;&#50;&#x33;&#x40;&#x67;&#105;&#x74;&#104;&#117;&#x62;&#x2e;&#99;&#111;&#109;</a>“生成ssh密钥</li><li>cat ~&#x2F;.ssh&#x2F;id_ed25519.pub把该公钥复制到github上</li><li></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>跨域问题</title>
      <link href="/2024/12/13/%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/"/>
      <url>/2024/12/13/%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="关于跨域"><a href="#关于跨域" class="headerlink" title="关于跨域"></a>关于跨域</h1><h2 id="源：协议-域名-端口号"><a href="#源：协议-域名-端口号" class="headerlink" title="源：协议+域名+端口号"></a>源：协议+域名+端口号</h2><p>浏览器会对跨域做出哪些限制？</p><ol><li><code>DOM</code> 访问：不能通过 <code>JavaScript</code> 操作不同源页面中的 <code>DOM</code>。<br>例如，你不能从 <code>http://example.com</code> 页面中使用 <code>JavaScript</code> 修改 <code>http://anotherdomain.com</code> 页面的 <code>DOM</code>。</li><li><code>XMLHttpRequest</code> 和 <code>Fetch API</code>：无法通过 <code>AJAX</code> 请求访问不同源的资源。<br>例如，你不能从 <code>http://example.com</code> 页面发送请求到 <code>http://anotherdomain.com/api/data</code>。</li><li><code>Cookie</code>、<code>LocalStorage</code> 和 <code>IndexedDB</code>：这些存储机制只能被同源的页面访问。<br>例如，<code>http://example.com</code> 设置的 <code>Cookie</code> 只能由 <code>http://example.com</code> 页面读取，而不能被 <code>http://anotherdomain.com</code> 页面读取。<br><font color="red">注意</font></li></ol><ul><li>跨域限制仅存在浏览器端，服务端不存在跨域限制</li><li>即使跨域了，Ajax 请求也可以正常发出，但响应数据不会交给开发者。<br>  <img src="/2024/12/13/%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/image.png"></li><li><code>&lt;link&gt;</code> <code>&lt;script&gt;</code> <code>&lt;img&gt;</code>  ….. 这些标签发出的请求也可能跨域，只不过浏览器对标签跨域不做严格限制，对开发几乎无影响。</li></ul><h1 id="CORS解决跨域问题"><a href="#CORS解决跨域问题" class="headerlink" title="CORS解决跨域问题"></a>CORS解决跨域问题</h1><p>CORS 全称：<code>Cross-Origin Resource Sharing</code>（跨域资源共享），是用于控制浏览器校验跨域请求的一套规范，服务器依照 CORS 规范，添加特定响应头来控制浏览器校验，大致规则如下：</p><ul><li><font color="red">服务器</font>明确表示拒绝跨域请求，或没有表示，则浏览器校验不通过。</li><li><font color="red">服务器</font>明确表示允许跨域请求，则浏览器校验通过。</li></ul><h2 id="解决简单请求跨域"><a href="#解决简单请求跨域" class="headerlink" title="解决简单请求跨域"></a>解决简单请求跨域</h2><p>服务器在给出响应时，通过添加Access-Control-Allow-Origin响应头，来明确表达允许某个源发起跨域请求，随后浏览器在校验时，直接通过。<br>服务端</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 处理跨域中间件</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">corsMiddleWare</span>(<span class="params">req,res,next</span>)&#123;</span><br><span class="line">  <span class="comment">// 允许 http://127.0.0.1:5500 这个源发起跨域请求</span></span><br><span class="line">  <span class="comment">// res.setHeader(&#x27;Access-Control-Allow-Origin&#x27;,&#x27;http://127.0.0.1:5500&#x27;)</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 允许所有源发起跨域请求</span></span><br><span class="line">  res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>,<span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">  <span class="title function_">next</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置路由并使用中间件</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>,corsMiddleWare,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;hello!&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="简单请求与复杂请求"><a href="#简单请求与复杂请求" class="headerlink" title="简单请求与复杂请求"></a>简单请求与复杂请求</h3><table><thead><tr><th>简单请求</th><th>复杂请求</th></tr></thead><tbody><tr><td>请求方法为：GET、HEAD、POST</td><td></td></tr><tr><td>请求头字段要符合规范（不手动改请求头一般都符合规范</td><td></td></tr><tr><td>请求头的Content-Type的值只能是以下三种：text&#x2F;plain,multipart&#x2F;form-data,application&#x2F;x-www-form-urlencoded</td><td></td></tr></tbody></table><p>复杂请求会自动发送预检请求</p><h3 id="预检请求"><a href="#预检请求" class="headerlink" title="预检请求"></a>预检请求</h3><ol><li>在实际跨域请求之前发出</li><li>用于向服务器确认是否允许接下来的跨域请求。</li><li>基本流程：先发起OPTIONS请求，如果通过预检，继续发起实际的跨域请求。</li><li>OPTIONS请求头内容：<table><thead><tr><th>请求头</th><th>含义</th></tr></thead><tbody><tr><td>Origin</td><td>发起请求的源</td></tr><tr><td>Access-Control-Request-Method</td><td>实际请求的 HTTP 方法</td></tr><tr><td>Access-Control-Request-Headers</td><td>实际请求中使用的自定义头（如果有的话）</td></tr></tbody></table></li></ol><h2 id="解决复杂请求跨域"><a href="#解决复杂请求跨域" class="headerlink" title="解决复杂请求跨域"></a>解决复杂请求跨域</h2><ol><li>服务器先通过浏览器的预检请求，服务器需要返回如下响应头</li></ol><ul><li>Access-Control-Allow-Origin允许的源</li><li>Access-Control-Allow-Methods允许的方法</li><li>Access-Control-Allow-Headers允许的自定义头</li><li>Access-Control-Max-Age预检请求的结果缓存时间（可选）如果加上，就表示在多少秒内不再发送预检请求，否则多次点击时会重复发送</li></ul><ol start="2"><li><h2 id="处理实际的跨域请求（借助cors库完成配置）-npm-i-cors-app-use-cors"><a href="#处理实际的跨域请求（借助cors库完成配置）-npm-i-cors-app-use-cors" class="headerlink" title="处理实际的跨域请求（借助cors库完成配置）- npm i cors- app.use(cors())"></a>处理实际的跨域请求（借助cors库完成配置）<br>- <code>npm i cors</code><br>- <code>app.use(cors())</code></h2>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> corsOptions = &#123;</span><br><span class="line"><span class="attr">origin</span>: <span class="string">&#x27;http://127.0.0.1:5500&#x27;</span>, <span class="comment">// 允许的源</span></span><br><span class="line"><span class="attr">methods</span>: [<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;PUT&#x27;</span>, <span class="string">&#x27;DELETE&#x27;</span>, <span class="string">&#x27;HEAD&#x27;</span>, <span class="string">&#x27;OPTIONS&#x27;</span>], <span class="comment">// 允许的方法</span></span><br><span class="line"><span class="attr">allowedHeaders</span>: [<span class="string">&#x27;school&#x27;</span>], <span class="comment">// 允许的自定义头</span></span><br><span class="line"><span class="attr">exposedHeaders</span>: [<span class="string">&#x27;abc&#x27;</span>], <span class="comment">// 要暴露的响应头（允许浏览器端拿到该响应头，不加就无法获取）</span></span><br><span class="line"><span class="attr">optionsSuccessStatus</span>: <span class="number">200</span> <span class="comment">// 预检请求成功的状态码</span></span><br><span class="line">&#125;;</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">cors</span>(corsOptions)); <span class="comment">// 使用cors中间件</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="配置代理服务器解决跨域"><a href="#配置代理服务器解决跨域" class="headerlink" title="配置代理服务器解决跨域"></a>配置代理服务器解决跨域</h1><p>借助<code>http-proxy-middleware</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; createProxyMiddleware &#125; = <span class="built_in">require</span>(<span class="string">&#x27;http-proxy-middleware&#x27;</span>);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/api&#x27;</span>,<span class="title function_">createProxyMiddleware</span>(&#123;</span><br><span class="line">  <span class="attr">target</span>:<span class="string">&#x27;https://www.toutiao.com&#x27;</span>,</span><br><span class="line">  <span class="attr">changeOrigin</span>:<span class="literal">true</span>,</span><br><span class="line">  <span class="attr">pathRewrite</span>:&#123;</span><br><span class="line">    <span class="string">&#x27;^/api&#x27;</span>:<span class="string">&#x27;&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure><p>解释：<br>自己给自己发请求(‘<a href="https://127.0.0.1:8080/api/news/today')%EF%BC%8C%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%8B%A6%E6%88%AA%E6%89%80%E6%9C%89%E5%B8%A6%E6%9C%89/api%E7%9A%84%E8%AF%B7%E6%B1%82%EF%BC%8C%EF%BC%88target%EF%BC%89%E8%BD%AC%E5%8F%91%E7%BB%99'https://www.toutiao.com'%EF%BC%8C%EF%BC%88pathRewrite%EF%BC%89%E8%BD%AC%E5%8F%91%E6%97%B6%E5%B0%86/api%E6%9B%BF%E6%8D%A2%E4%B8%BA%E7%A9%BA('https://www.toutiao.com/news/today')">https://127.0.0.1:8080/api/news/today&#39;)，代理服务器拦截所有带有/api的请求，（target）转发给&#39;https://www.toutiao.com&#39;，（pathRewrite）转发时将/api替换为空(&#39;https://www.toutiao.com/news/today&#39;)</a>;<br>此时，发出请求的是代理服务器，而服务器之间没有跨域限制;<br>浏览器&lt;-&gt;代理服务器&lt;-&gt;目标服务器<br>所以我们还要保证浏览器和代理服务器之间不能存在跨域问题。<br>把一个网页和代理服务器捆绑（同源）：在server.js中<code>app.use(express.static(&#39;./index.html&#39;))</code>–&gt;把静态页面给服务器，此时只需要访问代理服务器的端口号即可访问到该静态页面</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java</title>
      <link href="/2024/12/09/java/"/>
      <url>/2024/12/09/java/</url>
      
        <content type="html"><![CDATA[<h1 id="环境变量的配置"><a href="#环境变量的配置" class="headerlink" title="环境变量的配置"></a>环境变量的配置</h1><ol><li>先配置JAVA_HOME （路径不带bin）</li><li>再配置Path (%JAVA_HOME%\bin)</li></ol><h1 id="JRE与JDK"><a href="#JRE与JDK" class="headerlink" title="JRE与JDK"></a>JRE与JDK</h1><p>JDK:java开发工具包，包括JVM虚拟机：JAVA程序运行的地方；核心类库；开发工具：javac,java…<br>JRE:java运行环境；包括：JVM,核心类库，运行工具<br>JDK包含JRE包含JVM</p><h1 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h1><p>|整数|小数|字符串|字符|布尔|空|<br>‘\t’，把前面的字符串补成8位或8的倍数<br>基本数据类型</p><table><thead><tr><th align="center">整数</th><th align="center">浮点数</th><th align="center">字符</th><th align="center">布尔</th></tr></thead><tbody><tr><td align="center">byte,short,int,long</td><td align="center">float,double</td><td align="center">char</td><td align="center">boolean</td></tr></tbody></table><p>取值范围:double&gt;float&gt;long&gt;int&gt;short&gt;byte<br><code>long l = 99999999L;</code><br><code>float f=10.2F;</code><br><code>double d = 20.2;</code></p><h1 id="idea-项目结构"><a href="#idea-项目结构" class="headerlink" title="idea 项目结构"></a>idea 项目结构</h1><p>project–&gt;module–&gt;package–&gt;class<br>包： 文件夹，用来管理不同功能的java类<br>包名一般是公司域名的倒写。例如：黑马是<a href="http://www.itheima.com,包名就可以定义成com.itheima.技术名称./">www.itheima.com,包名就可以定义成com.itheima.技术名称。</a></p><h1 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h1><h2 id="隐式转换"><a href="#隐式转换" class="headerlink" title="隐式转换"></a>隐式转换</h2><ol><li>int+double，int 会先提升为double 再计算</li><li>short,char,byte会先提升为int 再计算，byte+byte&#x3D;int</li></ol><h2 id="强制转换"><a href="#强制转换" class="headerlink" title="强制转换"></a>强制转换</h2><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>1+2+”abc”+2+1–&gt;”3abc21”<br>^（异或）的使用：计算规则：如果两边相同，结果为false，如果两边不同，结果为true</p><p>&amp;&amp; 和 &amp; 、||和|的运行结果都是一模一样的。但是短路逻辑运算符可以提高程序的运行效率。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="keyword">switch</span> (number) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span> -&gt; System.out.println(<span class="string">&quot;一&quot;</span>);</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span> -&gt; System.out.println(<span class="string">&quot;二&quot;</span>);</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span> -&gt; System.out.println(<span class="string">&quot;三&quot;</span>);</span><br><span class="line">    <span class="keyword">default</span> -&gt; System.out.println(<span class="string">&quot;其他&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.导包</span></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RandomDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//2.创建对象</span></span><br><span class="line">        <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="comment">//3.生成随机数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> r.nextInt(<span class="number">100</span>);<span class="comment">//包左不包右，包头不包尾</span></span><br><span class="line">        <span class="comment">//0 ~ 99</span></span><br><span class="line">        System.out.println(number);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><p>int 类型的数组可以存：byte类型，short类型。<br>利用静态初始化完成创建并添加元素<br>int[] agesArr &#x3D; new int[]{18,19,20,21,22};<br>int[] agesArr &#x3D; {18,19,20,21,22};</p><p>动态初始化：<br>1.定义一个数组，存3个人的年龄，年龄未知<br>int[] agesArr &#x3D; new int[3];<br>2.定义一个数组，存班级10名学生的考试成绩，考试成绩暂时未知，考完才知道。<br>int[] scoresArr &#x3D; new int[10];<br><strong>数组一旦创建之后，长度不能发生变化。</strong><br>数组的默认初始化值：<br>整数类型：0<br>小数类型：0.0<br>布尔类型：false<br>字符类型：’\u0000’<br>引用类型：null</p><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public static 返回值类型 方法名(参数) &#123;</span><br><span class="line">   方法体; </span><br><span class="line">   return 数据 ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h2><p>满足下列条件的多个方法相互构成重载:</p><ol><li>多个方法在同一个类中</li><li>多个方法具有相同的方法名</li><li>多个方法的参数不相同，类型不同或者数量不同<br><strong>不能通过返回值来判定两个方法是否相互构成重载</strong><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public class MethodDemo &#123;</span><br><span class="line">public static void fn(int a) &#123;</span><br><span class="line">    //方法体</span><br><span class="line">    &#125;</span><br><span class="line">    public static int fn(double a) &#123;</span><br><span class="line">    //方法体</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">public class MethodDemo &#123;</span><br><span class="line">public static float fn(int a) &#123;</span><br><span class="line">    //方法体</span><br><span class="line">    &#125;</span><br><span class="line">    public static int fn(int a , int b) &#123;</span><br><span class="line">    //方法体</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><p>没有返回值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public class 类名&#123;</span><br><span class="line">​ 修饰符 类名( 参数 ) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>构造方法的创建<br>如果没有定义构造方法，系统将给出一个默认的无参数构造方法<br>如果定义了构造方法，系统将不再提供默认的构造方法<br>构造方法的重载<br>如果自定义了带参构造方法，还要使用无参数构造方法，就必须再写一个无参数构造方法<br>推荐的使用方式<br>无论是否使用，都手工书写无参数构造方法<br>重要功能！<br>可以使用带参构造，为成员变量进行初始化<br><img src="/2024/12/09/java/image-1.png" alt="alt text"><br>基本数据类型：数据值存储在自己的空间中<br>引用数据类型：例如上图中，s1存放的是数据值的地址，需要在该地址才能找到对应的数据，所以叫引用数据类型；</p><h1 id="键盘录入"><a href="#键盘录入" class="headerlink" title="键盘录入"></a>键盘录入</h1><p>遇到空格，制表符，回车就停止接收</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Scanner sc = new Scanner(System.in);</span><br><span class="line">int num1=sc.nextInt();//接收整数</span><br><span class="line">double num2=sc.nextDouble();//浮点数</span><br><span class="line">String num3=sc.next();//字符串</span><br></pre></td></tr></table></figure><p>可以接收空格，制表符，遇到回车才停止</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String n4 = sc.nextLine();//字符串</span><br></pre></td></tr></table></figure><h1 id="String类的构造方法"><a href="#String类的构造方法" class="headerlink" title="String类的构造方法"></a>String类的构造方法</h1><p>两种方式：1.直接赋值 2.new</p><ul><li><p>常用的构造方法</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>String s &#x3D; String()</td><td>创建一个空白字符串对象，不含有任何内容</td></tr><tr><td>char[] chs&#x3D;{‘1’,’a’};String s4 &#x3D; new String(chs);</td><td>根据字符数组的内容，来创建字符串对象</td></tr><tr><td>public   String(byte[] bys)</td><td>根据字节数组的内容，来创建字符串对象</td></tr><tr><td>String s &#x3D;   “abc”;</td><td>直接赋值的方式创建字符串对象，内容就是abc</td></tr></tbody></table></li><li><p>两种构建方式在内存中的区别<br>通过构造方法创建：通过 new 创建的字符串对象，每一次 new 都会在堆中申请一个内存空间，虽然内容相同，但是地址值不同<br>直接赋值方式创建：以“”方式给出的字符串，只要字符序列相同(顺序和大小写)，无论在程序代码中出现几次，JVM 都只会建立一个 String 对象，并在字符串池中维护<br><img src="/2024/12/09/java/image-2.png" alt="alt text"></p></li><li><p>&#x3D;&#x3D;号比较的</p></li></ul><ol><li>基本数据类型：数据值</li><li>引用数据类型：地址值</li></ol><ul><li>equals()，equalsIgnoreCase()</li><li>substring(),replace<br>StringBuilder()<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">StringBuilder ab = new StringBuilder(&quot;abc&quot;);</span><br><span class="line">System.out.println(ab);</span><br><span class="line">ab.append(&quot;cd&quot;);</span><br><span class="line">System.out.println(ab.reverse());</span><br><span class="line">System.out.println(ab.length());</span><br><span class="line">System.out.println(ab.toString());</span><br></pre></td></tr></table></figure>StringJoiner<br>StringJoiner跟StringBuilder一样，也可以看成是一个容器，创建之后里面的内容是可变的。<br>作用：提高字符串的操作效率，而且代码编写特别简洁，但是目前市场上很少有人用。<br>JDK8出现的<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//1.创建一个对象，并指定中间的间隔符号</span><br><span class="line">StringJoiner sj = new StringJoiner(&quot;---&quot;);</span><br><span class="line">//2.添加元素</span><br><span class="line">sj.add(&quot;aaa&quot;).add(&quot;bbb&quot;).add(&quot;ccc&quot;);</span><br><span class="line">//3.打印结果</span><br><span class="line">System.out.println(sj);//aaa---bbb---ccc</span><br></pre></td></tr></table></figure></li></ul><h1 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h1><ul><li><p>什么是集合</p><p>​提供一种存储空间可变的存储模型，存储的数据容量可以发生改变</p></li><li><p>ArrayList集合的特点</p><p>​长度可以变化，只能存储<font color="red">引用数据类型</font>。</p></li><li><p>泛型的使用</p><p>​用于约束集合中存储元素的数据类型</p></li></ul><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public boolean add(要添加的元素)</td><td>将指定的元素追加到此集合的末尾</td></tr><tr><td>public boolean remove(要删除的元素)</td><td>删除指定元素,返回值表示是否删除成功</td></tr><tr><td>public E  remove(int   index)</td><td>删除指定索引处的元素，<strong>返回被删除的元素</strong></td></tr><tr><td>public E   set(int index,E   element)</td><td>修改指定索引处的元素，<strong>返回被修改的元素</strong></td></tr><tr><td>public E   get(int   index)</td><td>返回指定索引处的元素</td></tr><tr><td>public int   <strong>size()</strong></td><td>返回集合中的元素的个数</td></tr></tbody></table><h1 id="静态static"><a href="#静态static" class="headerlink" title="静态static"></a>静态static</h1><p><img src="/2024/12/09/java/image-3.png" alt="alt text"><br>静态成员变量:修饰符 static 数据类型 变量名 &#x3D; 初始值；<br>当 <code>static</code> 修饰成员变量或者成员方法时，该变量称为<strong>静态变量</strong>，该方法称为<strong>静态方法</strong>。该类的每个对象都<strong>共享</strong>同一个类的静态变量和静态方法。任何对象都可以更改该静态变量的值或者访问静态方法。因为静态变量或者静态方法直接<strong>通过类名访问</strong>即可.<br>static修饰的成员属于类，会存储在静态区，是随着类的加载而加载的，且只加载一次，所以只有一份，节省内存。存储于一块固定的内存区域（静态区），所以，可以直接被类名调用。它优先于对象存在，所以，可以被所有对象共享。<br>总结：</p><ol><li>静态方法中，只能访问静态</li><li>非静态可以访问所有</li><li>静态中没有this关键字</li></ol><h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><ol><li>java只能单继承，一个类只能继承一个直接父类</li><li>java不支持多继承，但是支持多层继承</li><li>java中所有的类都直接或间接继承于Object类</li><li>子类不能访问父类中私有的</li></ol><ul><li>子类可以继承父类中的哪些内容？</li></ul><ol><li>父类的构造方法不能被子类继承</li><li>成员变量 非私有：可以；private：可以，但不可以直接使用。</li><li>成员方法： 虚方法表（非private,static,final）中的可以，其他不可以。</li></ol><h2 id="继承中成员变量的访问特点"><a href="#继承中成员变量的访问特点" class="headerlink" title="继承中成员变量的访问特点"></a>继承中成员变量的访问特点</h2><ol><li>就近原则：局部-&gt;本类成员变量-&gt;父类成员变量（逐级往上</li><li>如果出现重名 父类中的可以用super.name访问，this(就近原则),super(直接找父类)</li></ol><ul><li>方法的重写：当父类中的方法不能满足需求时<br>只有被添加到<strong>虚方法表</strong>中的方法才能被重写且重写的方法尽可能和父类保持一致</li></ul><h2 id="父类中的构造方法访问特点"><a href="#父类中的构造方法访问特点" class="headerlink" title="父类中的构造方法访问特点"></a>父类中的构造方法访问特点</h2><ul><li>父类中的构造方法不会被子类继承        </li><li>子类中所有的构造方法默认先访问父类中的无参构造，再执行自己<br>为什么？ 子类在初始化时有可能会用到父类中的数据，如果父类没有完成初始化，子类无法使用父类的数据；那么如何调用父类构造方法的？子类构造方法第一行语句默认都是super()，不写也存在，且必须在第一行。如果想调用父类有参构造，必须手动写super调用。<br><img src="/2024/12/09/java/image-4.png" alt="alt text"></li></ul><h1 id="多态（对象的多种形态"><a href="#多态（对象的多种形态" class="headerlink" title="多态（对象的多种形态"></a>多态（对象的多种形态</h1><ol><li>多态的前提？</li></ol><ul><li>有继承&#x2F;实现关系</li><li>父类的引用指向子类对象</li><li>方法的重写<br><img src="/2024/12/09/java/image-5.png" alt="alt text"><br>调用成员变量：编译看左边（父类，运行也看左边<br>调用成员方法：编译看左边，运行看右边（子类</li><li>优势<br>方法中，使用父类型作为参数，可以接收所有子类对象</li><li>弊端：不能使用子类的特有功能</li><li>解决方案：类型转换：自动类型转换(Person p &#x3D; new Student()) 强制类型转换Student s &#x3D; (Student)p,如果转换类型不一致，可以用以下两种方法进行判断<br><img src="/2024/12/09/java/image-6.png" alt="alt text"> <img src="/2024/12/09/java/image-7.png" alt="alt text"></li></ul><h1 id="final"><a href="#final" class="headerlink" title="final"></a>final</h1><ul><li>类：被修饰的类，不能被继承。</li><li>方法：被修饰的方法，不能被重写。</li><li>变量：被修饰的变量，有且仅能被赋值一次。</li></ul><h1 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h1><ul><li>单个单词：全部大写</li><li>多个单词：全部大写，单词间用下划线隔开<br><strong>注意</strong></li></ul><ol><li>final 修饰的变量是基本类型：变量存储的<strong>数据值</strong>不能发生改变</li><li>final 修饰的变量是引用类型：变量存储的<strong>地址值</strong>不能发生改变，对象内部可以改变<br>String 不能修改：private final void String -&gt;final说明无法修改地址，pravite 不能修改地址值（不提供get和set方法</li></ol><h1 id="权限修饰符"><a href="#权限修饰符" class="headerlink" title="权限修饰符"></a>权限修饰符</h1><p><img src="/2024/12/09/java/image-8.png" alt="alt text"></p><h1 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h1><ol><li>局部代码块：在方法中的代码块</li><li>构造代码块：{}写在成员变量位置的代码块<ul><li>作用：可以把多个构造方法中重复的代码抽取出来</li><li>执行时机：创建本类实例对象时，会先执行构造代码块再执行构造方法</li></ul></li><li><strong>静态代码块</strong> static{} 随着类的加载而加载，自动触发，只执行一次（用于初始化对象）</li></ol><h1 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>抽象类<strong>不能创建对象</strong>，如果创建，编译无法通过而报错。只能创建其非抽象子类的对象。</p><blockquote><p>理解：假设创建了抽象类的对象，调用抽象的方法，而抽象方法没有具体的方法体，没有意义。</p></blockquote></li><li><p>抽象类中，可以有构造方法，是供子类创建对象时，初始化父类成员使用的。</p><blockquote><p>理解：子类的构造方法中，有默认的super()，需要访问父类构造方法。</p></blockquote></li><li><p>抽象类中，不一定包含抽象方法，但是有抽象方法的类必定是抽象类。</p><blockquote><p>理解：未包含抽象方法的抽象类，目的就是不想让调用者创建该类对象，通常用于某些特殊的类结构设计。</p></blockquote></li><li><p>抽象类的子类，必须重写抽象父类中<strong>所有的</strong>抽象方法，否则子类也必须定义成抽象类，编译无法通过而报错。 </p><blockquote><p>理解：假设不重写所有抽象方法，则类中可能包含抽象方法。那么创建对象后，调用抽象的方法，没有意义。</p></blockquote></li><li><p>抽象类存在的意义是为了被子类继承。</p></li></ol><h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><ul><li>成员变量：只能是常量，默认修饰符：public static final</li><li>构造方法：没有</li><li>成员方法：只能是抽象方法，默认修饰符：public abstract</li></ul><h2 id="接口和类之间的关系"><a href="#接口和类之间的关系" class="headerlink" title="接口和类之间的关系"></a>接口和类之间的关系</h2><ul><li>类和类：继承关系，只能单继承，不能多继承，但是可以多层继承</li><li>类和接口：实现关系，可以单实现也可以多实现，还可以在继承一个类的同时实现多个接口</li><li>接口和接口，继承关系，可以单继承，也可以多继承</li></ul><h2 id="接口中的默认方法"><a href="#接口中的默认方法" class="headerlink" title="接口中的默认方法"></a>接口中的默认方法</h2><ul><li>默认方法不强制被重写，如果被重写，去掉default关键字</li><li>public可以省略，default不能省</li><li>如果实现了多个接口，多个接口存在相同名字的默认方法，子类必须重写该方法</li></ul><h2 id="接口中静态方法"><a href="#接口中静态方法" class="headerlink" title="接口中静态方法"></a>接口中静态方法</h2><ul><li>public static void 方法名(){}</li><li>静态方法只能通过接口名调用，不能通过实现类名或者对象名调用</li><li>public可以省略，static不能省，静态方法不能被重写</li></ul><p><img src="/2024/12/09/java/image-9.png" alt="alt text"><br><img src="/2024/12/09/java/image-10.png" alt="alt text"></p><p><img src="/2024/12/09/java/image-11.png" alt="alt text"></p><h1 id="JLabel"><a href="#JLabel" class="headerlink" title="JLabel"></a>JLabel</h1><p>一个组件，用于显示一段短文本或一个图像图标。</p><ul><li>JLabel jlabel &#x3D; new JLabel(Icon image)：创建一个带有指定图像的标签。</li><li>JLabel jlabel &#x3D; new JLabel(String text)：创建一个带有指定文本的标签。</li><li>ImageIcon i &#x3D; new ImageIcon(“path&#x2F;to&#x2F;image.png”);<br>JLabel l &#x3D; new JLabel(i);</li><li>jlabel.setBounds(203,283,197,73);&#x2F;&#x2F;设置在组件中显示的位置(x,y)，宽，高，</li><li>getContentPane().add(jlabel);获取面板内容并添加</li><li>ImageIcon image&#x3D;new ImageIcon(path);</li><li>image.setImage(image.getImage().getScaledInstance(105, 105, Image.SCALE_DEFAULT ));设置图片大小</li><li>System.exit(0);关闭虚拟机</li></ul><h1 id="JFrame类的方法"><a href="#JFrame类的方法" class="headerlink" title="JFrame类的方法"></a>JFrame类的方法</h1><p>setSize(488,430);<br>setTitle(“拼图单机版–登录”);<br>&#x2F;&#x2F;置顶<br>setAlwaysOnTop(true);<br>&#x2F;&#x2F;居中<br>setLocationRelativeTo(null);<br>&#x2F;&#x2F;设置关闭模式<br>setDefaultCloseOperation(3);<br>setVisible(true);</p><h1 id="常见API"><a href="#常见API" class="headerlink" title="常见API"></a>常见API</h1><h2 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">abs</span><span class="params">(<span class="type">int</span> a)</span><span class="comment">// 返回参数的绝对值</span></span><br><span class="line">Math.absExact()<span class="comment">//越界会报错</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">ceil</span><span class="params">(<span class="type">double</span> a)</span><span class="comment">// 向x正方向</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">floor</span><span class="params">(<span class="type">double</span> a)</span><span class="comment">// 向x负方向</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">round</span><span class="params">(<span class="type">float</span> a)</span><span class="comment">// 四舍五入</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span><span class="comment">// 获取两个int值中的较大值</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">min</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span><span class="comment">// 获取两个int值中的较小值</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">pow</span> <span class="params">(<span class="type">double</span> a,<span class="type">double</span> b)</span><span class="comment">// 计算a的b次幂的值</span></span><br><span class="line">Math.sqrt ()</span><br><span class="line">Math.cbrt ()</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">random</span><span class="params">()</span><span class="comment">// 返回一个[0.0,1.0)的随机值</span></span><br></pre></td></tr></table></figure><h2 id="System"><a href="#System" class="headerlink" title="System"></a>System</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">long</span> <span class="title function_">currentTimeMillis</span><span class="params">()</span><span class="comment">// 获取当前时间所对应的毫秒值</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">exit</span><span class="params">(<span class="type">int</span> status)</span><span class="comment">// 终止当前正在运行的Java虚拟机，0表示正常退出，非零表示异常退出</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">arraycopy</span><span class="params">(Object src,  <span class="type">int</span>  srcPos, Object dest, <span class="type">int</span> destPos, <span class="type">int</span> length)</span>; <span class="comment">// 进行数值元素copy</span></span><br></pre></td></tr></table></figure><h2 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span><span class="comment">//返回该对象的字符串表示形式(可以看做是对象的内存地址值)</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span><span class="comment">//比较两个对象地址值是否相等；true表示相同，false表示不相同</span></span><br><span class="line"><span class="keyword">protected</span> Object <span class="title function_">clone</span><span class="params">()</span>    <span class="comment">//对象克隆</span></span><br></pre></td></tr></table></figure><p><img src="/2024/12/09/java/image.png"><br>Object中的克隆，是浅克隆<br>浅克隆：不管是什么数据类型，都完全拷贝过来<br>深克隆：基本数据类型拷贝过来，字符串会被复用，引用数据类型会创建新的</p><h2 id="Objects"><a href="#Objects" class="headerlink" title="Objects"></a>Objects</h2><p><img src="/2024/12/09/java/image-12.png" alt="alt text"></p><h2 id="BigInteger"><a href="#BigInteger" class="headerlink" title="BigInteger"></a>BigInteger</h2><ul><li>获取到BigInteger对象<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">BigInteger</span><span class="params">(<span class="type">int</span> num, Random rnd)</span> <span class="comment">//获取随机大整数，范围：[0 ~ 2的num次方-1]</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">BigInteger</span><span class="params">(String val)</span> <span class="comment">//获取指定的大整数</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">BigInteger</span><span class="params">(String val, <span class="type">int</span> radix)</span> <span class="comment">//获取指定进制的大整数</span></span><br><span class="line">下面这个不是构造，而是一个静态方法获取BigInteger对象</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> BigInteger <span class="title function_">valueOf</span><span class="params">(<span class="type">long</span> val)</span> <span class="comment">//静态方法获取BigInteger的对象，内部有优化:-16到16之间是已经创造好的对象</span></span><br></pre></td></tr></table></figure></li><li>常用的方法</li></ul><p><img src="/2024/12/09/java/image%20copy%202.png" alt="alt text"></p><h2 id="bigDecimal"><a href="#bigDecimal" class="headerlink" title="bigDecimal"></a>bigDecimal</h2><p>创建对象：</p><ol><li>如果表示的数字不大，没有超出double的取值范围，用静态方法<code>BigDecimal bd1 = new BigDecimal(0.01)</code></li><li>如果表示的数字不大，超出double的取值范围,<code>BigDecimal bd1 = new BigDecimal(&quot;0.01&quot;)</code></li><li>如果传递的[0,10]之间的数方法会返回已经创建好的对象<code>BigDecimal bd1 = BigDecimal.valueOf(10)</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> BigDecimal <span class="title function_">add</span><span class="params">(BigDecimal value)</span><span class="comment">// 加法运算</span></span><br><span class="line"><span class="keyword">public</span> BigDecimal <span class="title function_">subtract</span><span class="params">(BigDecimal value)</span><span class="comment">// 减法运算</span></span><br><span class="line"><span class="keyword">public</span> BigDecimal <span class="title function_">multiply</span><span class="params">(BigDecimal value)</span><span class="comment">// 乘法运算</span></span><br><span class="line"><span class="keyword">public</span> BigDecimal <span class="title function_">divide</span><span class="params">(BigDecimal value)</span><span class="comment">// 触发运算</span></span><br></pre></td></tr></table></figure><p><img src="/2024/12/09/java/image-13.png" alt="alt text"><br>| 或者<br>注意：(正则表达式的字母是一个一个匹配的)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(&quot;ab&quot;.matches(&quot;[abc]&quot;));//false</span><br><span class="line">System.out.println(&quot;ab&quot;.matches(&quot;[abc][abc]&quot;));//true</span><br><span class="line">System.out.println(&quot;zz&quot;.matches(&quot;[^abc]&quot;));//false</span><br><span class="line">System.out.println(&quot;zz&quot;.matches(&quot;[^abc][^abc]&quot;));//true</span><br><span class="line">regex4 = &quot;(?i)abc&quot;//忽略abc的大小写</span><br></pre></td></tr></table></figure><p><img src="/2024/12/09/java/image%20copy%203.png" alt="alt text"><br><img src="/2024/12/09/java/image%20copy%204.png" alt="alt text"><br><img src="/2024/12/09/java/image%20copy%205.png" alt="alt text"></p><h2 id="爬虫"><a href="#爬虫" class="headerlink" title="爬虫"></a>爬虫</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Java是觉得今年圣诞节那就是&quot;</span>;</span><br><span class="line"><span class="comment">//Pattern 表示正则表达式</span></span><br><span class="line"><span class="comment">//Matcher 文本匹配器；作用：按照正则表达式的规则去读取字符串，从头开始读取；在大串中去找符合匹配规则的子串。</span></span><br><span class="line"><span class="comment">//获取正则表达式的对象</span></span><br><span class="line"><span class="comment">//找JavaXX</span></span><br><span class="line"><span class="comment">//p：规则</span></span><br><span class="line"><span class="type">Pattern</span> <span class="variable">p</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;Java\\d&#123;0,2&#125;&quot;</span>);</span><br><span class="line"><span class="comment">//获取文本匹配器的对象</span></span><br><span class="line"><span class="comment">//m 要在str中找符合p规则的小串</span></span><br><span class="line"><span class="type">Matcher</span> <span class="variable">m</span> <span class="operator">=</span> p.matcher(str);</span><br><span class="line"><span class="comment">//拿着文本匹配器从头开始读取，寻找是否有满足规则的子串</span></span><br><span class="line"><span class="type">Boolean</span> <span class="variable">b</span> <span class="operator">=</span> m.find();</span><br><span class="line"><span class="comment">//如果没有返回false</span></span><br><span class="line"><span class="comment">//如果有，返回true.在底层记录字串的起始索引和结束索引+1</span></span><br><span class="line"><span class="comment">//subString(起始索引,结束索引) 包头不包尾</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> m.group();<span class="comment">//把截取的小串返回</span></span><br></pre></td></tr></table></figure><p>步骤：</p><ol><li>获取正则对象<code>Pattern p = Pattern.compile(&quot;Java\\d&#123;0,2&#125;&quot;);</code></li><li>获取文本匹配器对象<code>Matcher m = p.matcher(str);</code></li><li>查找<code>Boolean b = m.find();</code></li></ol><h3 id="特殊要求的爬取："><a href="#特殊要求的爬取：" class="headerlink" title="特殊要求的爬取："></a>特殊要求的爬取：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">String str=<span class="string">&quot;java自从95年问世以来，经历了很多版本，目前企业中用的最多的是Java8和JAva11，&quot;</span> +</span><br><span class="line"><span class="string">&quot;因为这两个是长期支持版本，下一个长期支持版本是JAVa17，相信在未来不久JAVA17也会逐渐登上历史舞台&quot;</span>;</span><br><span class="line">Pattern p= Pattern.compile(regex1);</span><br><span class="line">Matcher m=p.matcher(str);</span><br><span class="line"><span class="keyword">while</span>(m.find())&#123;</span><br><span class="line">System.out.println(m.group());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>需求1:爬取版本号为8，11.17的Java文本，但是只要Java，不显示版本号。<font color="red"><strong>获取时只获取前半部分</strong></font><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String regex1=<span class="string">&quot;((?i)java)(?=8|11|17)&quot;</span>;</span><br></pre></td></tr></table></figure>其中&#x3D;表示java后面跟的东西，?是占位符，这里指Java</li><li>需求2:爬取版本号为8，11，17的Java文本。正确爬取结果为:Java8 Java11 Java17 Java17<font color="red"><strong>?:获取整体</strong></font><br><code>String regex1=&quot;((?i)java)(8|11|17)&quot;;</code>或<code>String regex1=&quot;((?i)java)(?:8|11|17)&quot;;</code></li><li>需求3:爬取除了版本号为8，11，17的Java文本，<br><code>String regex1=&quot;((?i)java)(?!8|11|17)&quot;;</code></li></ul><h3 id="贪婪爬取与非贪婪"><a href="#贪婪爬取与非贪婪" class="headerlink" title="贪婪爬取与非贪婪"></a>贪婪爬取与非贪婪</h3><p>java默认的就是贪婪爬取，只写+和*表示贪婪匹配，如果在+和后面加问号表示非贪婪爬取</p><h3 id="split和replaceAll方法"><a href="#split和replaceAll方法" class="headerlink" title="split和replaceAll方法"></a>split和replaceAll方法</h3><p><code>public String replaceAll(String regex,String newStr)</code><br>参数regex表示一个正则表达式。可以将当前字符串中匹配regex正则表达式的字符串替换为newStr。<br><code>public String[] split(String regex)</code><br>参数regex表示正则表达式。可以将当前字符串中匹配regex正则表达式的符号作为”分隔符”来切割字符串。</p><h3 id="捕获分组和非捕获分组"><a href="#捕获分组和非捕获分组" class="headerlink" title="捕获分组和非捕获分组"></a>捕获分组和非捕获分组</h3><h4 id="捕获分组"><a href="#捕获分组" class="headerlink" title="捕获分组"></a>捕获分组</h4><p><strong>后续还需要使用本组的数据</strong><br>形式：正则内部\组号  正则外部$组号</p><ul><li>一个字符<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String str=<span class="string">&quot;a123a&quot;</span>;</span><br><span class="line">String regex1=<span class="string">&quot;(.).+\\1&quot;</span>;</span><br><span class="line">System.out.println(str.matches(regex1));</span><br></pre></td></tr></table></figure></li><li>多个字符<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String str=<span class="string">&quot;ab123ab&quot;</span>;</span><br><span class="line">String regex1=<span class="string">&quot;(.+).+\\1&quot;</span>;</span><br><span class="line">System.out.println(str.matches(regex1));</span><br></pre></td></tr></table></figure></li><li>开始的每一个字符一样并且和后面的相同<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String str=<span class="string">&quot;aab123aaa&quot;</span>;<span class="comment">//注意此时的输出应为true,因为b和123被分为一组</span></span><br><span class="line">String regex1=<span class="string">&quot;((.)\\2*).+\\1&quot;</span>;</span><br><span class="line">System.out.println(str.matches(regex1));</span><br></pre></td></tr></table></figure></li><li>去除重复的(在正则外面使用分组)<br>将”我要学学学”替换为”我要学”<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String str=<span class="string">&quot;我要学学学&quot;</span>;</span><br><span class="line">String res=str.replaceAll(<span class="string">&quot;(.)\\1+&quot;</span>,<span class="string">&quot;$1&quot;</span>);</span><br><span class="line">System.out.println(res);</span><br></pre></td></tr></table></figure></li></ul><h4 id="非捕获分组"><a href="#非捕获分组" class="headerlink" title="非捕获分组"></a>非捕获分组</h4><p><strong>分组之后不再需要本组数据且不占组号</strong><br><img src="/2024/12/09/java/image%20copy%206.png" alt="alt text"></p><h2 id="时间相关类"><a href="#时间相关类" class="headerlink" title="时间相关类"></a>时间相关类</h2><h3 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h3><p>创建一个对象表示当前时间(无参构造)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Date d1= <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">System.out.println(d1);</span><br></pre></td></tr></table></figure><p>创建一个对象表示指定时间(有参构造)参数是long类型的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Date d2= <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">0L</span>);</span><br><span class="line">System.out.println(d2);</span><br></pre></td></tr></table></figure><p>setTime修改时间(在起始时间上加)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">d2.setTime(<span class="number">1000L</span>);<span class="comment">//毫秒值</span></span><br><span class="line">System.out.println(d2);</span><br></pre></td></tr></table></figure><p>获取当前时间的毫秒值(相对于起始时间)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">long</span> <span class="variable">time</span> <span class="operator">=</span> d2.getTime();</span><br><span class="line">System.out.println(time);<span class="comment">//1000</span></span><br></pre></td></tr></table></figure><h3 id="SimpleDateFormat"><a href="#SimpleDateFormat" class="headerlink" title="SimpleDateFormat"></a>SimpleDateFormat</h3><ul><li><code>public String format(Date date)</code>：<font color="red">将Date对象格式化为字符串。</font><br>无参构造<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SimpleDateFormat sdf1= <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>();</span><br><span class="line"><span class="type">Date</span> <span class="variable">d1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">0L</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> sdf1.format(d1);</span><br><span class="line">System.out.println(str1);<span class="comment">//默认格式：1970/1/1 08:00</span></span><br></pre></td></tr></table></figure>有参构造<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">SimpleDateFormat</span> <span class="variable">sdf2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy年MM月dd日 HH:mm:ss EE&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> sdf2.format(d1);</span><br><span class="line">System.out.println(str2);<span class="comment">//1970年01月01日 08:00:00 周四</span></span><br></pre></td></tr></table></figure></li><li><code>public Date parse(String source)</code>：<font color="red">将字符串解析为Date对象。</font><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;2000-11-11&quot;</span>;</span><br><span class="line">Date d1=sdf.parse(str);</span><br><span class="line">String  s1=sdf1.format(d1);</span><br><span class="line">System.out.println(s1);<span class="comment">//2000年11月11日</span></span><br><span class="line">System.out.println(d1.getTime());</span><br></pre></td></tr></table></figure></li></ul><h3 id="Calendar"><a href="#Calendar" class="headerlink" title="Calendar"></a>Calendar</h3><p>抽象类，所以不能new</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public static Calendar getInstance()</td><td>获取一个它的子类GregorianCalendar对象。  把当前时间的纪元，年月日等放入一个数组中</td></tr><tr><td>public int get(int field)</td><td>获取某个字段的值。field参数表示获取哪个字段的值，<br>可以使用Calender中定义的常量来表示：<br>Calendar.YEAR : 年<br>Calendar.MONTH ：月(下标0-11)<br>Calendar.DAY_OF_MONTH：月中的日期<br>Calendar.HOUR：小时<br>Calendar.MINUTE：分钟<br>Calendar.SECOND：秒<br>Calendar.DAY_OF_WEEK：星期(下标0表示周日)</td></tr><tr><td>public void set(int field,int value)</td><td>设置某个字段的值</td></tr><tr><td>public void add(int field,int amount)</td><td>为某个字段增加&#x2F;减少指定的值</td></tr></tbody></table><h3 id="JDK8新增时间相关类"><a href="#JDK8新增时间相关类" class="headerlink" title="JDK8新增时间相关类"></a>JDK8新增时间相关类</h3><table><thead><tr><th>JDK8时间类类名</th><th>作用</th></tr></thead><tbody><tr><td>ZoneId</td><td>时区</td></tr><tr><td>Instant</td><td>时间戳</td></tr><tr><td>ZoneDateTime</td><td>带时区的时间</td></tr><tr><td>DateTimeFormatter</td><td>用于时间的格式化和解析</td></tr><tr><td>LocalDate</td><td>年、月、日</td></tr><tr><td>LocalTime</td><td>时、分、秒</td></tr><tr><td>LocalDateTime</td><td>年、月、日、时、分、秒</td></tr><tr><td>Duration</td><td>时间间隔（秒，纳，秒）</td></tr><tr><td>Period</td><td>时间间隔（年，月，日）</td></tr><tr><td>ChronoUnit</td><td>时间间隔（所有单位）</td></tr></tbody></table><h2 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h2><p><strong>基本数据类型对应的对象</strong><br>JDK5以后对包装类新增了什么特性？<br>自动装箱（把基本数据类型自动变为其对应的包装类），自动拆箱</p><table><thead><tr><th>基本类型</th><th>对应的包装类（位于java.lang包中）</th></tr></thead><tbody><tr><td>byte</td><td>Byte</td></tr><tr><td>short</td><td>Short</td></tr><tr><td>int</td><td><strong>Integer</strong></td></tr><tr><td>long</td><td>Long</td></tr><tr><td>float</td><td>Float</td></tr><tr><td>double</td><td>Double</td></tr><tr><td>char</td><td><strong>Character</strong></td></tr><tr><td>boolean</td><td>Boolean</td></tr></tbody></table><h3 id="Integer"><a href="#Integer" class="headerlink" title="Integer"></a>Integer</h3><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public Integer(int   value)</td><td>根据 int 值创建 Integer 对象(过时)</td></tr><tr><td>public Integer(String s)</td><td>根据 String 值创建 Integer 对象(过时)</td></tr><tr><td>public static Integer valueOf(int i)</td><td>返回表示指定的 int 值的 Integer   实例</td></tr><tr><td>public static Integer valueOf(String s)</td><td>返回保存指定String值的 Integer 对象</td></tr><tr><td>static string tobinarystring(int i)</td><td>得到二进制</td></tr><tr><td>static string tooctalstring(int i)</td><td>得到八进制</td></tr><tr><td>static string toHexstring(int i)</td><td>得到十六进制</td></tr><tr><td>static int parseInt(string s)</td><td>将字符串类型的整数转成int类型的整数</td></tr></tbody></table><p>valueOf传的数字在[-128,127]范围中时，不会再重新new ，而是将已经准备好的数据从数组中取出来<br><img src="/2024/12/09/java/image%20copy%207.png" alt="alt text"><br>八种包装类中，除了character其他都有parseXXX的方法进行类型转换</p><h1 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h1><p><img src="/2024/12/09/java/image%20copy%208.png" alt="alt text"></p><h1 id="map的遍历"><a href="#map的遍历" class="headerlink" title="map的遍历"></a>map的遍历</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;A&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        map.put(<span class="string">&quot;B&quot;</span>, <span class="number">2</span>);</span><br><span class="line">        map.put(<span class="string">&quot;C&quot;</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用 keySet() 遍历</span></span><br><span class="line">        <span class="keyword">for</span> (String key : map.keySet()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Key: &quot;</span> + key + <span class="string">&quot;, Value: &quot;</span> + map.get(key));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Integer value : map.values()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Value: &quot;</span> + value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Iterator&lt;Map.Entry&lt;String, Integer&gt;&gt; iterator = map.entrySet().iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            Map.Entry&lt;String, Integer&gt; entry = iterator.next();</span><br><span class="line">            System.out.println(<span class="string">&quot;Key: &quot;</span> + entry.getKey() + <span class="string">&quot;, Value: &quot;</span> + entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">        Iterator&lt;String&gt; iterator1 = map.keySet().iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> iterator1.next();</span><br><span class="line">            System.out.println(<span class="string">&quot;Key: &quot;</span> + key + <span class="string">&quot;, Value: &quot;</span> + map.get(key));</span><br><span class="line">        &#125;</span><br><span class="line">        map.forEach((key, value) -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Key: &quot;</span> + key + <span class="string">&quot;, Value: &quot;</span> + value);</span><br><span class="line">        &#125;);</span><br><span class="line">           使用 entrySet() 遍历</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Integer&gt; entry : map.entrySet()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Key: &quot;</span> + entry.getKey() + <span class="string">&quot;, Value: &quot;</span> + entry.getValue());</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ES6</title>
      <link href="/2024/12/08/ES6/"/>
      <url>/2024/12/08/ES6/</url>
      
        <content type="html"><![CDATA[<h1 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h1><h2 id="throw"><a href="#throw" class="headerlink" title="throw"></a>throw</h2><p><code>throw new Error(&#39;程序出错啦！&#39;)</code><br>程序会被中断，且抛出错误信息</p><h2 id="try…catch…finally"><a href="#try…catch…finally" class="headerlink" title="try…catch…finally"></a>try…catch…finally</h2><p>用于捕获错误信息，将可能会出错的代码放到try中，</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">catch</span>(err)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">message</span>)</span><br><span class="line">  <span class="keyword">return</span> ;</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;不管try中的代码有没有出错我都会被执行&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与throw 不同的是，catch捕获到错误后并不会中断程序，所以我们可以手动加一个return；catch中的参数，有一个属性message，可以提供错误信息。</p><h1 id="作用域与作用域链"><a href="#作用域与作用域链" class="headerlink" title="作用域与作用域链"></a>作用域与作用域链</h1><p>作用域分为全局作用域(.js文件或在<code>&lt;script&gt;</code>标签中)，局部作用域分为函数作用域或块级作用域<br>作用域链：** 本质上是底层的 <em>变量查找机制</em> **,在函数被执行时，会优先查找当前作用域中查找变量，如果当前作用域查找不到，则会依次逐级查找父级作用域直到全局作用域</p><h1 id="垃圾回收机制"><a href="#垃圾回收机制" class="headerlink" title="垃圾回收机制"></a>垃圾回收机制</h1><p>什么是垃圾回收机制？<br>JS中内存的分配和回收都是自动完成的，内存在不使用的时候会被垃圾回收器自动回收<br>什么是内存泄漏？不再用到的内存，没有及时释放，就叫做内存泄漏<br>内存的生命周期是什么样的？</p><ol><li>存分配、内存使用、内存回收</li><li>全局变量一般不会回收； 一般情况下局部变量的值, 不用了, 会被自动<br>回收掉<br>堆栈空间分配区别：</li><li>栈（操作系统）: 由操作系统自动分配释放函数的参数值、局部变量等，基本数据类型放到栈里面。</li><li>堆（操作系统）: 一般由程序员分配释放，若程序员不释放，由垃圾回收机制回收。复杂数据类型放到堆里面。<br>两种常见的浏览器垃圾回收算法: 引用计数法 和 标记清除法</li></ol><h1 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h1><p>闭包&#x3D;内层函数+外层函数的变量<br>闭包的作用？</p><ol><li>封闭数据，实现数据私有，外部也可以访问函数内部的变量</li><li>闭包很有用，因为它允许将函数与其所操作的某些数据（环境）关联起来<br>闭包可能引起的问题？<br>内存泄漏<br>常见闭包形式:外部可以访问使用函数内部的变量<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">outer</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">let</span> a=<span class="number">100</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> fn</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//fun = fn </span></span><br><span class="line"><span class="keyword">const</span> fun = <span class="title function_">outer</span>()</span><br><span class="line"><span class="title function_">fun</span>()<span class="comment">//调用函数,调用fun 相当于调用fn</span></span><br></pre></td></tr></table></figure>封闭数据<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">let</span> count = <span class="number">1</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>)&#123;</span><br><span class="line">    count++</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`函数被调用<span class="subst">$&#123;count&#125;</span>次`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> fun </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> result = <span class="title function_">fn</span>()</span><br><span class="line"><span class="title function_">result</span>()<span class="comment">//2</span></span><br><span class="line"><span class="title function_">result</span>()<span class="comment">//3</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="事件循环"><a href="#事件循环" class="headerlink" title="事件循环"></a>事件循环</h1><ol><li>js是单线程，防止代码阻塞，我们把代码（任务）分为同步和异步(分为宏任务和微任务)</li><li>同步代码给js引擎执行，异步代码交给宿主环境</li><li>同步代码放入执行栈中，异步代码等待时机送入任务队列排队</li><li>执行栈执行完毕，会去任务队列看是否有异步任务，有就送到执行栈执行，反复循环查看执行，这个过程就是事件循环<br>宏任务：由宿主（浏览器，Node）发起的；<code>script</code>,网络请求(<code>Ajax/Fetch</code>),<code>setTimeout()/setInterval()</code><br>微任务：由js引擎发起的任务；<code>Promise</code>本身同步，<code>then/catch</code>回调函数是异步的；<code>process.nextTick(node)</code>;<code>Async/Await</code>;<code>Object.observe</code><br>微任务优先于宏任务执行<br><img src="/2024/12/08/ES6/image3.png"><br>输出：3 2 1（看的是.then的位置）<br><img src="/2024/12/08/ES6/image4.png"><br>setTimeout即使是0也是宏任务<br>输出：11，14 ，12，15，13<br><img src="/2024/12/08/ES6/image5.png"><br>输出：2 3 6 p2 p1 1 4 5<br><img src="/2024/12/08/ES6/image%20copy.png"><br><code>async</code>函数里面的都是同步的<br><code>await</code>后面的都是微任务<br><img src="/2024/12/08/ES6/image%20copy%203.png"><br>输出： 1 2 4 3</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 微任务</span></span><br><span class="line"><span class="comment"> * p1</span></span><br><span class="line"><span class="comment"> * p2</span></span><br><span class="line"><span class="comment"> * 宏任务</span></span><br><span class="line"><span class="comment"> * st1</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * script start</span></span><br><span class="line"><span class="comment"> * async1 start</span></span><br><span class="line"><span class="comment"> * async2</span></span><br><span class="line"><span class="comment"> * promise 1</span></span><br><span class="line"><span class="comment"> * script end</span></span><br><span class="line"><span class="comment"> * async1 end</span></span><br><span class="line"><span class="comment"> * promise 2</span></span><br><span class="line"><span class="comment"> * setTimeout</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">async1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;async1 start&#x27;</span>)</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">async2</span>();</span><br><span class="line">  <span class="comment">//p1</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;async1 end&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">async2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;async2&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;script start&quot;</span>)</span><br><span class="line"><span class="comment">//st1</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;setTimeout&quot;</span>)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="title function_">async1</span>()</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;promise 1&quot;</span>)</span><br><span class="line">  <span class="comment">//p2</span></span><br><span class="line">  <span class="title function_">resolve</span>()</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;promise 2&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;script end&quot;</span>)</span><br></pre></td></tr></table></figure><p>这里await相当于</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">async2</span>().<span class="title function_">then</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;async1 end&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h1><p>用哪个关键字声明变量会有变量提升？ var<br>变量提升是什么流程？</p><ol><li>先把var 变量提升到当前作用域于最前面</li><li>只提升变量声明， 不提升变量赋值</li><li>然后依次执行代码</li></ol><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="函数提升"><a href="#函数提升" class="headerlink" title="函数提升"></a>函数提升</h2><p>函数在声明之前即可被调用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">f</span>()</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">123</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不存在变量提升的情况：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">bar</span>()</span><br><span class="line"><span class="keyword">var</span> bar = <span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">123</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h2><ol><li><p>动态参数：arguments 是一个伪数组（不能使用数组的方法，只存在于函数中）<br>arguments 的作用是动态获取函数的实参（在不确定传过来的参数究竟有几个时，就不再写形参，直接使用arguments）可以通过for循环依次得到传递过来的实参</p></li><li><p>剩余参数<br>剩余参数主要的使用场景是？ 用于获取多余的实参<br>剩余参数和动态参数区别是什么？动态参数是伪数组；剩余参数是真数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">a,b,...other</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(other)<span class="comment">//注意不用写...了</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">f</span>(a,b,[c,d])</span><br></pre></td></tr></table></figure><p>打印结果就是c,d</p></li></ol><h3 id="展开运算符"><a href="#展开运算符" class="headerlink" title="展开运算符"></a>展开运算符</h3><p>使用场景：</p><ol><li>求数组最大值(因为数组没有直接求最大值的方法)<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr=[<span class="number">1</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">2</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">max</span>(...arr))</span><br></pre></td></tr></table></figure></li><li>合并数组 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a1=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">const</span> a2=[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="keyword">const</span> a3=[...a1,...a2]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a3)<span class="comment">//[1,2,3,4,5,6]</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><p><strong>箭头函数属于表达式函数，所以不存在函数提升</strong><br><strong>箭头函数没有arguments，但是有剩余参数…arr</strong><br><strong>箭头函数不会创建自己的this,它只会从自己的作用域链的上一层沿用this</strong></p><h1 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h1><h2 id="数组解构"><a href="#数组解构" class="headerlink" title="数组解构"></a>数组解构</h2><p>使用场景</p><ol><li>交换两个变量<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a=<span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> b=<span class="number">2</span>;<span class="comment">//注意这里一定要加;</span></span><br><span class="line">[b,a]=[a,b]<span class="comment">//这里相当于右边是一个数组，进行解构赋值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)<span class="comment">//2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b)<span class="comment">//1</span></span><br></pre></td></tr></table></figure></li><li>· <code>const [a,b]=[&#39;苹果&#39;]</code> b&#x3D;undefined<br>· <code>const [a,...arr]=[1,2,3,4]</code>  <code>arr=[2,3,4]</code><br>· 防止有undefined 可以设置默认值<br><code>const [a=&#39;手机&#39;,b=&#39;华为&#39;] = [&#39;小米&#39;]</code><br><code>console.log(a)//小米</code><br><code>console.log(b)//华为</code><br>· 按需导入，忽略某些值<br><code>const [a,,c] = [1,2,3]</code><br><code>console.log(a)//1</code><br><code>console.log(c)//3</code></li></ol><h2 id="js中必须加分号的情况"><a href="#js中必须加分号的情况" class="headerlink" title="js中必须加分号的情况"></a>js中必须加分号的情况</h2><ol><li>立即执行函数<code>(function f()&#123;&#125;)()</code></li><li>数组解构</li></ol><h2 id="对象解构"><a href="#对象解构" class="headerlink" title="对象解构"></a>对象解构</h2><ol><li>赋值运算符 &#x3D; 左侧的 {} 用于批量声明变量，右侧对象的属性值将被赋值给左侧的变量</li><li>对象属性的值将被赋值给与属性名相同的变量</li><li>注意解构的变量名不要和外面的变量名冲突否则报错</li><li>对象中找不到与变量名一致的属性时变量值为 undefined<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> pig = &#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&#x27;abc&#x27;</span>,</span><br><span class="line">  <span class="attr">family</span>:&#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="string">&#x27;12&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> &#123; name,<span class="attr">family</span>:&#123;a&#125; &#125; = pig</span><br></pre></td></tr></table></figure></li></ol><h1 id="创建对象的三种方式"><a href="#创建对象的三种方式" class="headerlink" title="创建对象的三种方式"></a>创建对象的三种方式</h1><ol><li>利用对象字面量创建对象<code>const o=&#123;name:&#39;wyh&#39;&#125;</code></li><li>利用new Object 创建对象 <code>const o=new Object(&#123;name:&#39;wyh&#39;&#125;)</code></li><li>利用构造函数创建对象<br>构造函数的两个约定：1.它们的命名以大写字母开头。2.它们只能由 “new” 操作符来执行。<br>说明：</li><li>使用 new 关键字调用函数的行为被称为实例化</li><li>实例化构造函数时没有参数时可以省略 ()</li><li>构造函数内部无需写return，返回值即为新创建的对象</li><li>构造函数内部的 return 返回的值无效，所以不要写return</li><li>new Object（） new Date（） 也是实例化构造函数</li></ol><p>什么是实例成员？实例对象的属性和方法即为实例成员<br>什么是静态成员？构造函数的属性和方法被称为静态成员</p><h1 id="内置构造函数"><a href="#内置构造函数" class="headerlink" title="内置构造函数"></a>内置构造函数</h1><h2 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h2><p>常用的静态方法（只有构造函数Object可以调用）</p><ol><li><code>Object.keys()</code>  获取所有属性名 <code>Object.values(o)</code>获取所有属性值</li><li><code>Object.assign()</code> 拷贝，添加属性<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span>  o =&#123; <span class="attr">uname</span>:<span class="string">&#x27;pink&#x27;</span>,<span class="attr">age</span>: <span class="number">18</span>&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">keys</span>(o))<span class="comment">//返回数组[&#x27;uname&#x27;,&#x27;age&#x27;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">values</span>(o))<span class="comment">//返回数组[&#x27;pink&#x27;,18]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//拷贝</span></span><br><span class="line"><span class="keyword">const</span> obj=&#123;&#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(obj,o)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj)<span class="comment">//&#123; uname:&#x27;pink&#x27;,age: 18&#125;</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(o,&#123;<span class="attr">gender</span>:<span class="string">&#x27;女&#x27;</span>&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj)<span class="comment">//&#123; uname:&#x27;pink&#x27;,age: 18,gender:&#x27;女&#x27;&#125;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="数组的方法"><a href="#数组的方法" class="headerlink" title="数组的方法"></a>数组的方法</h2><img src="/2024/12/08/ES6/image.png" width="200px" height="200px"><img src="/2024/12/08/ES6/image1.png" width="200px" height="200px"><ol><li>forEach()遍历数组  <strong>不会返回新数组</strong><br>数组.forEach(function(currentValue，index){}) </li><li>filter()过滤数组 <strong>返回筛选后的新数组</strong><br>被遍历数组.filter(function(currentValue,index){ return 筛选条件}) </li><li>map 迭代数组 <strong>返回处理之后的新数组</strong></li><li>reduce累计器 <strong>返回累计处理结果，常用于求和</strong><br><code>arr.reduce(function(上一次值，当前值)&#123;&#125;,初始值)</code><br><code>arr.reduce((上一次值，当前值)=&gt;&#123;&#125;,初始值)</code><br>如果是<strong>对象的属性</strong>进行累加的话，第二个参数不能省略<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> total = arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev,current</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> prev+a.<span class="property">num</span></span><br><span class="line">&#125;,<span class="number">0</span>)</span><br></pre></td></tr></table></figure></li><li>find() 方法返回数组中满足提供的测试函数的<strong>第一个元素的值</strong>。否则返回 undefined<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array1 = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;小米&#x27;</span>,</span><br><span class="line">    <span class="attr">price</span>:<span class="number">1999</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;华为&#x27;</span>,</span><br><span class="line">    <span class="attr">price</span>:<span class="number">2999</span></span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"><span class="keyword">const</span> found = array1.<span class="title function_">find</span>(<span class="function"><span class="params">element</span> =&gt;</span> element.<span class="property">name</span>===<span class="string">&#x27;小米&#x27;</span>);<span class="comment">//返回的是小米这个对象</span></span><br></pre></td></tr></table></figure></li><li>every() 方法测试一个数组内的所有元素是否都能通过指定函数的测试。它返回一个布尔值。</li><li>数组常见方法- 伪数组转换为真数组Array.from()<br>  <code>arguments</code>,<code>querySelectorAll</code>获得的都是伪数组</li><li>join<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> elements = [<span class="string">&#x27;Fire&#x27;</span>, <span class="string">&#x27;Air&#x27;</span>, <span class="string">&#x27;Water&#x27;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(elements.<span class="title function_">join</span>());</span><br><span class="line"><span class="comment">// Expected output: &quot;Fire,Air,Water&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(elements.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>));</span><br><span class="line"><span class="comment">// Expected output: &quot;FireAirWater&quot;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="string"><a href="#string" class="headerlink" title="string"></a>string</h2><p><img src="/2024/12/08/ES6/image2.png"></p><ol><li>split<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;The quick brown fox jumps over the lazy dog.&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> words = str.<span class="title function_">split</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(words[<span class="number">3</span>]);</span><br><span class="line"><span class="comment">// Expected output: &quot;fox&quot;</span></span><br><span class="line"><span class="keyword">const</span> chars = str.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(chars[<span class="number">8</span>]);</span><br><span class="line"><span class="comment">// Expected output: &quot;k&quot;</span></span><br><span class="line"><span class="keyword">const</span> strCopy = str.<span class="title function_">split</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(strCopy);</span><br><span class="line"><span class="comment">// Expected output: Array [&quot;The quick brown fox jumps over the lazy dog.&quot;]</span></span><br></pre></td></tr></table></figure></li><li>substring()方法返回该字符串从起始索引到结束索引（不包括）的部分,如果未提供结束索引，则返回到字符串末尾的部分。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;Mozilla&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">substring</span>(<span class="number">1</span>, <span class="number">3</span>));</span><br><span class="line"><span class="comment">// Expected output: &quot;oz&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">substring</span>(<span class="number">2</span>));</span><br><span class="line"><span class="comment">// Expected output: &quot;zilla&quot;</span></span><br></pre></td></tr></table></figure></li><li>startsWith() 方法用来判断当前字符串是否以另外一个给定的子字符串开头，并根据判断结果返回 true 或 false。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str1 = <span class="string">&#x27;SatSatturday night plans&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str1.<span class="title function_">startsWith</span>(<span class="string">&#x27;Sat&#x27;</span>));</span><br><span class="line"><span class="comment">// Expected output: true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str1.<span class="title function_">startsWith</span>(<span class="string">&#x27;Sat&#x27;</span>, <span class="number">3</span>));</span><br><span class="line"><span class="comment">// Expected output: true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>String 值的 includes() 方法执行区分大小写的搜索，以确定是否可以在一个字符串中找到另一个字符串，并根据情况返回 true 或 false。</li></ol><h2 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">financial</span>(<span class="params">x</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Number</span>.<span class="built_in">parseFloat</span>(x).<span class="title function_">toFixed</span>(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">financial</span>(<span class="number">123.456</span>));</span><br><span class="line"><span class="comment">// Expected output: &quot;123.46&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">financial</span>(<span class="number">0.004</span>));</span><br><span class="line"><span class="comment">// Expected output: &quot;0.00&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">financial</span>(<span class="string">&#x27;1.23e+5&#x27;</span>));</span><br><span class="line"><span class="comment">// Expected output: &quot;123000.00&quot;</span></span><br></pre></td></tr></table></figure><h1 id="直接赋值，深浅拷贝"><a href="#直接赋值，深浅拷贝" class="headerlink" title="直接赋值，深浅拷贝"></a>直接赋值，深浅拷贝</h1><p>赋值没有创建新对象，仅仅是拷贝了原对象的地址。</p><p>浅拷贝是创建一个新对象，这个对象仅对原对象的属性进行拷贝。<br>属性值是基本类型时，拷贝的是原数据，<strong>属性值</strong>是引用类型时，拷贝的是地址。因此，如果原对象的属性有引用类型数据，无论修改新对象还是原对象的引用类型数据，另一个都会随之改变。</p><p>深拷贝也是创建一个新对象，但不仅对原对象的属性进行拷贝，还在堆内存中开辟一个新的地址用来存储新对象，所以新对象和原对象没有关联，修改其中一个另一个不会变化。<br>首先浅拷贝和深拷贝只针对引用类型</p><h2 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h2><p>常见方法：</p><ol><li>拷贝对象：<code>Object.assgin()</code> &#x2F; 展开运算符 <code>&#123;...obj&#125;</code> 拷贝对象</li><li>拷贝数组：<code>Array.prototype.concat()</code> 或者 <code>[...arr]</code><blockquote><p>如果是简单数据类型拷贝值，引用数据类型拷贝的是地址 (简单理解： 如果是单层对象，没问题，如果有多层就有问题)</p></blockquote></li></ol><h2 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h2><p>场景：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">uname</span>: <span class="string">&#x27;pink&#x27;</span>,</span><br><span class="line">  <span class="attr">hobby</span>: [<span class="string">&#x27;乒乓球&#x27;</span>, <span class="string">&#x27;羽毛球&#x27;</span>],</span><br><span class="line">  <span class="attr">family</span>: &#123;</span><br><span class="line">    <span class="attr">baby</span>: <span class="string">&#x27;小baby&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>通过递归实现<strong>深拷贝</strong><br>想实现深拷贝用到函数递归，如果遇到普通类型，直接调用递归即可。如果遇到数组，判断出是数组类型后再次调用该递归函数即可。如果遇到对象，同理。但是一定要先数组，后对象(数组 <code>instanceof Object true</code>)。 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> o = &#123;&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">cloneDeep</span>(<span class="params">newobj, oldobj</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> k <span class="keyword">in</span> oldobj) &#123;</span><br><span class="line">    <span class="comment">//如果该属性是数组</span></span><br><span class="line">    <span class="keyword">if</span> (oldobj[k] <span class="keyword">instanceof</span> <span class="title class_">Array</span>) &#123;</span><br><span class="line">      newobj[k] = []</span><br><span class="line">      <span class="title function_">cloneDeep</span>(newobj[k], oldobj[k])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果该属性是对象</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (oldobj[k] <span class="keyword">instanceof</span> <span class="title class_">Object</span>) &#123;</span><br><span class="line">      newobj[k] = &#123;&#125;</span><br><span class="line">      <span class="title function_">cloneDeep</span>(newobj[k], oldobj[k])</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      newobj[k] = oldobj[k]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">cloneDeep</span>(o, obj)</span><br></pre></td></tr></table></figure></li><li>lodash&#x2F;cloneDeep<br><code> const o = _.cloneDeep(obj)</code></li><li>通过JSON.stringify()实现</li></ol><ul><li>原理：<code>JSON.stringify(obj)</code>将对象转化为字符串（基本数据类型，在栈中开辟空间），<code>JSON.parse()</code>又将字符串转化为对象（引用数据类型，在堆中开辟空间）此时是新开辟的空间，与上面的毫无关联。<br><code>const o = JSON.parse(JSON.stringify(obj))</code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o);<span class="comment">//older,看电视，因为控制台是异步更新的，并且可能会延迟显示对象的状态，</span></span><br><span class="line"><span class="comment">//如果想看立刻的状态，就应该console.log(JSON.parse(JSON.stringify(obj)));</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);<span class="comment">//小baby</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;---------------------------------------------------&#x27;</span>)</span><br><span class="line">o.<span class="property">family</span>.<span class="property">baby</span> = <span class="string">&#x27;older&#x27;</span></span><br><span class="line">o.<span class="property">hobby</span>[<span class="number">0</span>] = <span class="string">&#x27;看电视&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o);<span class="comment">//older</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);<span class="comment">//小baby</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="改变this指向"><a href="#改变this指向" class="headerlink" title="改变this指向"></a>改变this指向</h1><h2 id="call"><a href="#call" class="headerlink" title="call"></a><code>call</code></h2><p><code>call(this所指的对象[, 参数1, 参数2])</code>参数传给调用它的函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">B</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">counter</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)<span class="comment">//B</span></span><br><span class="line">  <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> result = counter.<span class="title function_">call</span>(B, <span class="number">5</span>, <span class="number">10</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result)<span class="comment">//15</span></span><br></pre></td></tr></table></figure><h2 id="apply"><a href="#apply" class="headerlink" title="apply"></a><code>apply</code></h2><p><code>apply(this所指的对象[,[参数1, 参数2]])</code>传递的是一个数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">M</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">counter</span>(<span class="params">x,y</span>) &#123;<span class="comment">//如果只有一个形参那么只能接收5</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)<span class="comment">//B</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(x)<span class="comment">//5</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(y)<span class="comment">//10</span></span><br><span class="line">  <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> result = counter.<span class="title function_">apply</span>(M, [<span class="number">5</span>, <span class="number">10</span>])</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result)<span class="comment">//15</span></span><br></pre></td></tr></table></figure><h3 id="求数组最大值的两个方法"><a href="#求数组最大值的两个方法" class="headerlink" title="求数组最大值的两个方法"></a>求数组最大值的两个方法</h3><p><code>let arr = [1, 2, 3]</code></p><ol><li>利用展开运算符<code>console.log(Math.max(...arr))//3</code></li><li><code>console.log(Math.max.apply(null, arr))//3 </code></li></ol><h2 id="bind"><a href="#bind" class="headerlink" title="bind"></a><code>bind</code></h2><p><code>_.bind(func, thisArg, [partials])</code><br>需求：有一个按钮，点击里面就禁用，2秒后开启</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>)</span><br><span class="line">btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">disabled</span> = <span class="literal">true</span></span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">disabled</span> = <span class="literal">false</span></span><br><span class="line">  &#125;.<span class="title function_">bind</span>(<span class="variable language_">this</span>), <span class="number">2000</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>注意，如果是</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">disabled</span> = <span class="literal">false</span></span><br><span class="line">  &#125;, <span class="number">2000</span>)</span><br></pre></td></tr></table></figure><p>这里的<code>this</code>指向的是<code>window</code>,所以对<code>button</code>不起作用<br>所以我们要使用<code>bind</code>，<code>bind</code>的参数为<code>this</code>代指<code>btn</code><br>还可以使用箭头函数效果一样</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>)</span><br><span class="line">btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">disabled</span> = <span class="literal">true</span></span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">disabled</span> = <span class="literal">false</span></span><br><span class="line">  &#125;, <span class="number">2000</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ul><li>相同点：都可以改变this的指向</li><li>不同点：</li></ul><ol><li><code>call</code>的参数形式和<code>apply</code>的参数形式（必须以数组的形式），但二者均可调用函数</li><li><code>apply</code>经常与数组联系，比如借助数学对象实现数组的最大值最小值</li><li><code>bind</code> 不调用函数，但是可以改变<code>this</code>的指向，比如改变定时器内部<code>this</code>的指向</li></ol><h1 id="防抖和节流-性能优化"><a href="#防抖和节流-性能优化" class="headerlink" title="防抖和节流(性能优化)"></a>防抖和节流(性能优化)</h1><h2 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h2><p>单位时间内，频繁的触发事件，只执行最后一次；（举例：王者回城，如果过程中被打断，需要再次触发，重新回城）<br>使用场景：<strong>搜索框搜索输入</strong>，手机号，邮箱验证输入监测</p><p>需要让鼠标移动时，500ms后再＋1</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>)</span><br><span class="line">  <span class="keyword">let</span> i = <span class="number">0</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">move</span>(<span class="params"></span>) &#123;</span><br><span class="line">    box.<span class="property">innerHTML</span> = i++</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>实现的两种方式<ul><li>利用<code>lodash</code>的<code>_.debounce(事件，时间)</code><br> <code> box.addEventListener(&#39;mousemove&#39;, _.debounce(move, 500))</code></li><li>手写（核心：利用定时器实现）<br> 思路：<ol><li>声明一个定时器变量</li><li>当鼠标每次滑动都先判断是否有定时器了，如果有定时器就先清除以前的定时器</li><li>如果没有定时器则开启定时器，记得存到变量里</li><li>在定时器里面调用要执行的函数 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">fn,t</span>)&#123;</span><br><span class="line">  <span class="keyword">let</span> timer</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(timer) <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="title function_">fn</span>()</span><br><span class="line">    &#125;,<span class="number">500</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">box.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>, <span class="title function_">debounce</span>(move, <span class="number">500</span>))</span><br></pre></td></tr></table></figure> <font color="red">注意</font><br> 这里需要<code>return</code>一个函数，否则，页面一加载出来 <code>debounce(move, 500)</code> 就会被执行，并且返回值是 <code>undefined</code> ,所以每次触发<code>mousemove</code> 时就会调用<code>undefined</code>，即什么也不调用。反之，如果我们<code>return</code>一个函数，那么相当于<code>box.addEventListener(&#39;mousemove&#39;, return的函数)</code>，就可以正常执行</li></ol></li></ul></li></ul><h2 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h2><p>单位时间内，频繁的触发事件，只执行一次（举例：王者放技能）<br>使用场景：鼠标移动<code>mousemove</code>，页面尺寸缩放<code>resize</code>，滚动条滚动<code>scroll</code>等</p><ul><li>实现的两种方式<ul><li>利用<code>lodash</code>的<code>_.throttle(事件，时间)</code><br> <code> box.addEventListener(&#39;mousemove&#39;, _.throttle(move, 500))</code></li><li>手写（核心：利用定时器实现）<br> 思路：<ol><li>声明一个定时器变量</li><li>当鼠标每次滑动都先判断是否有定时器了，如果有定时器就不重开定时器</li><li>如果没有定时器则开启定时器，记得存到变量里</li></ol><ul><li>定时器里面调用执行函数</li><li>定时器里面要清空定时器 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">fn, t</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> timer = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!timer) &#123;</span><br><span class="line">      timer = <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">fn</span>()</span><br><span class="line">        <span class="comment">//清空定时器</span></span><br><span class="line">        timer = <span class="literal">null</span></span><br><span class="line">      &#125;, t)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">box.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>, <span class="title function_">debounce</span>(move, <span class="number">500</span>))</span><br></pre></td></tr></table></figure> <font color="red">注意！</font> 在定时器中关闭定时器不能用<code>clearTimeout</code> 而是<code>timer = 0</code><br>节流的综合案例：打开一个视频仍保持上次观看的页面<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> video = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;video&#x27;</span>)</span><br><span class="line">video.<span class="property">ontimeupdate</span> = _.<span class="title function_">throttle</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// console.log(video.currentTime)//获取当前视频的时间</span></span><br><span class="line">  <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;currentTime&#x27;</span>, video.<span class="property">currentTime</span>)<span class="comment">//将当前视频时间本地存储</span></span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br><span class="line"><span class="comment">//打开页面触发事件，就从本地存储里面取出记录的时间，赋值给 video.currentTime</span></span><br><span class="line">video.<span class="property">onloadeddata</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  video.<span class="property">currentTime</span> = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;currentTime&#x27;</span>) || <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h1 id="动态键名"><a href="#动态键名" class="headerlink" title="动态键名"></a>动态键名</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> key = <span class="string">&#x27;name&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  [key]: <span class="string">&#x27;John&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">25</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj); <span class="comment">// &#123; name: &#x27;John&#x27;, age: 25 &#125;</span></span><br></pre></td></tr></table></figure><p>在动态注册组件的运用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">components</span>: &#123;</span><br><span class="line">  [<span class="title class_">Contextmenu</span>.<span class="property">name</span>]: <span class="title class_">Contextmenu</span>,</span><br><span class="line">  [<span class="title class_">ContextmenuItem</span>.<span class="property">name</span>]: <span class="title class_">ContextmenuItem</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h1><ul><li>每个函数都有<code>prototype</code>属性，称之为原型，因为这个属性的值是个对象，也称为原型对象</li><li>作用：1. 存放一些属性和方法 2. 在js中实现继承<br><img src="/2024/12/08/ES6/image%20copy%202.png"><br>原型链：对象都有<code>__proto__</code>属性，这个属性指向它的原型对象，原型对象也是对象，也有<code>__proto__</code>属性，指向原型对象的原型对象，这样一层层形成的链式结构称为原型链，最顶层找不到则返回null</li></ul><h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><p>ES6 class继承</p><ul><li><code>extends</code>继承父类,<code>super</code>调用父类的构造函数<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="comment">//公共属性</span></span><br><span class="line">  name</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span>=name</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">sayHi</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;父类的sayHi&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span>&#123;</span><br><span class="line">  age</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name,age</span>)&#123;</span><br><span class="line">    <span class="variable language_">super</span>(name)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span>=age</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">sayHello</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;子类的sayHello&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//同名方法，（原型链上）就近原则（调用子类的）</span></span><br><span class="line">  <span class="title function_">sayHi</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;子类的sayHi&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&#x27;zs&#x27;</span>,<span class="number">18</span>)</span><br><span class="line">s.<span class="title function_">sayHi</span>()<span class="comment">// console.log(&#x27;子类的sayHi&#x27;)</span></span><br></pre></td></tr></table></figure></li><li>访问静态属性和方法时，直接<code>类名.属性</code>,<code>类名.方法</code></li><li>类的外部无法直接访问私有属性&#x2F;方法</li><li>注意：在浏览器控制台中可以直接访问私有属性和方法（便于调试）<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">  <span class="comment">//静态属性</span></span><br><span class="line">  <span class="keyword">static</span> stInfo = <span class="string">&#x27;我是静态属性&#x27;</span></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">stMethod</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是静态方法&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//私有属性和方法</span></span><br><span class="line">  #prInfo = <span class="string">&#x27;我是私有属性&#x27;</span></span><br><span class="line">  #<span class="title function_">prMethod</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是私有方法&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">testPr</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.#prInfo)</span><br><span class="line">    <span class="variable language_">this</span>.#<span class="title function_">prMethod</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Test</span>.<span class="title function_">stMethod</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Test</span>.<span class="property">stInfo</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> t = <span class="keyword">new</span> <span class="title class_">Test</span>()</span><br><span class="line">t.<span class="title function_">testPr</span>()<span class="comment">//可以执行</span></span><br></pre></td></tr></table></figure><em><strong>ES5 寄生组合式继承</strong></em><br>通过构造函数继承属性，原型链的混合形式来继承方法</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数据库常用命令</title>
      <link href="/2024/12/05/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2024/12/05/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p><code>select name,age,score from student where age is not null</code><br>模糊查询:like<br>百分号（%）：表示任意长度的任意字符序列。<br>下划线（_）：表示任意单个字符。</p><p><code>ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED WITH mysql_native_password BY &#39;123456&#39;;</code><br>将root用户的认证方式改为mysql_native_password，并设置密码为123456,’localhost’表示可以从本地连接到数据库</p><h1 id="DDl"><a href="#DDl" class="headerlink" title="DDl"></a>DDl</h1><ul><li>添加字段 <code>ALTER TABLE 表名 ADD 类型（长度） [COMMENT] [约束]</code></li><li>修改数据类型<code>ALTER TABLE 表名 MODIFY 字段名 新数据类型</code></li><li>修改字段名和字段类型<code>ALTER TABLE 表名 CHANGE 新字段名 类型 [COMMENT] [约束]</code></li><li>删除字段<code>ALTER TABLE 表名 DROP 字段名</code></li><li>删除表 <code>DROP TABLE [IF EXISTS] 表名</code></li><li>删除指定表，并重新创建该表<code>TRUNCATE TABLE 表名</code></li><li>修改表名 <code>ALTER TABLE 表名 RENAME TO 新表名</code></li></ul><h1 id="DML"><a href="#DML" class="headerlink" title="DML"></a>DML</h1><ul><li>给指定字段添加数据 <code>INSERT INTO 表名(字段名1...) VALUES (值1...)</code></li><li>给全部字段添加数据<code>INSERT INTO 表名 VALUES (值1...)</code></li><li>删除数据<code>DELETE FROM 表名 [WHERE]</code></li></ul><h1 id="DQL"><a href="#DQL" class="headerlink" title="DQL"></a>DQL</h1><ul><li><code>SELECT FROM 表名 WHERE .. GROUP BY .. HAVING .. ORDER BY.. LIMIT..</code></li><li><code>DISTINCT</code><br><img src="/2024/12/05/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/image.png"><br>HAVING是分组之后对结果进行过滤<br>NULL不参与聚合运算<br>执行顺序：<code>WHERE &gt; 聚合函数 &gt; HAVING</code></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>将项目部署到服务器</title>
      <link href="/2024/11/27/%E5%B0%86%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2024/11/27/%E5%B0%86%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><ul><li><p>npm run build 将项目打包</p></li><li><p>利用electerm 连接到远程服务器</p></li><li><p>关于nginx的配置<br>先安装:在ssh命令行中输入<code>yum install nginx</code><br>进入nginx<code>cd nginx</code><br>进入nginx配置文件 <code>vim nginx.conf</code><br>修改用户权限:<code>user root;</code>否则会出现404<br>修改相关配置，下文有提及<br>esc + <code>:wq</code>保存退出<br>重启nginx服务：<code>systemctl restart nginx.service</code></p><p><code> nginx -s reload</code>重新加载配置文件<br><code>systemctl status nginx.service</code>查询状态<br><code>netstat -nap | grep 80</code>查看80端口被占用情况</p></li><li><p>一个服务器部署多个项目<br> 在nginx配置文件 <code>vim nginx.conf</code>中，有以下一行代码<br> <img src="/2024/11/27/%E5%B0%86%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/image%20copy%206.png" alt="alt text"><br> 说明在&#x2F;conf.d文件夹下，凡是以.conf结尾的文件都会被加载到配置文件中，因此，我们在&#x2F;conf.d文件夹下<code>touch filename</code> ,在该文件中写入以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  listen       8080;</span><br><span class="line">  server_name  47.98.123.91;    #此处使用测试域名。实际配置中使用您的服务器域名。</span><br><span class="line"></span><br><span class="line">  #charset koi8-r;</span><br><span class="line">  access_log  /var/log/nginx/b.access.log  main;</span><br><span class="line"></span><br><span class="line">  location / &#123;</span><br><span class="line">      root   /root/syt/dist;    #测试站点路径。即您的项目代码路径。</span><br><span class="line">      index  index.html index.htm;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  #error_page  404              /404.html;</span><br><span class="line"></span><br><span class="line">  error_page   500 502 503 504  /50x.html;</span><br><span class="line">  location = /50x.html &#123;</span><br><span class="line">      root   /usr/share/nginx/html;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意<font color="red">要在服务器的配置安全组中开放相应的端口</font><br><a href="https://help.aliyun.com/zh/dws/user-guide/register-a-domain-name-on-alibaba-cloud?spm=a2c4g.11186623.0.0.67fa19b5YtAxaP">https://help.aliyun.com/zh/dws/user-guide/register-a-domain-name-on-alibaba-cloud?spm=a2c4g.11186623.0.0.67fa19b5YtAxaP</a></p></li></ul><h1 id="了解到的相关知识"><a href="#了解到的相关知识" class="headerlink" title="了解到的相关知识"></a>了解到的相关知识</h1><ol><li><p>本机打开windos+R 打开<code>mstsc /admin</code>,点击确定，出现</p><img src="/2024/11/27/%E5%B0%86%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/image copy.png" height="150px" width="200px">将自己买的服务器的公网ip填进去，点击连接。就可以进入购买的服务器的windows操作系统。注意这里的用户名是Administer,试了root和administer都不对使用 mstsc /admin 连接到远程服务器属于远程桌面连接的高级用法，具体来说，是通过Windows自带的远程桌面协议(RDP)来实现的。这种方法允许用户通过图形用户界面（GUI）远程访问和控制远程服务器.</li><li><p>在该windows中安装nginx。<br>关于nginx的介绍：<a href="https://blog.csdn.net/b9x__/article/details/80400697">https://blog.csdn.net/b9x__/article/details/80400697</a><br><a href="http://nginx.org/en/download.html">http://nginx.org/en/download.html</a><br><img src="/2024/11/27/%E5%B0%86%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/image copy 2.png" height="150px" width="300px">下载后解压即可。<br>具体操作步骤：<br><a href="https://blog.csdn.net/qq_31762741/article/details/121796712">https://blog.csdn.net/qq_31762741/article/details/121796712</a><br>打开文件夹，cmd 中输入<code>start nginx</code>以启动Nginx<br>如果窗口闪了一下，在浏览器中打开<a href="http://localhost:80,则表示安装成功。">http://localhost:80,则表示安装成功。</a></p></li><li><p>修改nginx配置<br>只需要修改以下两项 </p><img src="/2024/11/27/%E5%B0%86%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/image.png" height="150px" width="200px">listen   22;表示你的端口号server_name 你买的服务器的Iproot html;这个指令指定了请求的根目录。在这个例子中，root html; 意味着当Nginx接收到请求时，它会在服务器的文件系统中查找一个名为 html 的目录，并将这个目录作为请求的根目录。需要注意的是，这里的 html 目录是相对于Nginx配置文件中定义的根路径（例如，通过 prefix 指令或编译时指定的默认路径）或者是绝对路径（如果 html 前有 /，表示从根文件系统开始）。index index.html index.htm;这个指令指定了当请求是一个目录而非文件时，Nginx 应该尝试返回哪个文件作为默认页面。在这个例子中，index index.html index.htm;指示Nginx，如果请求的是一个目录则Nginx会尝试依次查找该目录下的 index.htm 文件。综上所述，这段配置的目的是告诉Nginx，当接收到对根URL（/）的请求时，应该在服务器的 html 目录下查找资源，如果请求的是一个目录，则尝试返回该目录下的 index.html 文件。</li><li><p>修改完在此路径下的cmd 中输入<code>nginx -s reload</code></p></li><li><p>配置安全组<br>在你的服务器实例上配置一个以你的端口号为端口范围的入方向的配置规则。</p></li><li><p>在防火墙中设置一个入站规则<br><img src="/2024/11/27/%E5%B0%86%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/image copy 3.png" height="150px" width="200px">只需要改如图的配置即可。<br>最后，在任意ip输入你的服务器公网ip+端口号就可以访问！</p></li></ol><h2 id="在Windows电脑上启动并配置SSH服务"><a href="#在Windows电脑上启动并配置SSH服务" class="headerlink" title="在Windows电脑上启动并配置SSH服务"></a>在Windows电脑上启动并配置SSH服务</h2><p>SSH全称secure shell，安全外壳协议（安全的shell），是一个计算机网络协议（默认端口号为22）。通过ssh协议可以在客户端安全（提供身份认证、信息加密）的远程连接LInux服务器或其他设备。<br>SSH远程连接之后，就可以像操作本地的机器一样操作远程机器。当需要操控的机器不在本地时就可以使用ssh协议远程连接操控。<br>原文链接：<a href="https://blog.csdn.net/m0_51720581/article/details/131796669">https://blog.csdn.net/m0_51720581/article/details/131796669</a><br>1.按下Win+R键输入services.msc,在服务列表中查找“OpenSSH SSH Server”服务.如果没找到就说明没有安装。<br>安装SSH服务：<br>搜索可选功能-&gt;添加可选功能-&gt;找到OpenSSH服务器-&gt;添加。<br>安装后，重复1的操作，点击启动服务，并且右击-&gt;属性-&gt;启动类型-&gt;’自动’-&gt;确定。<br>2.设置防火墙规则以允许SSH连接。在“控制面板”中的“Windows Defender 防火墙”设置中，允许端口22（SSH默认端口）的入站连接。<br>远程桌面协议—RDP</p><h2 id="利用Workbench远程连接-用RDP连接windows实例-SSH连接linux实例"><a href="#利用Workbench远程连接-用RDP连接windows实例-SSH连接linux实例" class="headerlink" title="利用Workbench远程连接(用RDP连接windows实例,SSH连接linux实例)"></a>利用Workbench远程连接(用RDP连接windows实例,SSH连接linux实例)</h2> <img src="/2024/11/27/%E5%B0%86%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/image copy 4.png" height="150px" width="300px"><img src="/2024/11/27/%E5%B0%86%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/image4.png" height="150px" width="300px">就可以进入远程操作系统界面了<h2 id="用vscode-sftp"><a href="#用vscode-sftp" class="headerlink" title="用vscode+sftp"></a>用vscode+sftp</h2><p><a href="https://blog.csdn.net/huachizi/article/details/131984148">https://blog.csdn.net/huachizi/article/details/131984148</a></p><p>sftp是对于文件的协议，ssh是对于命令行的协议，http是对于请求的协议</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue3组件通信方式</title>
      <link href="/2024/11/21/%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1%E6%96%B9%E5%BC%8F/"/>
      <url>/2024/11/21/%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="组件通信方式"><a href="#组件通信方式" class="headerlink" title="组件通信方式"></a>组件通信方式</h1><h2 id="pinia-仓库"><a href="#pinia-仓库" class="headerlink" title="pinia 仓库"></a>pinia 仓库</h2><h3 id="使用场景：组件间的通信"><a href="#使用场景：组件间的通信" class="headerlink" title="使用场景：组件间的通信"></a>使用场景：组件间的通信</h3><h3 id="使用步骤："><a href="#使用步骤：" class="headerlink" title="使用步骤："></a>使用步骤：</h3><ul><li>安装并引入npm install pinia，import { createPinia } from ‘pinia’</li><li>创建大仓库const pinia &#x3D; createPinia()并暴露，在main.ts中引入并使用app.use(pinia)</li><li>在store&#x2F;modules下可以定义小仓库，import { defineStore } from ‘pinia’,let useUserStore &#x3D; defineStore(‘User’,函数或箭头函数)<ul><li>选择式API：state（箭头函数的形式）、getter 和 action</li><li>组合式API：记得return</li></ul></li></ul><h2 id="WeChat-public-number"><a href="#WeChat-public-number" class="headerlink" title="WeChat public number"></a>WeChat public number</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>关于Pinia</title>
      <link href="/2024/11/10/%E5%85%B3%E4%BA%8EPinia/"/>
      <url>/2024/11/10/%E5%85%B3%E4%BA%8EPinia/</url>
      
        <content type="html"><![CDATA[<p>参考：<a href="https://pinia.vuejs.org/zh/getting-started.html">https://pinia.vuejs.org/zh/getting-started.html</a></p><h1 id="Store-是什么？"><a href="#Store-是什么？" class="headerlink" title="Store 是什么？"></a>Store 是什么？</h1><p>Store (如 Pinia) 是一个保存状态和业务逻辑的实体，它并不与你的组件树绑定。换句话说，它承载着全局状态。它有点像一个永远存在的组件，每个组件都可以读取和写入它。它有三个概念，state、getter 和 action，我们可以假设这些概念相当于组件中的 data、 computed 和 methods。</p><h1 id="应该在什么时候使用-Store"><a href="#应该在什么时候使用-Store" class="headerlink" title="应该在什么时候使用 Store?"></a>应该在什么时候使用 Store?</h1><p>一个 Store 应该包含可以在整个应用中访问的数据。这包括在许多地方使用的数据，例如显示在导航栏中的用户信息，以及需要通过页面保存的数据，例如一个非常复杂的多步骤表单。</p><p>另一方面，你应该避免在 Store 中引入那些原本可以在组件中保存的本地数据，例如，一个元素在页面中的可见性。</p><h1 id="基本使用方法"><a href="#基本使用方法" class="headerlink" title="基本使用方法"></a>基本使用方法</h1><p>首先<code>npm install pinia</code><br>然后在入口文件中引入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import &#123; createPinia &#125; from &#x27;pinia&#x27;</span><br><span class="line">const pinia = createPinia()</span><br><span class="line">const app = createApp(App)</span><br><span class="line">app.use(pinia)</span><br><span class="line">app.mount(&#x27;#app&#x27;)</span><br></pre></td></tr></table></figure><p>以硅谷甄选为例，我们把store放入src&#x2F;store中（大仓库），而store下的modules可以放许多小仓库<br>一个小仓库：在仓库中的<strong>this</strong>就指创建的仓库对象</p><h2 id="选择式API的写法"><a href="#选择式API的写法" class="headerlink" title="选择式API的写法"></a>选择式API的写法</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">//创建用户相关的小仓库</span><br><span class="line">import &#123; defineStore &#125; from &#x27;pinia&#x27;</span><br><span class="line">import &#123; reqLogin &#125; from &#x27;../../api/user&#x27;</span><br><span class="line">import type &#123; loginForm &#125; from &#x27;../../api/user/type&#x27;</span><br><span class="line">//定义用户小仓库</span><br><span class="line">let useUserStore = defineStore(&#x27;User&#x27;, &#123;</span><br><span class="line">  //小仓库，存储数据的地方</span><br><span class="line">  state() =&gt; &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      data: 111,</span><br><span class="line">      arr:[1,2,3,4,5]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  //异步|逻辑的地方</span><br><span class="line">  actions: &#123;</span><br><span class="line">    update()&#123;</span><br><span class="line">      this.data++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  getters: &#123;//对数据进行加工,也可以通过state.属性的形式访问数据</span><br><span class="line">    total(state)&#123;</span><br><span class="line">      let result = this.arr.reduce((prev,next)=&gt;&#123;</span><br><span class="line">        return prev + next</span><br><span class="line">      &#125;,0)</span><br><span class="line">      return result;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">//对外暴露获取小仓库的方法</span><br><span class="line">export default useUserStore</span><br></pre></td></tr></table></figure><h2 id="组合式API的写法"><a href="#组合式API的写法" class="headerlink" title="组合式API的写法"></a>组合式API的写法</h2><p><strong>箭头函数务必要返回一个对象</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import &#123; defineStore &#125; from &#x27;pinia&#x27;</span><br><span class="line">//定义用户小仓库</span><br><span class="line">let useUserStore = defineStore(&#x27;User&#x27;, ()=&gt;&#123;</span><br><span class="line">  let arr=ref([&#123;id:1,title:&#x27;chifan&#x27;&#125;,&#123;id:2,title:&#x27;chifan&#x27;&#125;])</span><br><span class="line">  return &#123;</span><br><span class="line">    arr</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="在组件中获取数据的方法"><a href="#在组件中获取数据的方法" class="headerlink" title="在组件中获取数据的方法"></a>在组件中获取数据的方法</h1><h2 id="在组件中批量修改仓库中的数据"><a href="#在组件中批量修改仓库中的数据" class="headerlink" title="在组件中批量修改仓库中的数据:"></a>在组件中批量修改仓库中的数据:</h2><p>仓库名.$patch({<br>  属性名：新的属性值<br>})</p><h2 id="storeToRefs与ToRefs"><a href="#storeToRefs与ToRefs" class="headerlink" title="storeToRefs与ToRefs"></a>storeToRefs与ToRefs</h2><p>我们不想以仓库名.属性名的形式访问，想把仓库名省略掉，在解构赋值时，应该用到storeToRefs以保证它的响应式，storeToRefs只会将数据加上ref,而ToRefs还会将仓库中对应的方法也加上ref(没必要)，所以我们采用前者<code>const &#123;a,b,c&#125; = storeToRefs(仓库名)</code></p><h2 id="subscribe的使用"><a href="#subscribe的使用" class="headerlink" title="$subscribe的使用"></a>$subscribe的使用</h2><p>当仓库中的数据发生变化时，被调用<br>其中<br><code> localStorage.setItem(&quot;TOKEN&quot;, result.data.token)</code>setItem 是 localStorage 对象的一个方法，用于将数据保存到本地存储中。它接受两个参数：一个键（key）和一个值（value）。键和值都应该是字符串。如果值不是字符串，它会被自动转换成字符串。<br><code>let result = await reqLogin(data)</code>result接收的是reqLogin函数的返回值<br><code>reqLogin = (data: loginForm) =&gt; requests.post&lt;any, loginResponseData&gt;(API.LOGIN_URL, data)</code>,<code>loginResponseData</code>类型包括code: number,data:dataType其中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">interface dataType &#123;</span><br><span class="line">  token: string</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以下面是result.data.token<br>async函数会返回一个promise表示状态，而该状态取决于async函数的返回值<br>Promise 对象：<br>Promise 是 JavaScript 中用于异步编程的一个对象，它代表了一个可能现在还不可用，但将来某个时刻会变得可用的值。<br>Promise 有三种状态：pending（进行中）、fulfilled（已成功）和 rejected（已失败）。<br>Promise.reject 方法：<br>Promise.reject 是 Promise 构造函数的一个静态方法，用于返回一个状态为 rejected 的新 Promise 实例。<br>它接受一个参数，这个参数通常是一个错误对象或错误信息的字符串，表示 Promise 被拒绝的原因。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>guigu2</title>
      <link href="/2024/11/10/guigu2/"/>
      <url>/2024/11/10/guigu2/</url>
      
        <content type="html"><![CDATA[<h2 id="login组件的静态页面"><a href="#login组件的静态页面" class="headerlink" title="login组件的静态页面"></a>login组件的静态页面</h2><h3 id="需要掌握的element插件的使用"><a href="#需要掌握的element插件的使用" class="headerlink" title="需要掌握的element插件的使用"></a>需要掌握的element插件的使用</h3><p><a href="https://element-plus.org/zh-CN/component/input.html">https://element-plus.org/zh-CN/component/input.html</a><br>如果是组件的话需要引入，并且要动态绑定，例如：<br><code>&lt;el-input type=&quot;password&quot; :show-password=true  :prefix-icon=&quot;Unlock&quot; v-model=&quot;loginForm.password&quot;&gt;&lt;/el-input&gt;</code></p><h2 id="try…catch"><a href="#try…catch" class="headerlink" title="try…catch"></a>try…catch</h2><h3 id="try-块"><a href="#try-块" class="headerlink" title="try 块"></a>try 块</h3><p>try 块包含了可能会产生错误的代码。当 try 块中的代码执行时，如果抛出了错误，并且这个错误没有被 try 块内部的任何代码捕获，那么程序的控制流就会跳转到与 try 块相关联的 catch 块（如果有的话）。</p><h3 id="catch-块"><a href="#catch-块" class="headerlink" title="catch 块"></a>catch 块</h3><p>catch 块紧跟在 try 块之后，并且只会在 try 块中的代码抛出一个错误时执行。catch 块通常包含用于处理错误的代码，比如记录错误信息、清理资源、向用户显示错误消息等。<br>在 catch 块中，你可以访问一个特殊的变量（通常命名为 error 或 e），它包含了错误的详细信息。这个变量是 try 块中抛出的错误对象的一个实例。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">try&#123;</span><br><span class="line">  await useStore.userLogin(loginForm)</span><br><span class="line">  //编程式导航 </span><br><span class="line">  $router.push(&#x27;/&#x27;)</span><br><span class="line">  ElNotification(&#123;</span><br><span class="line">    type: &#x27;success&#x27;,</span><br><span class="line">    message:&#x27;登录成功&#x27;</span><br><span class="line">  &#125;)</span><br><span class="line">  IsSuccess.value=false</span><br><span class="line">&#125;catch(error)&#123;</span><br><span class="line">  //登陆失败</span><br><span class="line">  IsSuccess.value=false</span><br><span class="line">  ElNotification(&#123;</span><br><span class="line">    type: &#x27;error&#x27;,</span><br><span class="line">    message: &#x27;登录失败&#x27;,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中<code>useStore.userLogin(loginForm)</code>会返回正确或错误信息，如果返回的是正确的，那么就把try中的代码执行完；反之，就执行catch块中的；ElNotification是el组件库；<br>.then(result &#x3D;&gt; { … }) 方法在 Promise 成功解决时被调用，result 是 userLogin 函数解决时返回的值。<br>.catch(error &#x3D;&gt; { … }) 方法在 Promise 被拒绝时被调用，error 是拒绝的原因。<br>转化成.then的形式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">const login = () =&gt; &#123;</span><br><span class="line">  // 开始加载，假设 IsSuccess 是一个响应式引用</span><br><span class="line">  IsSuccess.value = true;</span><br><span class="line">  // 调用仓库的登录请求，并处理 Promise</span><br><span class="line">  useStore.userLogin(loginForm)</span><br><span class="line">    .then(result =&gt; &#123;</span><br><span class="line">      // 请求成功后的操作</span><br><span class="line">      // 编程式导航到首页</span><br><span class="line">      $router.push(&#x27;/&#x27;);</span><br><span class="line">      // 显示登录成功的通知</span><br><span class="line">      ElNotification(&#123;</span><br><span class="line">        type: &#x27;success&#x27;,</span><br><span class="line">        message: &#x27;登录成功&#x27;</span><br><span class="line">      &#125;);</span><br><span class="line">      IsSuccess.value = false;</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(error =&gt; &#123;</span><br><span class="line">      // 请求失败后的操作</span><br><span class="line">      IsSuccess.value = false;</span><br><span class="line">      // 显示登录失败的通知</span><br><span class="line">      ElNotification(&#123;</span><br><span class="line">        type: &#x27;error&#x27;,</span><br><span class="line">        message: &#x27;登录失败&#x27; </span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="菜单栏的封装"><a href="#菜单栏的封装" class="headerlink" title="菜单栏的封装"></a>菜单栏的封装</h2><p>2024-11-11;今天主要完成了这个部分。<br>大体思路是：菜单栏是一些路由的“集合”，我们期望可以通过每一个选项（路由）获得相应的组件。我们先对菜单组件进行封装，因为不同的身份登录，会展示不同的选项，考虑到复用性。在菜单组件中，我们又期望可以路由信息，从路由信息的角度命名每个选项，这样当我们选择时，右侧展示区域就可以轻易的展示出对应的信息。那么如何获得路由信息呢？1.路由信息已经对外暴露，我们只需要引入（pass）2.将路由信息导入我们的user仓库中，这样全局都可以查询路由信息，这时遇到了问题：关于export 和export default以及路由信息的类型定义问题(引入RouteRecordRaw)。然后，我们可以在父组件中引入仓库，再通过prop的方式传递给子组件。可是<strong>为什么不能直接在菜单组件中引入仓库呢？</strong>菜单组件拿到数据以后，可以将数据分为三类：1.没有二级路由的2.有一个二级路由的3.有两个及以上二级路由的。我们根据这三类，划分为两类，前两种直接将路由信息展示即可，后面一种需要折叠菜单，并且用到了<strong>递归思想</strong>，将二级路由再传递给当前组件，组件的递归需要再命名（在本组件中）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">export default&#123;</span><br><span class="line">  name: &#x27;Menu&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>然后呈现的应该是路由中meta属性中自定义的名字。这里就解释了上文<strong>为什么不能直接在菜单组件中引入仓库</strong>的问题，如果我们直接在子组件中引入的话，就无法实现递归，没有办法将当前的数据传递给自己。最后就是根据需求在meta中再定义一个hidden属性来就决定某个选项是否展示。<br>以下是一些总结：首先，菜单栏这部分主要用到el组件库的<code>&lt;el-scrollbar class=&quot;scrollbar&quot;&gt;</code>滑动，<code>&lt;el-menu background-color=&quot;#001529&quot; text-color=&quot;white&quot;&gt;</code>菜单，嵌套的元素是<code>&lt;el-menu-ite&gt;</code>,可以折叠的菜单<code>&lt;el-sub-menu&gt;</code>,组件库中用到的是这几项。一定要注意：<code>&lt;el-menu-ite&gt;</code>,<code>&lt;el-sub-menu&gt;</code>都在<code>&lt;el-menu&gt;</code>里面，否则会报错。<br>更为具体的用法为：<br>父组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-scrollbar class=&quot;scrollbar&quot;&gt;</span><br><span class="line">&lt;!-- 菜单组件 --&gt;</span><br><span class="line">  &lt;el-menu background-color=&quot;#001529&quot; text-color=&quot;white&quot;&gt;</span><br><span class="line">    &lt;Menu :menuList=&quot;userStore.menuRoutes&quot;&gt;&lt;/Menu&gt;</span><br><span class="line">  &lt;/el-menu&gt;</span><br><span class="line">&lt;/el-scrollbar&gt;  </span><br></pre></td></tr></table></figure><p>子组件：(这里只举了一个子组件的用法)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 没有子路由 --&gt;（外面有一个对父组件传递过来的数据的遍历）</span><br><span class="line">&lt;template v-if=&quot;!item.children&quot;&gt;</span><br><span class="line">  &lt;el-menu-item :index=&quot;item.path&quot; v-if=&quot;item.meta.hidden&quot;&gt;</span><br><span class="line">  &lt;template #title&gt;//插槽，可以自定义标题的内容</span><br><span class="line">    &lt;span&gt;biao&amp;nbsp;&lt;/span&gt;</span><br><span class="line">    &lt;span&gt;&#123;&#123;item.meta.title&#125;&#125;&lt;/span&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h2 id="在Vue-Router的路由视图中实现带有过渡效果的组件渲染"><a href="#在Vue-Router的路由视图中实现带有过渡效果的组件渲染" class="headerlink" title="在Vue Router的路由视图中实现带有过渡效果的组件渲染"></a>在Vue Router的路由视图中实现带有过渡效果的组件渲染</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-view v-slot=&quot;&#123; Component &#125;&quot;&gt;</span><br><span class="line">  &lt;transition name=&quot;fade&quot; mode=&quot;out-in&quot;&gt;</span><br><span class="line">    &lt;component :is=&quot;Component&quot; v-if=&quot;flag&quot;&gt;&lt;/component&gt;</span><br><span class="line">  &lt;/transition&gt;</span><br><span class="line">&lt;/router-view&gt;</span><br></pre></td></tr></table></figure><p><code>&lt;component :is=&quot;Component&quot; v-if=&quot;flag&quot;&gt;&lt;/component&gt;</code>:<code>&lt;component&gt;</code>是Vue的一个动态组件，它的:is属性用于绑定一个组件，这个组件可以是已注册的组件，或者是一个组件的选项对象。在这里，:is&#x3D;”Component”意味着<code>&lt;component&gt;</code>将动态渲染由<code>&lt;router-view&gt;</code>插槽提供的Component.<br>v-slot&#x3D;”{ Component }”:<br>这里使用了Vue的插槽（slot）和作用域插槽（scoped slot）的概念。<code>&lt;router-view&gt;</code>的v-slot允许你访问到路由组件本身，而不是直接渲染它。这里的{ Component }是一个对象解构，它从<code>&lt;router-view&gt;</code>的作用域插槽中获取了一个名为Component的属性，这个属性代表了当前应该被渲染的路由组件。</p><h2 id="menu的collapse属性，面包屑，全屏模式"><a href="#menu的collapse属性，面包屑，全屏模式" class="headerlink" title="menu的collapse属性，面包屑，全屏模式"></a>menu的collapse属性，面包屑，全屏模式</h2><p><a href="https://element-plus.org/zh-CN/component/menu.html#menu-%E8%8F%9C%E5%8D%95">https://element-plus.org/zh-CN/component/menu.html#menu-%E8%8F%9C%E5%8D%95</a><br>在 Vue Router 中，$route.matched 是一个数组，它包含了当前路由匹配到的所有嵌套路径片段的路由记录。这些路由记录是 routes 配置数组中的对象副本（包括在 children 数组中的路由记录）。<br>具体来说，当你访问一个 URL 时，Vue Router 会根据配置的路由规则进行匹配，找到与当前 URL 最匹配的路由记录，并将其存储在 $route 对象中。同时，$route.matched 会包含从根路由开始到当前路由的所有匹配到的路由记录，这些记录按照匹配顺序排列。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">const IsFullScreen=()=&gt;&#123;</span><br><span class="line">  let full = document.fullscreenElement</span><br><span class="line">  //如果不是全屏</span><br><span class="line">  if(full)&#123;</span><br><span class="line">    document.exitFullscreen()</span><br><span class="line">  &#125;</span><br><span class="line">  else &#123;</span><br><span class="line">    document.documentElement.requestFullscreen()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>菜单折叠遇到的问题：图标的抖动，右边组件的抖动；解决办法：摒弃flex布局。<br>2024-11-13</p><h2 id="获取用户信息"><a href="#获取用户信息" class="headerlink" title="获取用户信息"></a>获取用户信息</h2><p>2024-11-13<br>登录成功后，服务器返回用户的唯一标识(Token)。然后在请求拦截器中通过请求头将Token发送到服务器端。页面挂载完毕后，向服务器发送请求获取用户信息，想要获取用户信息，就需要引入&#x2F;api&#x2F;user中的reqUserInfo的获取用户信息接口方法，由于用户信息会被多个组件用到，所以我们将获取到的信息存到仓库中，在仓库中如果请求成功了我们再存入数据，否则返回错误信息。这样其他任何组件都可以使用了。<br>遇到的困难就是用reqUserInfo接收所需要的用户信息时，数据类型不正确，导致无法正确引用。解决方案：把返回类型设置为any</p><h2 id="路由鉴权"><a href="#路由鉴权" class="headerlink" title="路由鉴权"></a>路由鉴权</h2><p>2024-11-14<br>在permission.ts文件中操作<br>当用户登陆成功后，切换路由时，要进行判断是否可以跳转路由。因此我们引入路由守卫（前置，后置）进行条件判断。（每次路由跳转前都会自动进行条件判断）<br>今天遇到的问题：用户信息正确但是登录失败，在用户没有登录时，TOKEN就已经存在<br>为什么，从主页退出登陆后再登录就可以，直接从login页面登录就不行<br>为什么程序一运行进入的是主页而不是登录页面？在哪规定的？答：在路由的定义里，我们把&#x2F;重定向到login 就会变成程序一运行就到登录页面，而&#x2F;重定向到Home就会直接到主页。<br>取消进度条右侧加载的小圈<code>Nprogress.configure(&#123; showSpinner: false &#125;);</code></p><p>由于token 会有过期的可能，（实例：淘宝登录，会隔一段时间让你重新登录账号），当每次切换路由时，我们利用路由守卫发送请求请求到服务端，获取用户信息。也就是只是改变了向服务器发请求获取用户信息的时机。以前是在页面挂载后，这种情况就忽视了token 过期的可能。<br>但是还有问题，如果手动修改了本地存储的值，那么切换路由时并不会返回到登陆页面，只有刷新时才会怎么解决？？？？？？？<br><code>[env.VITE_APP_BASE_API]</code>: 这种写法被称为计算属性名<br>VITE_APP_BASE_API&#x3D;myApiEndpoint在你的配置对象中，<code>[env.VITE_APP_BASE_API]</code>: 实际上会被解析为 “myApiEndpoint”这种写法的好处是，你可以通过修改环境变量来改变配置，而不需要直接修改代码。</p><h2 id="品牌管理模块–静态页面搭建和数据展示"><a href="#品牌管理模块–静态页面搭建和数据展示" class="headerlink" title="品牌管理模块–静态页面搭建和数据展示"></a>品牌管理模块–静态页面搭建和数据展示</h2><p>2024-11-15<br>首先今天遇到了一个关于路由方面问题，以前没有搞明白。就是如何在某个页面下的某一部分展示另一个二级路由组件。其实很简单：只需要在父组件中要被展示的地方放入<code>&lt;router-view&gt;</code>，这里就是展示你想要的东西（下面我们将这个组件称为展示组件）。接下来就是路由的配置！！！我们想让一个二级路由的组件展示在某个页面的某部分，需要将其以及路由的路径改为展示组件的路径，这样访问二级路由时，会首先访问展示组件的页面，然后检测到展示组件有<code>&lt;router-view&gt;</code>展示路由的地方，我们配置二级路由的路径时，写的就是一级路由下的。也就是说，虽然一级路由呈现的是layout组件，但它的路径仍然是&#x2F;src&#x2F;一级，二级路由的路径就是&#x2F;src&#x2F;一级&#x2F;二级。RouterView 组件可以使 Vue Router 知道你想要在哪里渲染当前 URL 路径对应的路由组件。一个路由（父路由）可以包含一个或多个嵌套的子路由。每个子路由都对应一个视图组件，这些子视图组件会被渲染到父视图组件的<code>&lt;router-view&gt;</code>。</p><h3 id="静态页面搭建主要用到以下几个el组件"><a href="#静态页面搭建主要用到以下几个el组件" class="headerlink" title="静态页面搭建主要用到以下几个el组件"></a>静态页面搭建主要用到以下几个el组件</h3><h4 id="pagination分页器"><a href="#pagination分页器" class="headerlink" title="pagination分页器"></a>pagination分页器</h4><p><a href="https://element-plus.org/zh-CN/component/pagination.html#pagination-%E5%88%86%E9%A1%B5">https://element-plus.org/zh-CN/component/pagination.html#pagination-%E5%88%86%E9%A1%B5</a><br>v-model:current-page:设置分页器当前页码<br>v-model:page-size:设置每一个展示数据条数<br>page-sizes:用于设置下拉菜单数据<br>background:设置分页器按钮的背景颜色<br>layout:可以设置分页器六个子组件布局调整</p><h4 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h4><p><a href="https://element-plus.org/zh-CN/component/table.html#table-%E8%A1%A8%E6%A0%BC">https://element-plus.org/zh-CN/component/table.html#table-%E8%A1%A8%E6%A0%BC</a><br>表格组件：用于展示已有得平台数据<br>table:—border:可以设置表格纵向是否有边框<br>table-column:—label:某一个列表 —width:设置这列宽度 —align:设置这一列对齐方式</p><h4 id="card卡片"><a href="#card卡片" class="headerlink" title="card卡片"></a>card卡片</h4><p><a href="https://element-plus.org/zh-CN/component/card.html#card-%E5%8D%A1%E7%89%87">https://element-plus.org/zh-CN/component/card.html#card-%E5%8D%A1%E7%89%87</a></p><h3 id="数据展示"><a href="#数据展示" class="headerlink" title="数据展示"></a>数据展示</h3><p>大致思路：我们拿到接口后，需要在&#x2F;src&#x2F;api中封装相关请求配置。首先在index.ts文件中枚举品牌管理的接口地址，然后封装获取已有品牌的接口方法；添加与修改已有品牌接口方法；删除某一个已有品牌的数据的方法.在type.ts文件中定义相关数据类型。接着在相关组件中就可以引入该文件后，使用这些方法发送请求，获得商品信息后渲染到组件中。<br>遇到的问题：<br>1.代理跨域<br>用脚手架写的项目：在config.js中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    proxy: &#123;</span><br><span class="line">      &#x27;/api&#x27;: &#123;</span><br><span class="line">        target: &#x27;http://your-api-server.com&#x27;, // 目标服务器地址</span><br><span class="line">        changeOrigin: true, // 是否改变源地址</span><br><span class="line">        pathRewrite: &#123; &#x27;^/api&#x27;: &#x27;&#x27; &#125; // 路径重写规则</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在这个配置中，所有以&#x2F;api开头的请求都会被代理到<a href="http://your-api-server.com上,并且会去掉/api%E5%89%8D%E7%BC%80%E3%80%82">http://your-api-server.com上，并且会去掉/api前缀。</a><br>配置好代理后，前端代码就可以像访问同域资源一样访问跨域资源了。<br>使用Axios、Fetch API等发起请求时，只需将URL设置为代理规则中定义的路径（如&#x2F;api&#x2F;xxx）。<br>用vite：在config.ts中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">proxy: &#123;</span><br><span class="line">  &quot;/api/admin/acl&quot;: &#123; // 更新代理规则以匹配新的路径</span><br><span class="line">    target: &quot;http://sph-api.atguigu.cn&quot;, // 目标后端服务</span><br><span class="line">    changeOrigin: true,</span><br><span class="line">    rewrite: (path) =&gt; path.replace(/^\/api/, &#x27;&#x27;),</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;/api&quot;: &#123;</span><br><span class="line">    //获取数据的服务器地址设置</span><br><span class="line">    target: &quot;http://39.98.123.211:8510&quot;,</span><br><span class="line">    //需要代理跨域</span><br><span class="line">    changeOrigin: true,</span><br><span class="line">    //路径重写</span><br><span class="line">    rewrite: (path) =&gt; path.replace(/^\/api/, &#x27;&#x27;),</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解析：<br>第一个代理规则：<br>路径匹配：&#x2F;api&#x2F;admin&#x2F;acl<br>目标服务器：<a href="http://sph-api.atguigu.cn/">http://sph-api.atguigu.cn</a><br>changeOrigin: true：表示会改变请求的源地址（即Host头），这对于虚拟主机场景是必需的。<br>rewrite函数：将请求路径中的&#x2F;api前缀替换为空字符串（实际上，由于路径是&#x2F;api&#x2F;admin&#x2F;acl，它会匹配并替换开头的&#x2F;api&#x2F;部分，但在这个特定例子中，由于路径已经包含更具体的&#x2F;admin&#x2F;acl后缀，所以替换后的路径将是&#x2F;admin&#x2F;acl）。不过，这里的rewrite函数可以更精确地写为path.replace(&#x2F;^/api/admin/acl&#x2F;, ‘&#x2F;admin&#x2F;acl’)（但这样做是多余的，因为当路径完全匹配时，替换为空字符串也能达到相同效果，只要后端服务期望的路径是&#x2F;admin&#x2F;acl）。<br>第二个代理规则：<br>路径匹配：&#x2F;api（这是一个更通用的匹配模式，会匹配所有以&#x2F;api开头的路径）<br>目标服务器：<a href="http://39.98.123.211:8510/">http://39.98.123.211:8510</a><br>changeOrigin: true：同样表示会改变请求的源地址。<br>rewrite函数：将请求路径中的&#x2F;api前缀替换为空字符串。这意味着，如果请求的路径是&#x2F;api&#x2F;some&#x2F;endpoint，那么代理后的路径将是&#x2F;some&#x2F;endpoint。<br><strong>每个请求都会根据它的路径被代理到相应的后端服务，但每个请求只会被代理一次。</strong><br>2.向尚硅谷服务器发送请求Host: localhost:5173为什么是本地服务器<br>3.分页器不显示，检查后端返回的数据total<br>4.<code>&lt;el-table&gt;</code>的使用<br>5.当用ref监测请求返回的数组时，分页器可以正常运作；但用reactive就无法运作<br>答：因为新的数组不是响应式的，所以被赋值的数组也不会保留响应式的属性，你可以这样做reactiveArray &#x3D; reactive([4, 5, 6]); &#x2F;&#x2F; 新的数组也是响应式的<br>好像不太对呢？？？？？？<br>组件pagination父组件回传了数据(当前的页码)</p><h2 id="表单校验"><a href="#表单校验" class="headerlink" title="表单校验"></a>表单校验</h2><p>需要用到el-form的API以及一些方法;需要注意一个问题，就是清除表单数据的结果的时机，初次点击添加品牌时，表单元素还未生成，此时loginForm.value.clearValidate(‘logoUrl’)的返回值是undefined；因此我们有两个方法避免这个问题：<br>1.ts的写法：loginForm.value?.clearValidate(‘logoUrl’)<br>2.更新后的数据<br>nextTick(()&#x3D;&gt;{<br>  loginForm.value.clearValidate(‘tmName’)<br>})</p><h2 id="品牌管理模块删除业务"><a href="#品牌管理模块删除业务" class="headerlink" title="品牌管理模块删除业务"></a>品牌管理模块删除业务</h2><p>这里遇到的困难还是和ts数据类型的定义有关</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-table-column label=&quot;品牌操作&quot;&gt;</span><br><span class="line">  &lt;template #default=&quot;&#123;row&#125;&quot;&gt;</span><br><span class="line">    &lt;el-button icon=&quot;Edit&quot; @click=&quot;editLogo(row)&quot;&gt;&lt;/el-button&gt;</span><br><span class="line">    &lt;!-- 删除按钮的气泡框 --&gt;</span><br><span class="line">      &lt;el-popover :visible=&quot;visible[row.id]&quot; placement=&quot;top&quot; :width=&quot;160&quot;&gt;</span><br><span class="line">        &lt;p&gt;确定要删除该品牌的信息吗？&lt;/p&gt;</span><br><span class="line">        &lt;div style=&quot;text-align: right; margin: 0&quot;&gt;</span><br><span class="line">          &lt;el-button size=&quot;small&quot; @click=&quot;missdeleteLogo(row.id)&quot;&gt;取消&lt;/el-button&gt;</span><br><span class="line">          &lt;el-button size=&quot;small&quot; type=&quot;primary&quot; @click=&quot;confirmdeleteLogo(row.id)&quot;&gt;确认&lt;/el-button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;template #reference&gt;</span><br><span class="line">          &lt;el-button icon=&quot;Delete&quot; @click=&quot;deleteLogo(row.id)&quot;&gt;&lt;/el-button&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">      &lt;/el-popover&gt;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line">&lt;/el-table-column&gt;</span><br></pre></td></tr></table></figure><p>这里我们不能直接把气泡框的状态用点击按钮进行切换，因为这样会使整个页面的气泡框处于一个共享的状态，一旦有一个出现，其他也会出现。因此我们应该绑定事件，并传入id。<br><code>let visible = ref&lt;boolean[]&gt;([])</code>状态数组的定义<code>visible.value[id] = false</code>状态数组的访问</p><h2 id="属性管理模块数据展示"><a href="#属性管理模块数据展示" class="headerlink" title="属性管理模块数据展示"></a>属性管理模块数据展示</h2><p>基本流程：当选定一级数据后根据一级的id才会有二级的数据，二级的数据选定后根据二级的id才会有三级的数据，三级的数据选定后才会有下面页面的展示。<br>基本思路：因为很多组件都会用到关于属性的数据，所以我们把它存入仓库中。在属性管理模块，当页面挂载完成时，应该发送请求获取一级数据，并将其还有一级id存入仓库中;一级数据选择完毕后，带着一级的id发送请求获取二级数据，并将其还有二级id存入仓库中；以此类推。因为数据要存储在仓库中，在在仓库中定义一个发送请求的函数方便赋值，在组件中直接调用即可。<br>如何知道是否获取某一级的id?答：可以用change事件，绑定一个回调函数。当select框的选中值发生变化时，触发事件。（当用户从下拉菜单中选择一个选项时，<code>&lt;el-select&gt;</code> 的 v-model 绑定的值会自动更新为被选中 <code>&lt;el-option&gt;</code>的 value 值。）<br>下面的展示模块：<br>将发送请求得到的数组存入当前组件的响应式数组中，然后给el-table元素中注入 data 对象数组后，每一列进行相应的遍历可以用prop或插槽<br>#default: 这是v-slot指令的缩写形式，其中#是v-slot:的简写。default指的是默认插槽的名称<br>{row}: 这是传递给插槽的作用域（scope），它定义了一个名为row的变量，这个变量在插槽的内容中可用。作用域插槽允许子组件将数据传递给父组件的插槽内容。</p><h2 id="属性管理模块数据管理"><a href="#属性管理模块数据管理" class="headerlink" title="属性管理模块数据管理"></a>属性管理模块数据管理</h2><p>当进入添加属性模块时，上面的三个下拉菜单被禁用，父子之间通信，用props，definepropty</p><p>添加新的属性的业务：利用表单收集，需要收集的数据有：新增属性的名字,新增的属性值数组,三级分类的id(具体给哪个物品添加属性)<br>属性名字利用v-model收集即可；<br>新增的属性值数组的收集就是每点击一次新增属性按钮，就把input收集到的v-model，Push进数组即可。<br>三级分类的id因为是存在仓库中，所以很容易被访问到。<br><strong>清空上次遗留的数据</strong>在每次点击新增属性按钮后，清空组件定义的ref对象的数据；Object.assign() 是 JavaScript 中的一个方法，用于将所有可枚举属性的值从一个或多个源对象复制到目标对象。它将返回目标对象。该方法主要用于对象合并或属性的浅拷贝。<br>收集完发请求。</p><p>添加属性的input和div的切换:还有两个特殊情况，当input为空时，不能切换；当input的内容和前面的有重复时，不能切换。</p><p>添加属性值的编辑模式：自动聚焦：1.当点击添加属性值按钮时，表单收集的数组的最后一个input元素自动聚焦。2.点击某个input元素（由div切换至input时），自动聚焦。<br>这个功能主要用到的思路是：利用ref获取input的dom元素，存在一个数组中。并且input有一个focus属性，可以聚焦，当出现上述两种情况时，用focus聚焦即可。并且，因为渲染页面需要一定的时间，我们不能立刻获取到dom元素，所以要使用nextTick，等页面数据更新完毕之后再进行更改。</p><p>属性值的编辑模式：当点击编辑按钮时，视图切换，与上述不同的是，需要把当前物品的所有属性在表格中做一个呈现。之前，在el-table上我们绑定的数组attrParams.attrValueList，用作添加新的属性的呈现，现在可以在点击编辑按钮时把当前的属性值（row）赋值给该数组。<strong>注意</strong>：这里如果直接用Object.assign()，就会导致浅拷贝，也就是当你编辑新的属性值的时候，即使未点击保存，也会将已经写入的属性值添加到数组中，在查看模式中呈现出来。因此我们这里需要用到的是深拷贝。 <code>Object.assign(attrParams,JSON.parse(JSON.stringify(row)))</code><br>JSON.stringify(row)：这个方法将 row 对象转换成一个 JSON 字符串。这个过程是深拷贝的一部分，因为它创建了一个完全独立的字符串表示。<br>JSON.parse(…)：这个方法将上一步生成的 JSON 字符串解析回一个 JavaScript 对象。因为这是一个<strong>全新的对象</strong>，所以这是一个深拷贝的过程，它创建了 row 的一个完全独立的副本。<br>Object.assign(attrParams, …)：这个方法将上一步创建的 row 的深拷贝对象的所有可枚举属性复制到 attrParams 对象中。如果 attrParams 和深拷贝对象有相同的属性，则 attrParams 中的属性值将被深拷贝对象的属性值覆盖。</p><h2 id="SPU模块"><a href="#SPU模块" class="headerlink" title="SPU模块"></a>SPU模块</h2><p>当进入spu组件时，点击取消按钮后，要返回到spu模块的主页面，需要场景切换。但是spu组件是子组件，要给父index传数据，我们可以采用自定义事件。在父组件中，子组件的实例对象身上绑定一个自定义事件并让他等于父组件的一个回调函数，在子组件中用defineprops接收后，调用并传递参数。</p><h3 id="index的编辑模式："><a href="#index的编辑模式：" class="headerlink" title="index的编辑模式："></a>index的编辑模式：</h3><p>当点击编辑按钮时，场景切换，同时，还需要把当前品牌的数据渲染在页面中。但是我们拿到的数据是不完整的，还需要再发四个请求获得：全部品牌信息，商品图片，商品属性，商品的全部属性。<br>首先我们要考虑什么时候发送请求拿到数据然后渲染页面：<br>页面挂载时？答案是否定的，因为组件用的是v-show，也就意味着当父组件挂载完毕时，子组件也已经存在。这时候无法发送请求，因为可能还没有拿到三级数据的ID,所以pass。<br>点击编辑按钮时？当点击编辑按钮时，发送请求。我们要考虑的就是，数据应该在子组件中被拿到，然后呈现在页面上。因为如果在父组件中拿到的话，还要把数据传给子组件，就非常麻烦，因此我们需要做到<strong>在子组件中发送请求</strong>拿到数据。可是，点击编辑按钮时的row的数据还要再传给子组件吗？我们有另一个办法！用<strong>ref</strong>，获取到子组件的dom元素，这也就意味着，我们可以在父组件中随意的使用子组件身上的任何属性和方法。接着，在子组件内部定义一个方法，发送请求获取数据，**记得要对外暴露！defineExpose({sendreq})**至于row，我们可以用父组件调用该方法时传递参数给子组件。</p><h3 id="计算当前SPU还未拥有的销售属性"><a href="#计算当前SPU还未拥有的销售属性" class="headerlink" title="计算当前SPU还未拥有的销售属性"></a>计算当前SPU还未拥有的销售属性</h3><p>Array.prototype.every() 是 JavaScript 中数组的一个方法，用于测试数组的所有元素是否都通过了由提供的函数实现的测试。如果数组中所有元素都通过了测试，则返回 true，否则返回 false。<br>Array.prototype.filter() 是 JavaScript 数组的一个方法，它用于创建一个新数组，这个新数组包含通过所提供函数实现的测试的所有元素。简而言之，filter 方法会遍历数组中的每一个元素，并应用一个测试函数（回调函数），将返回 true 的元素添加到新数组中，最终返回这个新数组。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">let unSelectSaleAttr = computed(()=&gt;&#123;</span><br><span class="line">  let unSelectArr = AllAttrs.value.filter(item=&gt;&#123;//所有的属性：颜色，尺寸</span><br><span class="line">    return Attrs.value.every(item1=&gt;&#123;//该商品的属性：颜色</span><br><span class="line">      return item.name != item1.saleAttrName</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  return unSelectArr</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>并且使用:value和v-model把没有被选择的属性的编号以及属性名收集。为了方便点击添加属性按钮时的操作，我们可以把收集好的数据封装成一个对象，然后直接push进数组即可。</p><h3 id="添加属性值模块："><a href="#添加属性值模块：" class="headerlink" title="添加属性值模块："></a>添加属性值模块：</h3><p>·添加属性值：需要给input绑定一个变量，收集数据，我们需要收集属性值的值，以及属性ID（给哪个属性添加的值），因为要把数据带给服务器，所以收集好之后，要封装成一个符合服务器字段名的对象，并推进数组<br>·切换按钮和input框：设置一个变量即可，还需要把上次input收集到的数据清空<br>·属性值不能为空trim()，不能重复find的判断<br>·数据收集完毕，发送请求。因为照片墙部分将属性名改了，所以还要再改回来。</p><h3 id="添加新的属性："><a href="#添加新的属性：" class="headerlink" title="添加新的属性："></a>添加新的属性：</h3><p>在子组件上定义一个方法，用来发送请求。在父组件中，用ref获取到子组件的组件实例对象后，调用该方法，发送请求。但是，我们需要点明是在哪个商品上添加的属性，所以需要父组件把c3id传给子组件。然后只需要发送两个请求，获取其他品牌和销售属性即可，剩下的数据都是需要被收集后发送post请求带上去的。还有就是一些清空业务。</p><h2 id="SKU模块"><a href="#SKU模块" class="headerlink" title="SKU模块"></a>SKU模块</h2><h3 id="获取SKU数据"><a href="#获取SKU数据" class="headerlink" title="获取SKU数据"></a>获取SKU数据</h3><p>与spu相同，我们想在点击增加sku按钮时，切换场景：在父组件中的子组件实例对象上绑定一个自定义事件，并带参数，当在子组件中点击取消按钮时，触发自定义事件，改变场景值即可。<br>·获取sku数据：我们想在父组件中点击添加按钮后，就发送请求，可是数据应该出现在子组件中。所以我们在父组件中用ref获取子组件实例对象，在子组件中定义一个发送请求的方法，并<strong>暴露</strong>(defineExpose({sendreq}))，在父组件中就可以调用该方法来发送请求，而数据在子组件中被获得。<br>数据收集到一个ref对象上;其中收集平台属性和销售属性时，先把每个属性值收集到属性对象的attrIdAndValueId上，因为我们当时定义ts类型时，将这两个数据的具体的值归为一个数组，所以需要我们全部收集完后再整理为一个数组发送给服务器。在这里我们要收集的是，属性id和属性值id，所以在option上的value绑定的是<code>$&#123;item.id&#125;:$&#123;it.id&#125;</code>然后利用v-model收集到select上绑定数据到属性对象的attrIdAndValueId上。<br>·设置默认图片，前面复选框自动勾选：首先我们要用ref获取table实例，然后用<strong>table</strong>的**toggleRowSelection(row,true)**方法（用于多选表格，切换某一行的选中状态， 如果使用了第二个参数，则可直接设置这一行选中与否）。给设置默认事件绑定点击按钮，由于只能有一个被选中，因此我们先遍历（保存的图片的数组）将其他的设为false，然后再将被选中的设为true。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">const handler=(row:any)=&gt;&#123;</span><br><span class="line">  //收集默认图片的路径</span><br><span class="line">  skuParams.skuDefaultImg=row.imgUrl</span><br><span class="line">  //关于复选框</span><br><span class="line">  //点击的时候，全部图片的复选框均不勾选</span><br><span class="line">  Photos.value.forEach((item:any)=&gt;&#123;</span><br><span class="line">    table.value.toggleRowSelection(item,false)</span><br><span class="line">    console.log(item)</span><br><span class="line">  &#125;)</span><br><span class="line">  //被选中的图片的复选框勾选</span><br><span class="line">  table.value.toggleRowSelection(row,true)</span><br><span class="line">  console.log(row)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里注意，因为给table绑定的:data是图片数组，所以row是和item的元素是一样的。<br>·整理平台属性和销售属性的数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">let AttrArrs = AttrArr.value.reduce((prev:any,next:any)=&gt;&#123;</span><br><span class="line">  if(next.attrIdAndValueId)&#123;</span><br><span class="line">    let [attrId,valueId] = next.attrIdAndValueId.split(&#x27;:&#x27;)//那么使用split(&#x27;:&#x27;)方法将其值按冒号:分割成一个数组，并将这个数组解构为两个变量：attrId和valueId。</span><br><span class="line">    prev.push(&#123;</span><br><span class="line">      attrId,</span><br><span class="line">      valueId</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  return prev</span><br><span class="line">&#125;,[])</span><br></pre></td></tr></table></figure><p><code>let [attrId,valueId] = next.attrIdAndValueId.split(&#39;:&#39;)</code><br>使用split(‘:’)方法将其值按冒号:分割成一个数组，并将这个数组解构为两个变量：attrId和valueId<br>回调函数返回prev，即更新后的累加器数组。这确保了reduce方法在下一次迭代时能够使用最新的数组。<br>关于reduce函数<br><code>array.reduce(callback(accumulator, currentValue, currentIndex, array), initialValue)</code><br>callback（必需）：一个执行数组中每个元素的函数，包含四个参数：<br>accumulator（累加器）：上一次调用回调时返回的累积值，或 initialValue（如果提供了 initialValue）。<br>currentValue（当前值）：数组中正在处理的当前元素。<br>currentIndex（当前索引）：数组中正在处理的当前元素的索引。如果提供了 initialValue，则从索引 0 开始；否则从索引 1 开始。<br>array（数组）：调用 reduce 的数组。<br>initialValue（可选）：作为第一次调用 callback 函数时的第一个参数的值。如果没有提供 initialValue，则将数组的第一个元素作为第一次调用 callback 的第一个参数，并且跳过数组的第一个元素，从第二个元素开始累加。</p><h2 id="用户管理模块"><a href="#用户管理模块" class="headerlink" title="用户管理模块"></a>用户管理模块</h2><h3 id="增加新账号和修改账号"><a href="#增加新账号和修改账号" class="headerlink" title="增加新账号和修改账号"></a>增加新账号和修改账号</h3><p>这里需要注意的就是：<br>1.每次点击增加新用户时，需要清空上次收集到的数据：用到了Object.assign(),还有清空表单项的校验提示信息。当页面挂载后，组件中并没有抽屉这个元素，因此我们应该用nextTick(),等页面把数据更新完毕后，再获取到表单项，用clearValidate清除。<br>2.当我们修改自己的账户信息时，原来的账号已经不存在，因此我们需要被重新登陆，用<code> window.location.reload()</code>该方法使浏览器自动刷新一次，利用当时我们写的路由守卫，被反弹到登录页面。</p><h3 id="用户管理的重置"><a href="#用户管理的重置" class="headerlink" title="用户管理的重置"></a>用户管理的重置</h3><p>用到的方法是仓库的reset</p><h3 id="分配权限"><a href="#分配权限" class="headerlink" title="分配权限"></a>分配权限</h3><p>当页面需要呈现出被选择用户的所有权限时，我们得到的数组需要被递归，因为结构一样，但是子数组中又有子数组，所以采用递归思想。并且，要想得到正确的被勾选的形式需要获取到level为4并且selection 为true 的id，并记录下来。</p><p>在JavaScript或TypeScript中，当你处理对象和变量时，赋值方式的选择会直接影响对象的引用和内容的更新。在你提供的代码片段中，你展示了两种清空MenuData对象属性的方法，并询问为什么使用第二种方法（直接赋值整个对象）会导致input无法呈现输入的值。</p><p>首先，我们需要明确一点：在你的代码中，MenuData很可能是一个响应式对象，特别是在你使用Vue或类似框架时。响应式对象通常具有特殊的getter和setter，以便在属性被访问或修改时触发更新。</p><p>使用 Object.assign()<br>javascript<br>Object.assign(MenuData, {<br>    code: ‘’,<br>    id: 0,<br>    level: 0,<br>    name: ‘’,<br>    pid: 0<br>});<br>当你使用Object.assign()时，你是在修改MenuData对象的现有实例。你并没有创建一个新的对象，而是将新属性复制到现有的MenuData对象中。这意味着MenuData的引用保持不变，但它的内容被更新了。由于MenuData是响应式的，Vue或类似框架能够检测到这些变化，并更新依赖于MenuData的任何视图或组件。</p><p>直接赋值整个对象<br>javascript<br>MenuData &#x3D; {<br>    code: ‘’,<br>    id: 0,<br>    level: 0,<br>    name: ‘’,<br>    pid: 0<br>};<br>当你直接赋值整个对象时，你实际上是在创建一个新的对象，并将其赋值给MenuData变量。这意味着MenuData现在指向一个新的对象引用，而不是原来的响应式对象。如果MenuData是在Vue组件的data函数中定义的，并且被用作响应式数据，那么这种赋值方式会破坏响应性。Vue将无法追踪新对象的属性变化，因为新对象没有Vue的响应式getter和setter。</p><p>为什么input无法呈现输入的值？<br>当你直接赋值整个对象时，如果MenuData是响应式的，并且你在模板中绑定了MenuData的某个属性到input的值，那么由于MenuData现在指向一个新的非响应式对象，Vue无法检测到属性的变化。因此，当你在input中输入值时，这个值不会被同步到新的MenuData对象中，也不会更新到Vue的响应式系统中。</p><h2 id="当切换路由时，路由切换成功但是页面上的组件不显示"><a href="#当切换路由时，路由切换成功但是页面上的组件不显示" class="headerlink" title="当切换路由时，路由切换成功但是页面上的组件不显示"></a>当切换路由时，路由切换成功但是页面上的组件不显示</h2><p><a href="https://blog.csdn.net/weixin_43185419/article/details/131187369">https://blog.csdn.net/weixin_43185419/article/details/131187369</a><br><keep-alive> 用于缓存组件实例，保留组件的状态，适用于需要保留用户输入或避免重复数据获取的场景。<br>在 <router-view> 上添加 :key 用于强制重新渲染组件，解决状态不一致的问题，适用于路由参数变化需要重置组件状态的场景。</router-view></keep-alive></p><h3 id="菜单管理"><a href="#菜单管理" class="headerlink" title="菜单管理"></a>菜单管理</h3><p>我们把路由分为三种：常量路由（任何用户都可以访问），异步路由（有人可以有人不可以），任意路由。<br>在登录发送请求时，我们可以获取到用户的所带路由的信息（用户被分配的权限，权限的名字就是路由的名字），拿用户可以访问的路由信息数组和我们定义的异步路由的数组进行对比，过滤出用户所拥有的路由权限。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function filterAsyncRoute(asnycRoute: any, routes: any) &#123;</span><br><span class="line">  return asnycRoute.filter((item: any) =&gt; &#123;</span><br><span class="line">    if (routes.includes(item.name)) &#123;</span><br><span class="line">      if (item.children &amp;&amp; item.children.length &gt; 0) &#123;</span><br><span class="line">        //硅谷333账号:product\trademark\attr\sku</span><br><span class="line">        item.children = filterAsyncRoute(item.children, routes)</span><br><span class="line">      &#125;</span><br><span class="line">      return true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用时需要深拷贝</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const userAsyncRoute = filterAsyncRoute(</span><br><span class="line">  cloneDeep(asyncRoute),</span><br><span class="line">  result.data.routes,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>然后追加到用户信息仓库的路由信息中<code>this.menuRoutes = [...constantRoutes, ...userAsyncRoute, ...anyRoute];</code><br>但是此时并没有注册除常量路由以外的路由，所以我们还需要将获得的路由数组注册</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[...userAsyncRoute, anyRoute].forEach((route: any) =&gt; &#123;</span><br><span class="line">  router.addRoute(route)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="echarts使用步骤以及常用配置项"><a href="#echarts使用步骤以及常用配置项" class="headerlink" title="echarts使用步骤以及常用配置项"></a>echarts使用步骤以及常用配置项</h2><p>1.获取dom元素， <code>ref=&quot;charts&quot;</code>  <code>let charts = ref()</code><br>2.引入echarts <code>import * as echarts from &#39;echarts&#39;;</code><br>3.初始化 <code>let mycharts = echarts.init(charts.value)</code><br>4.设置配置项 <code>mycharts.setOption(option)</code><br><font color="red">注意</font>echart需要一个画布，所以只有在元素全部被挂载后才能执行echarts的相关代码<br>在vue2中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mounted: function () &#123;</span><br><span class="line">    this.$nextTick(function () &#123;</span><br><span class="line">      let mycharts = echarts.init(document.querySelector(&#x27;.mycharts&#x27;))</span><br><span class="line">      mycharts.setOption(&#123;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>在vue3中常与<code>onMounted</code>搭配</p><h3 id="常见的配置项"><a href="#常见的配置项" class="headerlink" title="常见的配置项"></a>常见的配置项</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">title: &#123;</span><br><span class="line">  text: &#x27;主标题&#x27;,</span><br><span class="line">  subtext: &#x27;副标题&#x27;,</span><br><span class="line">  left: &#x27;center&#x27;, // 标题水平位置：&#x27;left&#x27; | &#x27;center&#x27; | &#x27;right&#x27;</span><br><span class="line">  textStyle: &#123; fontSize: 18, color: &#x27;#333&#x27; &#125;, // 主标题样式</span><br><span class="line">  subtextStyle: &#123; fontSize: 14, color: &#x27;#999&#x27; &#125;, // 副标题样式</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>管理图表系列的展示和交互</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">legend: &#123;</span><br><span class="line">  orient: &#x27;horizontal&#x27;, // 布局方向：&#x27;horizontal&#x27;(水平的) | &#x27;vertical&#x27;</span><br><span class="line">  left: &#x27;center&#x27;,</span><br><span class="line">  data: [&#x27;系列1&#x27;, &#x27;系列2&#x27;], // 对应 series.name</span><br><span class="line">  textStyle: &#123; color: &#x27;#000&#x27; &#125;, // 图例文字样式</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>tooltip（提示框）<br>显示鼠标悬浮时的数据详情。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tooltip: &#123;</span><br><span class="line">  trigger: &#x27;item&#x27;, // &#x27;item&#x27;: 针对数据项 | &#x27;axis&#x27;: 针对坐标轴</span><br><span class="line">  formatter: &#x27;&#123;a&#125; &lt;br/&gt;&#123;b&#125;: &#123;c&#125; (&#123;d&#125;%)&#x27;, // 自定义格式化内容</span><br><span class="line">  backgroundColor: &#x27;rgba(50,50,50,0.7)&#x27;, // 提示框背景色</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>grid（网格）<br>设置坐标系在容器中的布局。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">grid: &#123;//饼状图中在legnd中设置</span><br><span class="line">  left: &#x27;10%&#x27;, // 距左边距</span><br><span class="line">  right: &#x27;10%&#x27;, // 距右边距</span><br><span class="line">  top: &#x27;15%&#x27;, // 距顶部</span><br><span class="line">  bottom: &#x27;10%&#x27;, // 距底部</span><br><span class="line">  containLabel: true, // 是否包含坐标轴刻度标签</span><br><span class="line">  containLabel: true//保证折线图的数据从 X 轴的起点开始绘制，避免视觉上的留白问题。</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">xAxis: &#123;</span><br><span class="line">  type: &#x27;category&#x27;, // 坐标轴类型：&#x27;value&#x27;（数值） | &#x27;category&#x27;（类目） | &#x27;time&#x27;（时间）</span><br><span class="line">  data: [&#x27;周一&#x27;, &#x27;周二&#x27;, &#x27;周三&#x27;], // 类目数据</span><br><span class="line">  axisLine: &#123; lineStyle: &#123; color: &#x27;#333&#x27; &#125; &#125;, // 坐标轴线样式</span><br><span class="line">  axisLabel: &#123; color: &#x27;#666&#x27; &#125; // 标签样式</span><br><span class="line">&#125;,</span><br><span class="line">yAxis: &#123;</span><br><span class="line">  type: &#x27;value&#x27;,</span><br><span class="line">  splitLine: &#123; lineStyle: &#123; type: &#x27;dashed&#x27;, color: &#x27;#ddd&#x27; &#125; &#125;, // 网格线样式</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 硅谷甄选 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目中常用到的</title>
      <link href="/2024/11/10/guigu/"/>
      <url>/2024/11/10/guigu/</url>
      
        <content type="html"><![CDATA[<h1 id="应用Element-plus插件"><a href="#应用Element-plus插件" class="headerlink" title="应用Element-plus插件"></a>应用Element-plus插件</h1><p>插件被重复使用,国际化应用失败也是这里出错<br><img src="/2024/11/10/guigu/4.png" alt="alt text"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.use(ElementPlus)</span><br><span class="line">app.use(ElementPlus, &#123;</span><br><span class="line">  locale: zhCn,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="安装sass遇到的问题"><a href="#安装sass遇到的问题" class="headerlink" title="安装sass遇到的问题"></a>安装sass遇到的问题</h1><p><img src="/2024/11/10/guigu/image.png" alt="alt text"><br>我们目前在组件内部已经可以使用scss样式,因为在配置styleLint工具的时候，项目当中已经安装过sass sass-loader,因此我们再组件内可以使用scss语法！！！需要加上lang&#x3D;”scss”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;style scoped lang=&quot;scss&quot;&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>接下来我们为项目添加一些全局的样式<br>在src&#x2F;styles目录下创建一个index.scss文件，当然项目中需要用到清除默认样式，因此在index.scss引入reset.scss</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@import reset.scss</span><br></pre></td></tr></table></figure><p>在入口文件引入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#x27;@/styles&#x27;</span><br></pre></td></tr></table></figure><p>但是你会发现在src&#x2F;styles&#x2F;index.scss全局样式文件中没有办法使用$变量.因此需要给项目中引入全局变量$.<br>在style&#x2F;variable.scss创建一个variable.scss文件！<br>在vite.config.ts文件配置如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">export default defineConfig((config) =&gt; &#123;</span><br><span class="line">css: &#123;</span><br><span class="line">      preprocessorOptions: &#123;</span><br><span class="line">        scss: &#123;</span><br><span class="line">          javascriptEnabled: true,</span><br><span class="line">          additionalData: &#x27;@import &quot;./src/styles/variable.scss&quot;;&#x27;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong><code>@import &quot;./src/styles/variable.less&quot;;</code>后面的<code>;</code>不要忘记，不然会报错</strong>!</p><h2 id="治标不治本的两个方法："><a href="#治标不治本的两个方法：" class="headerlink" title="治标不治本的两个方法："></a>治标不治本的两个方法：</h2><p>1.把sass变量在需要使用的组件中再次声明<br><img src="/2024/11/10/guigu/3.png" alt="alt text"><br>2.把@use换成@import 但会有警告，因为@import已经弃用</p><h1 id="找不到模块问题"><a href="#找不到模块问题" class="headerlink" title="找不到模块问题"></a>找不到模块问题</h1><p><img src="/2024/11/10/guigu/2.png" alt="alt text"><br>在vue3项目里，ts文件是识别不了vue文件<br>找到项目的env.d.ts文件<br>加上</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">declare module &quot;*.vue&quot; &#123;</span><br><span class="line">  import type &#123; DefineComponent &#125; from &quot;vue&quot;;</span><br><span class="line">  const vueComponent: DefineComponent&lt;&#123;&#125;, &#123;&#125;, any&gt;;</span><br><span class="line">  export default vueComponent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="moke接口"><a href="#moke接口" class="headerlink" title="moke接口"></a>moke接口</h1><p>安装依赖:<a href="https://www.npmjs.com/package/vite-plugin-mock">https://www.npmjs.com/package/vite-plugin-mock</a><br>通过命令行 npm install -D vite-plugin-mock mockjs 安装的vite-plugin-mock 之后发现再vite.config.ts里边报错<br>viteMockServe({ localEnabled: command &#x3D;&#x3D;&#x3D; ‘serve’, })  类型“{ localEnabled: boolean; }”的参数不能赋给类型“ViteMockOptions”的参数。<br>对象字面量只能指定已知属性，并且“localEnabled”不在类型“ViteMockOptions”中。<br>解决办法：<br>卸载vite-plugin-mock</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall vite-plugin-mock</span><br></pre></td></tr></table></figure><p>安装 2.9.6版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install mockjs vite-plugin-mock@2.9.6 -D</span><br></pre></td></tr></table></figure><p>为啥发送get 请求就获取不到信息</p><h1 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h1><p><strong>项目开发过程中，至少会经历开发环境、测试环境和生产环境(即正式环境)三个阶段。不同阶段请求的状态(如接口地址等)不尽相同，若手动切换接口地址是相当繁琐且易出错的。于是环境变量配置的需求就应运而生，我们只需做简单的配置，把环境状态切换的工作交给代码。</strong></p><p>开发环境（development）<br>顾名思义，开发使用的环境，每位开发人员在自己的dev分支上干活，开发到一定程度，同事会合并代码，进行联调。</p><p>测试环境（testing）<br>测试同事干活的环境啦，一般会由测试同事自己来部署，然后在此环境进行测试</p><p>生产环境（production）<br>生产环境是指正式提供对外服务的，一般会关掉错误报告，打开错误日志。(正式提供给客户使用的环境。)</p><p>注意:一般情况下，一个环境对应一台服务器,也有的公司开发与测试环境是一台服务器！！！</p><p>项目根目录分别添加 开发、生产和测试环境的文件!</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.env.development</span><br><span class="line">.env.production</span><br><span class="line">.env.test</span><br></pre></td></tr></table></figure><p>文件内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 变量必须以 VITE_ 为前缀才能暴露给外部读取</span><br><span class="line">NODE_ENV = &#x27;development&#x27;</span><br><span class="line">VITE_APP_TITLE = &#x27;硅谷甄选运营平台&#x27;</span><br><span class="line">VITE_APP_BASE_API = &#x27;/dev-api&#x27;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">NODE_ENV = &#x27;production&#x27;</span><br><span class="line">VITE_APP_TITLE = &#x27;硅谷甄选运营平台&#x27;</span><br><span class="line">VITE_APP_BASE_API = &#x27;/prod-api&#x27;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 变量必须以 VITE_ 为前缀才能暴露给外部读取</span><br><span class="line">NODE_ENV = &#x27;test&#x27;</span><br><span class="line">VITE_APP_TITLE = &#x27;硅谷甄选运营平台&#x27;</span><br><span class="line">VITE_APP_BASE_API = &#x27;/test-api&#x27;</span><br></pre></td></tr></table></figure><p>配置运行命令：package.json</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">   &quot;dev&quot;: &quot;vite --open&quot;,</span><br><span class="line">   &quot;build:test&quot;: &quot;vue-tsc &amp;&amp; vite build --mode test&quot;,</span><br><span class="line">   &quot;build:pro&quot;: &quot;vue-tsc &amp;&amp; vite build --mode production&quot;,</span><br><span class="line">   &quot;preview&quot;: &quot;vite preview&quot;</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure><p>通过import.meta.env获取环境变量</p><h1 id="axios-二次封装"><a href="#axios-二次封装" class="headerlink" title="axios 二次封装"></a>axios 二次封装</h1><p>目的：<br>1:使用请求拦截器，可以在请求拦截器中处理一些业务(开始进度条、请求头携带公共参数)<br>2:使用响应拦截器，可以在响应拦截器中处理一些业务(进度条结束、简化服务器返回的数据、处理http网络错误)<br>在根目录下创建utils&#x2F;request.ts<br>&#x2F;&#x2F;进行axios二次封装：使用请求与响应拦截器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">import axios from &#x27;axios&#x27;</span><br><span class="line">import Nprogress from &#x27;nprogress&#x27;</span><br><span class="line">import &#x27;nprogress/nprogress.css&#x27;</span><br><span class="line">import &#123; ElMessage &#125; from &#x27;element-plus&#x27;;</span><br><span class="line">let requests = axios.create(&#123;</span><br><span class="line">  //基础路径</span><br><span class="line">  baseURL: import.meta.env.VITE_APP_BASE_API,</span><br><span class="line">  timeout: 5000//超时时间设置</span><br><span class="line">&#125;);</span><br><span class="line">//第二步，给axios添加请求和响应拦截器</span><br><span class="line">requests.interceptors.request.use((config) =&gt; &#123;</span><br><span class="line">  //config,有headers请求头属性，给服务器携带公共参数</span><br><span class="line">  Nprogress.start();//核心代码</span><br><span class="line">  //返回配置对象</span><br><span class="line">  return config</span><br><span class="line">&#125;)</span><br><span class="line">//第三步：响应拦截器</span><br><span class="line">requests.interceptors.response.use((response) =&gt; &#123;</span><br><span class="line">  Nprogress.done()    //核心代</span><br><span class="line">  //成功的回调</span><br><span class="line">  //简化数据</span><br><span class="line">  return response.data</span><br><span class="line">&#125;, (error) =&gt; &#123;</span><br><span class="line">  //失败的回调</span><br><span class="line">  //定义一个变量，存储网络错误信息</span><br><span class="line">  let msg = &#x27;&#x27;;</span><br><span class="line">  let status = error.response.status;</span><br><span class="line">  switch (status) &#123;</span><br><span class="line">    case 401:</span><br><span class="line">      msg = &quot;token过期&quot;;</span><br><span class="line">      break;</span><br><span class="line">    case 403:</span><br><span class="line">      msg = &#x27;无权访问&#x27;;</span><br><span class="line">      break;</span><br><span class="line">    case 404:</span><br><span class="line">      msg = &quot;请求地址错误&quot;;</span><br><span class="line">      break;</span><br><span class="line">    case 500:</span><br><span class="line">      msg = &quot;服务器出现问题&quot;;</span><br><span class="line">      break;</span><br><span class="line">    default:</span><br><span class="line">      msg = &quot;无网络&quot;;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">//返回一个被拒绝的 Promise 对象。</span><br><span class="line">  ElMessage(&#123;</span><br><span class="line">    type: &#x27;error&#x27;,</span><br><span class="line">    message: msg</span><br><span class="line">  &#125;)</span><br><span class="line">  return Promise.reject(error);</span><br><span class="line">&#125;)</span><br><span class="line">export default requests;</span><br></pre></td></tr></table></figure><h1 id="进度条"><a href="#进度条" class="headerlink" title="进度条"></a>进度条</h1><p>1.安装依赖。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm i nprogress -S</span><br></pre></td></tr></table></figure><p>2.引入进度条。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import Nprogress from &#x27;nprogress&#x27;</span><br><span class="line">import &#x27;nprogress/nprogress.css&#x27;</span><br></pre></td></tr></table></figure><p>3.使用。<br>发送请求时，在request方法添加进度条。<br>&#x2F;&#x2F; request拦截器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">service.interceptors.request.use(</span><br><span class="line">    config =&gt; &#123;</span><br><span class="line">        Nprogress.start();//核心代码</span><br><span class="line">        return config;</span><br><span class="line">    &#125;, error =&gt; &#123;</span><br><span class="line">        Promise.reject(error);</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>请求响应时，在response方法撤销进度条。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// respone拦截器</span><br><span class="line">  Nprogress.done()    //核心代码</span><br></pre></td></tr></table></figure><h1 id="API接口统一管理"><a href="#API接口统一管理" class="headerlink" title="API接口统一管理"></a>API接口统一管理</h1><p>在&#x2F;src&#x2F;api&#x2F;user下<br>index.ts</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import requests from &quot;../../utils/request&quot;;</span><br><span class="line">import type &#123; loginForm, loginResponseData, userResponseData &#125; from &#x27;./type&#x27;</span><br><span class="line">//统一管理接口</span><br><span class="line">enum API &#123;</span><br><span class="line">  LOGIN_URL = &quot;/user/login&quot;,</span><br><span class="line">  USERINFO_URL = &quot;/user/info&quot;</span><br><span class="line">&#125;</span><br><span class="line">//暴露请求函数</span><br><span class="line">//登录接口方法</span><br><span class="line">export const reqLogin = (data: loginForm) =&gt; requests.post&lt;any, loginResponseData&gt;(API.LOGIN_URL, data)</span><br><span class="line">//获取用户信息接口方法</span><br><span class="line">export const reqUserInfo = requests.get&lt;any, userResponseData&gt;(API.USERINFO_URL)</span><br></pre></td></tr></table></figure><p>type.ts文件中定义相关数据类型</p><h1 id="如何注册一个全局组件？"><a href="#如何注册一个全局组件？" class="headerlink" title="如何注册一个全局组件？"></a>如何注册一个全局组件？</h1><p>1.在入口文件中引入<br>2.app.component(‘全局组件名’,引入组件名)<br>3.直接使用即可</p><h1 id="配置路由的基本流程"><a href="#配置路由的基本流程" class="headerlink" title="配置路由的基本流程"></a>配置路由的基本流程</h1><p>1.npm i vue-router<br>2.在src文件夹下创建一个router文件夹，index.ts<br>路由组件一般放在&#x2F;src&#x2F;pages文件夹下<br>3.在index.ts中引入createRouter方法，用于创建路由实例，需要暴露（因为在入口文件中需要被引入使用）<br>4.配置路由</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">export default createRouter(&#123;</span><br><span class="line">  //路由的模式设置</span><br><span class="line">  history: createWebHashHistory(),</span><br><span class="line">  //管理路由</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: &#x27;/home&#x27;,</span><br><span class="line">      component: () =&gt; import(&#x27;../pages/home/index.vue&#x27;)</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: &#x27;/hospital&#x27;,</span><br><span class="line">      component: () =&gt; import(&#x27;../pages/hospital/index.vue&#x27;)</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: &#x27;/&#x27;,</span><br><span class="line">      redirect: &#x27;/home&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  //滚动行为（控制滚动条的位置</span><br><span class="line">  scrollBehavior() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      left: 0,</span><br><span class="line">      top: 0</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>5.在main.js引入router<br><code>import router from &#39;@/index.ts&#39;</code><br>安装vue-router<code>app.use(router)</code><br>6.设置展示路由组件的区域</p><h1 id="使用element-plus基本步骤"><a href="#使用element-plus基本步骤" class="headerlink" title="使用element-plus基本步骤"></a>使用element-plus基本步骤</h1><ol><li><code>npm i element-plus</code> </li><li>引入<br><code>import ElementPlus from &#39;element-plus&#39;</code><br><code>import &#39;element-plus/dist/index.css&#39;</code><br><code>app.use(ElementPlus)</code></li></ol><h1 id="使用icon图标"><a href="#使用icon图标" class="headerlink" title="使用icon图标"></a>使用icon图标</h1><p>1<code> npm install @element-plus/icons-vue</code><br>2.引入图标</p><h1 id="使用axios，二次封装"><a href="#使用axios，二次封装" class="headerlink" title="使用axios，二次封装"></a>使用axios，二次封装</h1><p>1.npm i axios<br>2.在src&#x2F;创建utils&#x2F;requests.ts<br>3.引入axios<br>利用axios.create创建一个axios实例，可以设置基础路径，超时时间的设置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const requests = axios.create(&#123;</span><br><span class="line">  baseURL: &#x27;/api&#x27;,//请求的基础路径设置</span><br><span class="line">  timeout: 5000//超时时间的设置</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>添加请求拦截器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">requests.interceptors.request.use((config) =&gt; &#123;</span><br><span class="line">  //config:请求拦截器回调注入的对象（配置对象），配置对象的身上最重要的headers属性</span><br><span class="line">  //可以通过请求头携带公共参数token</span><br><span class="line">  return config;//必须要返回</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>响应拦截器，有两个回调函数<br>return 的数据会注入到发请求时的.then的参数中<br>response是一个数组,包括config,data，请求报文的信息等</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">requests.interceptors.response.use((response) =&gt; &#123;</span><br><span class="line">  //响应拦截器成功的回调,一般会用来简化数据</span><br><span class="line">  return response.data;</span><br><span class="line">&#125;, (error) =&gt; &#123;</span><br><span class="line">  //请求失败的回调</span><br><span class="line">  //处理失败的回调，处理http返回的错误</span><br><span class="line">  let status = error.response.status</span><br><span class="line">  switch (status) &#123;</span><br><span class="line">    case 404:</span><br><span class="line">      ElMessage(&#123;</span><br><span class="line">        type: &#x27;error&#x27;,</span><br><span class="line">        message: error.message</span><br><span class="line">      &#125;)</span><br><span class="line">      break;</span><br><span class="line">    case 500 | 501 | 502 | 503 | 504 | 505:</span><br><span class="line">      ElMessage(&#123;</span><br><span class="line">        type: &#x27;error&#x27;,</span><br><span class="line">        message: &#x27;服务器挂了&#x27;</span><br><span class="line">      &#125;)</span><br><span class="line">      break;</span><br><span class="line">  &#125;</span><br><span class="line">  return Promise.reject(new Error(error.message))</span><br><span class="line">&#125;)</span><br><span class="line">//务必对外暴露</span><br><span class="line">export default requests;</span><br></pre></td></tr></table></figure><p>3.对于axios进行二次封装，目的？&#96;<br>  1利用axios请求，响应拦截器  2请求拦截器：在请求头中携带公共参数 3相应拦截器：简化服务器返回的数据，处理http网络错误</p><h1 id="动态追加或取消类名"><a href="#动态追加或取消类名" class="headerlink" title="动态追加或取消类名"></a>动态追加或取消类名</h1><p><code>&lt;li :class=&quot;&#123;active: isActive&#125;&quot;&gt;全部&lt;/li&gt;</code><br>在这个例子中，isActive 是一个布尔值。如果 isActive 为 true，则 <li> 元素会被添加 active 类；如果为 false，则不会添加。</li></p><h1 id="Pinia持久化插件"><a href="#Pinia持久化插件" class="headerlink" title="Pinia持久化插件"></a>Pinia持久化插件</h1><p>1.<code>npm i pinia-plugin-persistedstate</code><br>2.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import &#123; createPinia &#125; from &#x27;pinia&#x27;</span><br><span class="line">import piniaPluginPersistedstate from &#x27;pinia-plugin-persistedstate&#x27;</span><br><span class="line">const pinia = createPinia()</span><br><span class="line">pinia.use(piniaPluginPersistedstate)</span><br></pre></td></tr></table></figure><p>3.记得在仓库的定义文件中添加 <code>persist: true</code></p><h1 id="文字要溢出时添加滚动效果，点击某个元素使其对应的内容滚动到最上方"><a href="#文字要溢出时添加滚动效果，点击某个元素使其对应的内容滚动到最上方" class="headerlink" title="文字要溢出时添加滚动效果，点击某个元素使其对应的内容滚动到最上方"></a>文字要溢出时添加滚动效果，点击某个元素使其对应的内容滚动到最上方</h1><p><code>overflow:scroll</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">element.scrollIntoView(&#123;</span><br><span class="line">  block: &#x27;start&#x27;,</span><br><span class="line">  behavior:&#x27;smooth&#x27;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id><a href="#" class="headerlink" title></a></h1><p>需要使用深度选择器<br>原生css选择器 &gt;&gt;&gt;<br>less中&#x2F;deep&#x2F;<br>sass中::v-deep</p><h1 id="使用微信扫码登录"><a href="#使用微信扫码登录" class="headerlink" title="使用微信扫码登录"></a>使用微信扫码登录</h1><p>1.在index.html中引入<code>&lt;script src=&quot;https://res.wx.qq.com/connect/zh_CN/htmledition/js/wxLogin.js&quot;&gt;&lt;/script&gt;</code><br>2.在相应组件中创建实例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">new WxLogin(&#123;</span><br><span class="line">  self_redirect: true,  // true：手机点击确认登录后可以在iframe内跳转到redirect_uri</span><br><span class="line">  id: &quot;login_container&quot;,  // 显示二维码容器的id</span><br><span class="line">  appid: result.data.appid,  // 应用位置标识appid（请替换为您的appid）</span><br><span class="line">  scope: &quot;snsapi_login&quot;,  // 当前微信扫码登录页面已经授权了</span><br><span class="line">  redirect_uri: result.data.redirectUri,  // 填写授权回调域路径（请替换为您的回调地址）</span><br><span class="line">  state: result.data.state,  // state就是学校服务器重定向的地址携带用户信息（可根据需要设置）</span><br><span class="line">  style: &quot;black&quot;,  // 二维码样式</span><br><span class="line">  href:&#x27;&#x27;</span><br><span class="line">  // 注意：href参数在WxLogin构造函数中通常不是必需的，因为它与扫码登录流程无直接关系</span><br><span class="line">  // 如果您需要在扫码成功后进行某些操作，请在redirect_uri中处理</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="nprogress进度条插件"><a href="#nprogress进度条插件" class="headerlink" title="nprogress进度条插件"></a>nprogress进度条插件</h1><ol><li><code>npm i nprogress</code></li><li>通常在路由鉴权permission.ts文件中引入，<code>import Nprogress from &#39;nprogress&#39;</code>,<code>import &quot;../node_modules/nprogress/nprogress.css&quot;</code><strong>一定要引入样式</strong>，否则不显示。</li><li>进度条的加载小圆球不要 Nprogress.configure({ showSpinner: false })</li><li>进度条开始<code> Nprogress.start()</code>，进度条结束<code> Nprogress.done()</code></li></ol><h1 id="当在路由守卫中使用pinia时"><a href="#当在路由守卫中使用pinia时" class="headerlink" title="当在路由守卫中使用pinia时"></a>当在路由守卫中使用pinia时</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// ❌ 由于引入顺序的问题，这将失败</span><br><span class="line">const store = useStore()</span><br><span class="line"></span><br><span class="line">router.beforeEach((to) =&gt; &#123;</span><br><span class="line">  // ✅ 这样做是可行的，因为路由器是在其被安装之后开始导航的，</span><br><span class="line">  // 而此时 Pinia 也已经被安装。</span><br><span class="line">  const store = useStore()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="npm-run-build项目打包时遇到的问题"><a href="#npm-run-build项目打包时遇到的问题" class="headerlink" title="npm run build项目打包时遇到的问题"></a>npm run build项目打包时遇到的问题</h1><ul><li>‘rules’ is declared but its value is never read<br>在package.json中修改命令”build”: “vite build”<br><img src="/2024/11/10/guigu/image%20copy.png" alt="alt text"></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Element 组件库</title>
      <link href="/2024/11/10/Element-el-row-el-col%E5%B8%83%E5%B1%80/"/>
      <url>/2024/11/10/Element-el-row-el-col%E5%B8%83%E5%B1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="el布局"><a href="#el布局" class="headerlink" title="el布局"></a>el布局</h1><p>element的布局方式与bootstrap原理是一样的，将网页划分成若干行，然后每行等分为若干列，基于这样的方式进行布局，形象的成为栅栏布局。<br>区别是element可将每行划分为24个分栏，而bootstrap是划分为12个分栏，从使用角度，还是24个分栏更加精细。</p><h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h2><p>首先每行使用<code>&lt;el-row&gt;</code>标签标识，然后每行内的列使用<code>&lt;el-col&gt;</code>标识，至于每列整行的宽度比例，则使用:span属性进行设置。</p><h3 id="分栏间隔"><a href="#分栏间隔" class="headerlink" title="分栏间隔"></a>分栏间隔</h3><p>有时候想为不同分栏之间设定一定的间隔，可以使用<code>&lt;el-row&gt;</code>标签的:gutter属性，注意默认间隔为0。<br>以下写法不生效：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;span&gt;分栏间隔 无效&lt;/span&gt;</span><br><span class="line">&lt;el-row :gutter=&quot;50&quot;&gt;</span><br><span class="line">  &lt;el-col :span=&quot;8&quot; class=&quot;lightgreen-box&quot;&gt;示例2&lt;/el-col&gt;</span><br><span class="line">  &lt;el-col :span=&quot;8&quot; class=&quot;orange-box&quot;&gt;示例2&lt;/el-col&gt;</span><br><span class="line">  &lt;el-col :span=&quot;8&quot; class=&quot;lightgreen-box&quot;&gt;示例2&lt;/el-col&gt;</span><br><span class="line">&lt;/el-row&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;span&gt;分栏间隔 有效&lt;/span&gt;</span><br><span class="line">    &lt;el-row :gutter=&quot;24&quot;&gt;</span><br><span class="line">      &lt;el-col :span=&quot;8&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;lightgreen-box&quot;&gt;示例3&lt;/div&gt;</span><br><span class="line">      &lt;/el-col&gt;</span><br><span class="line">      &lt;el-col :span=&quot;8&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;orange-box&quot;&gt;示例3&lt;/div&gt;</span><br><span class="line">      &lt;/el-col&gt;</span><br><span class="line">      &lt;el-col :span=&quot;8&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;lightgreen-box&quot;&gt;示例3&lt;/div&gt;</span><br><span class="line">      &lt;/el-col&gt;</span><br><span class="line">    &lt;/el-row&gt;</span><br></pre></td></tr></table></figure><h3 id="分栏偏移"><a href="#分栏偏移" class="headerlink" title="分栏偏移"></a>分栏偏移</h3><p>有时候想让某个分栏不从左边显示，而是直接显示到中间或者右侧，例如右侧导航栏，我们希望它处于右侧且占据页面1&#x2F;3的宽度。此时可以借助offset属性来实现，表示偏移量。<br>此时，想占据1&#x2F;3宽度，则:span应为8，偏移量应为24-8&#x3D;16，所以代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;span&gt;分栏偏移&lt;/span&gt;</span><br><span class="line">    &lt;el-row&gt;</span><br><span class="line">      &lt;el-col :span=&quot;8&quot; :offset=&quot;16&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;lightgreen-box&quot;&gt;示例4&lt;/div&gt;</span><br><span class="line">      &lt;/el-col&gt;</span><br><span class="line">    &lt;/el-row&gt;</span><br><span class="line">    &lt;el-divider&gt;&lt;/el-divider&gt;//分割线</span><br></pre></td></tr></table></figure><p>更具体的用法<br><a href="https://element-plus.org/zh-CN/component/layout.html">https://element-plus.org/zh-CN/component/layout.html</a></p><h1 id="表单的校验"><a href="#表单的校验" class="headerlink" title="表单的校验"></a>表单的校验</h1><p>inline属性可以让表单元素在一行上显示</p><h2 id="大致使用步骤"><a href="#大致使用步骤" class="headerlink" title="大致使用步骤"></a>大致使用步骤</h2><p>1.双向绑定表单收集的数据，校验规则<code>&lt;el-form class=&quot;form&quot; :rules=&quot;rules&quot; :model=&quot;loginForm&quot;&gt;</code><br>:model&#x3D;”loginForm”是收集表单数据，ref&#x3D;”login”是获取表单元素，利用form上的validate()方法，反映校验是否成功<br>2.给<strong>表单元素</strong>加prop属性<code> &lt;el-form-item prop=&quot;username&quot;&gt;</code>,声明需要校验的数据<br>3.在<code>&lt;script&gt;</code>中定义校验规则</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const rules = reactive(&#123;</span><br><span class="line">  username: [</span><br><span class="line">    &#123; required: true, message: &#x27;请输入用户名&#x27;, trigger: &#x27;blur&#x27; &#125;,</span><br><span class="line">     &#123; min: 3, max: 5, message: &#x27;用户名长度应为3~5个字符&#x27;, trigger: &#x27;blur&#x27; &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>required:代表这个字段务必要校验<br>message:错误提示信息<br>trigger:触发表单校验时机，change-&gt;文本发生变化时触发校验，blur-&gt;失去焦点时触发<br><code>loginForms.value.validate()</code>返回一个promise对象，表示校验是否成功（符合写的rules而不是用户名密码是否正确）<br>清除掉对应图片校验结果：loginForm.value.clearValidate(‘logoUrl’)<br>resetFields重置该表单项，将其值重置为初始值，并移除校验结果<br>clearValidate清理某个字段的表单验证信息。</p><h2 id="自定义表单校验"><a href="#自定义表单校验" class="headerlink" title="自定义表单校验"></a>自定义表单校验</h2><p>rule:即为校验规则对象<br>value:即为表单元素文本内容<br>callback：函数如果符合条件callback放行通过<br>如果不符合条件，callback方法注入错误提示信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">const validatorUserName = (rule:any,value:any,callback: any)=&gt;&#123;</span><br><span class="line">  if(value.length&gt;=5)&#123;//必须全是数字</span><br><span class="line">    callback()</span><br><span class="line">  &#125;else &#123;</span><br><span class="line">    callback(new Error(&#x27;账号长度至少五位&#x27;))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">const rules = reactive(&#123;</span><br><span class="line">  username: [</span><br><span class="line">    &#123;validator:validatorUserName, trigger: &#x27;change&#x27; &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>注意</strong><br>*** prop的属性名应该在表单:model&#x3D;”form”中存在 ***<br>详情见：<a href="https://element-plus.org/zh-CN/component/form.html">https://element-plus.org/zh-CN/component/form.html</a></p><h1 id="表格的使用"><a href="#表格的使用" class="headerlink" title="表格的使用"></a>表格的使用</h1><p><a href="https://element-plus.org/zh-CN/component/table.html#table-%E8%A1%A8%E6%A0%BC">https://element-plus.org/zh-CN/component/table.html#table-%E8%A1%A8%E6%A0%BC</a><br>表格组件：用于展示已有得平台数据<br>table:—border:可以设置表格纵向是否有边框<br>:data绑定的数据 对象数组<br>table-column:<br>·width:设置这列宽度<br>·align:设置内容居中对齐<br>·label:列名<br>·prop:内容<strong>注意</strong>这里直接写属性名即可，不用写 abc.属性名<br>· show-overflow-tooltip：某行文字过长隐藏<br>·fixed: true（固定在左侧）  false(固定在右侧)<br>·toggleRowSelection(row,true)：注意<strong>父组件是table</strong>用于多选表格，切换某一行的选中状态， 如果使用了第二个参数，则可直接设置这一行选中与否<br>·插槽：这里的<code>&lt;template&gt;</code>标签配合 #default 插槽名称，定义了这一列的默认内容渲染方式.{ row, $index }是 Element UI 传递给插槽的作用域变量。row 代表当前行的数据对象，而 $index 代表当前行的索引（从 0 开始）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;template #default=&quot;&#123; row, $index &#125;&quot;&gt;</span><br><span class="line">  &lt;img :src=&quot;row.logoUrl&quot; alt=&quot;&quot; style=&quot;width: 100px; height: 100px;&quot;&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h1 id="Pagination-分页"><a href="#Pagination-分页" class="headerlink" title="Pagination 分页"></a>Pagination 分页</h1><p><a href="https://element-plus.org/zh-CN/component/pagination.html#pagination-%E5%88%86%E9%A1%B5">https://element-plus.org/zh-CN/component/pagination.html#pagination-%E5%88%86%E9%A1%B5</a><br>分页器不显示，检查后端返回的数据total<br>关于currentPage和pageSize的数据变化我们不需要担心因为分页器用v-model帮我们收集好了</p><h1 id="对话框dialog"><a href="#对话框dialog" class="headerlink" title="对话框dialog"></a>对话框dialog</h1><h1 id="upload上传"><a href="#upload上传" class="headerlink" title="upload上传"></a>upload上传</h1><p><a href="https://element-plus.org/zh-CN/component/upload.html#upload-%E4%B8%8A%E4%BC%A0">https://element-plus.org/zh-CN/component/upload.html#upload-%E4%B8%8A%E4%BC%A0</a><br>action 请求路径</p><h1 id="下拉菜单"><a href="#下拉菜单" class="headerlink" title="下拉菜单"></a>下拉菜单</h1><p>当用户从下拉菜单中选择一个选项时，<code>&lt;el-select&gt;</code> 的 v-model 绑定的值会自动更新为被选中 <code>&lt;el-option&gt;</code>的 value 值。<br>label选项的标签，若不设置则默认与value相同<br>@change事件：选中值发生变化时触发</p><h1 id="照片墙"><a href="#照片墙" class="headerlink" title="照片墙"></a>照片墙</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-upload</span><br><span class="line">  v-model:file-list=&quot;Images&quot;</span><br><span class="line">  action=&quot;/api/admin/product/fileUpload&quot;</span><br><span class="line">  list-type=&quot;picture-card&quot;</span><br><span class="line">  :on-preview=&quot;handlePictureCardPreview&quot;</span><br><span class="line">  :on-remove=&quot;handleRemove&quot;</span><br><span class="line">&gt;</span><br><span class="line">  &lt;el-icon&gt;&lt;Plus /&gt;&lt;/el-icon&gt;</span><br><span class="line">&lt;/el-upload&gt;</span><br><span class="line">&lt;el-dialog v-model=&quot;dialogVisible&quot;&gt;</span><br><span class="line">  &lt;img w-full :src=&quot;dialogImageUrl&quot; alt=&quot;Preview Image&quot; /&gt;</span><br><span class="line">&lt;/el-dialog&gt;</span><br></pre></td></tr></table></figure><p><code>v-model:file-list=&quot;Images&quot;</code>：父子组件数据同步<br>action：发送请求的URL用来上传图片<br>获取图片时，组件定义的是name和url;注意自己定义的数据是否有这两个字段名，如果没有，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Images.value=result1.data.map(item=&gt;&#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    name: item.imgName,</span><br><span class="line">    url: item.imgUrl</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>遍历result1.data数组，对于数组中的每个元素（每个元素都是一个包含图片信息的对象），提取出每个元素的imgName和imgUrl属性，并将这些属性封装成一个新的对象。最终，所有这些新对象组成一个新的数组，这个数组被赋值给Images.value。<br>并修改ts类型。<br><code>:on-preview</code>:点击文件列表中已上传的文件时的钩子（预览）这里绑定事件显示对话框。<br><code>:on-remove</code>：删除文件之前的钩子，参数为上传的文件和文件列表， 若返回 false 或者返回 Promise 且被 reject，则停止删除。<br><code>before-upload</code>:上传文件之前的钩子，参数为上传的文件， 若返回false或者返回 Promise 且被 reject，则停止上传。</p><h1 id="根据输入列举相关信息"><a href="#根据输入列举相关信息" class="headerlink" title="根据输入列举相关信息"></a>根据输入列举相关信息</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-autocomplete</span><br><span class="line">  v-model=&quot;hosname&quot;</span><br><span class="line">  :fetch-suggestions=&quot;querySearch&quot;</span><br><span class="line">  @select=&quot;handleSelect&quot;</span><br><span class="line">  :trigger-on-focus=&quot;false&quot;</span><br><span class="line">&gt;</span><br><span class="line">  &lt;/el-autocomplete&gt;</span><br></pre></td></tr></table></figure><p>触发选中建议事件,这里的item的值是querySearch中cb函数所传递的数组</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const handleSelect=(item:any)=&gt;&#123;</span><br><span class="line">  // console.log(item)</span><br><span class="line">  router.push(&#x27;/hospital&#x27;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当input框发生变化时触发（默认聚焦时就会触发），<br>:trigger-on-focus&#x3D;”false”（当input中有数据才会触发）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">const querySearch=async(value:string,cb:any)=&gt;&#123;</span><br><span class="line">  let result = await reqHospitalName(value)</span><br><span class="line">    let arr=result.data.map((item:any)=&gt;&#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        value:item.hosname,</span><br><span class="line">        hoscode:item.hoscode</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    cb(arr)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>cb函数将获取到的参数展示到详情框中，注意这里被展示的数据的key一定是value</p><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-descriptions title=&quot;挂号信息&quot; :column=&quot;3&quot; border&gt;</span><br><span class="line">    &lt;el-descriptions-item&gt;</span><br><span class="line">      &lt;template #label&gt;</span><br><span class="line">        &lt;div class=&quot;cell-item&quot;&gt;</span><br><span class="line">         就诊日期：</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">     内容</span><br><span class="line">    &lt;/el-descriptions-item&gt;</span><br><span class="line">  &lt;/el-descriptions&gt;</span><br></pre></td></tr></table></figure><p>:column&#x3D;”3”指每一行有三列</p><h1 id="菜单栏"><a href="#菜单栏" class="headerlink" title="菜单栏"></a>菜单栏</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-menu :default-active=&quot;`$&#123;$route.path&#125;`&quot;  class=&quot;el-menu-vertical-demo&quot;&gt;</span><br><span class="line">    &lt;el-menu-item index=&quot;/user/real&quot; @click=&quot;gonext(&#x27;/user/real&#x27;)&quot;&gt;</span><br><span class="line">      &lt;el-icon&gt;&lt;Postcard /&gt;&lt;/el-icon&gt;</span><br><span class="line">      &lt;span&gt;实名认证&lt;/span&gt;</span><br><span class="line">    &lt;/el-menu-item&gt;</span><br><span class="line">  &lt;/el-menu&gt;</span><br></pre></td></tr></table></figure><p><code>:default-active=&quot;</code>${$route.path}<code>&quot; </code>默认高亮为此时的路由</p><h1 id="级联选择器"><a href="#级联选择器" class="headerlink" title="级联选择器"></a>级联选择器</h1><p><code> &lt;el-cascader :props=&quot;props&quot;/&gt;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">const props: CascaderProps = &#123;</span><br><span class="line">  lazy: true,//懒加载数据</span><br><span class="line">  async lazyLoad(node, resolve) &#123;</span><br><span class="line">   let result = await reqAllCities(node.data.id||&#x27;86&#x27;)</span><br><span class="line">   let showData = result.data.map((item:any)=&gt;&#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      id:item.id,</span><br><span class="line">      label:item.name,</span><br><span class="line">      value:item.value,</span><br><span class="line">      leaf:!item.hasChildren</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    //注入组件需要展示的数据</span><br><span class="line">    resolve(showData)</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>leaf:还有没有子节点<br>label：展示数据的名字<br>value：收集某个数据的值<br>node:你选择的节点的信息<br>最开始的时候会执行一次，后面每选择一次，也会执行一次</p>]]></content>
      
      
      
        <tags>
            
            <tag> Element组件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript</title>
      <link href="/2024/11/07/TypeScript/"/>
      <url>/2024/11/07/TypeScript/</url>
      
        <content type="html"><![CDATA[<h2 id="编译TypeScript"><a href="#编译TypeScript" class="headerlink" title="编译TypeScript"></a>编译TypeScript</h2><h3 id="命令行编译"><a href="#命令行编译" class="headerlink" title="命令行编译"></a>命令行编译</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tesc index</span><br></pre></td></tr></table></figure><h3 id="自动化编译"><a href="#自动化编译" class="headerlink" title="自动化编译"></a>自动化编译</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tesc init</span><br><span class="line">tesc --<span class="title function_">watch</span> (监视所有文件)</span><br></pre></td></tr></table></figure><h3 id="tsconfig-json文件"><a href="#tsconfig-json文件" class="headerlink" title="tsconfig.json文件"></a>tsconfig.json文件</h3><p>当出现错误时，不进行转换</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;noEmitOnError&quot;</span>: <span class="literal">true</span>,   </span><br></pre></td></tr></table></figure><h2 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h2><p><img src="/2024/11/07/TypeScript/1.png"><img src="/2024/11/07/TypeScript/2.png"></p><h3 id="类型声明"><a href="#类型声明" class="headerlink" title="类型声明"></a>类型声明</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">a</span>: string</span><br><span class="line"><span class="keyword">let</span> <span class="attr">b</span>: number</span><br><span class="line"><span class="keyword">let</span> <span class="attr">c</span>: boolean</span><br><span class="line"><span class="keyword">let</span> <span class="attr">d</span>: <span class="string">&#x27;hello&#x27;</span> <span class="comment">//字面量类型以后只能存hello</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">count</span>(<span class="params">x: number, y: number</span>): number &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意:string 和 String 不一样，后者是包装对象<br><a href="./TypeScript/3.png"></a><br><a href="./TypeScript/4.png"></a></p><h3 id="any"><a href="#any" class="headerlink" title="any"></a>any</h3><p>任意类型，不进行类型检查</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">a</span>: any</span><br><span class="line"><span class="comment">//或let a </span></span><br><span class="line">a = <span class="number">99</span></span><br><span class="line">a =<span class="string">&#x27;swjnswj&#x27;</span></span><br><span class="line">a =<span class="literal">true</span></span><br></pre></td></tr></table></figure><p><strong>any类型的变量可以赋值给任意类型的变量</strong></p><h3 id="unknown"><a href="#unknown" class="headerlink" title="unknown"></a>unknown</h3><p>这样写是不行的即使此时s的值是个字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">s</span>:unknown</span><br><span class="line">s=<span class="number">2</span></span><br><span class="line">s=<span class="literal">true</span></span><br><span class="line">s = <span class="string">&#x27;as&#x27;</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">x</span>: string</span><br><span class="line">x=s</span><br></pre></td></tr></table></figure><p>方法一</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">typeof</span> s === <span class="string">&#x27;string&#x27;</span>)&#123;</span><br><span class="line">  x=s</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法二：断言的两种形式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = s <span class="keyword">as</span> string </span><br><span class="line">x = &lt;string&gt;s</span><br></pre></td></tr></table></figure><h3 id="never"><a href="#never" class="headerlink" title="never"></a>never</h3><p>通常对函数做限制,不能用于变量（没意义）<br>js中如果不写返回值则返回undefined</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">demo</span>(<span class="params"></span>):never&#123;</span><br><span class="line">  <span class="title function_">demo</span>()</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;程序运行异常！&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="void"><a href="#void" class="headerlink" title="void"></a>void</h3><p>通常用于限制函数返回值<br><img src="/2024/11/07/TypeScript/5.png"><img src="/2024/11/07/TypeScript/6.png"></p><h3 id="object"><a href="#object" class="headerlink" title="object"></a>object</h3><p><img src="/2024/11/07/TypeScript/7.png"><img src="/2024/11/07/TypeScript/8.png"><br><code>Object</code>可以存储的类型就是可以调用它的方法的(例如可以调用<code>toString()</code>的)</p><h3 id="声明一个对象类型"><a href="#声明一个对象类型" class="headerlink" title="声明一个对象类型"></a>声明一个对象类型</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">person</span>: &#123;</span><br><span class="line">  <span class="attr">name</span>: string</span><br><span class="line">  age?:number</span><br><span class="line">  [<span class="attr">key</span>:string]:any<span class="comment">//索引签名(随意追加的)</span></span><br><span class="line">&#125;</span><br><span class="line">person = &#123;<span class="attr">name</span>:<span class="string">&#x27;wyh&#x27;</span>,<span class="attr">age</span>: <span class="number">18</span>&#125;</span><br><span class="line">person = &#123;<span class="attr">name</span>:<span class="string">&#x27;cyj&#x27;</span>&#125;</span><br><span class="line">person = &#123;<span class="attr">name</span>:<span class="string">&#x27;cyj&#x27;</span>;<span class="attr">place</span>:<span class="string">&#x27;河南&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="声明一个函数类型"><a href="#声明一个函数类型" class="headerlink" title="声明一个函数类型"></a>声明一个函数类型</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">count</span>: <span class="function">(<span class="params">a: number, b: number</span>) =&gt;</span> number</span><br><span class="line">count = <span class="function">(<span class="params">x,y</span>) =&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x+y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="声明一个数组类型"><a href="#声明一个数组类型" class="headerlink" title="声明一个数组类型"></a>声明一个数组类型</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">arr</span>: string[]</span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr2</span>: <span class="title class_">Array</span>&lt;number&gt;</span><br><span class="line">arr =[<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;s&#x27;</span>]</span><br><span class="line">arr2 =[<span class="number">100</span>,<span class="number">200</span>]</span><br></pre></td></tr></table></figure><h2 id="元组-tuple"><a href="#元组-tuple" class="headerlink" title="元组 tuple"></a>元组 tuple</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">arr1</span>: [string,number]</span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr2</span>: [string,boolean?]</span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr3</span>: [number,...string[]]</span><br><span class="line"></span><br><span class="line">arr1 = [<span class="string">&#x27;hello&#x27;</span>,<span class="number">12</span>]</span><br><span class="line">arr2 = [<span class="string">&#x27;hello&#x27;</span>,<span class="literal">false</span>]</span><br><span class="line">arr3 = [<span class="number">1</span>,<span class="string">&#x27;a&#x27;</span>]</span><br></pre></td></tr></table></figure><h2 id="enum"><a href="#enum" class="headerlink" title="enum"></a>enum</h2><p>可以定义一组命名常量,数字递增，反向映射，枚举中的属性是<strong>只读</strong>的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">enum <span class="title class_">Direction</span> &#123;</span><br><span class="line">  up,<span class="comment">//0</span></span><br><span class="line">  down,<span class="comment">//1</span></span><br><span class="line">  left,<span class="comment">//2</span></span><br><span class="line">  right<span class="comment">//3</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Direction</span>.<span class="property">down</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Direction</span>[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><p>字符串枚举没有反向映射</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">enum <span class="title class_">Direction</span> &#123;</span><br><span class="line">  up=<span class="string">&quot;up&quot;</span>,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>常量枚举，js中代码量减少</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> enum <span class="title class_">Direction</span> &#123;</span><br><span class="line">  up,</span><br><span class="line">  down,</span><br><span class="line">  left,</span><br><span class="line">  right</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="type-联合类型"><a href="#type-联合类型" class="headerlink" title="type 联合类型"></a>type 联合类型</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">type <span class="title class_">Status</span> = number | string</span><br><span class="line">type <span class="title class_">Gender</span> = <span class="string">&#x27;男&#x27;</span> | <span class="string">&#x27;女&#x27;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">print</span>(<span class="params">data:Status</span>):<span class="keyword">void</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">print</span>(<span class="number">404</span>)</span><br><span class="line"><span class="title function_">print</span>(<span class="string">&#x27;404&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="type-并且类型"><a href="#type-并且类型" class="headerlink" title="type 并且类型"></a>type 并且类型</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">type <span class="title class_">Area</span> = &#123;</span><br><span class="line">  <span class="attr">height</span>: number;</span><br><span class="line">  <span class="attr">width</span>: number;</span><br><span class="line">&#125;</span><br><span class="line">type <span class="title class_">Address</span> = &#123;</span><br><span class="line">  <span class="attr">num</span>:number;</span><br><span class="line">  <span class="attr">cell</span>:number</span><br><span class="line">&#125;</span><br><span class="line">type <span class="title class_">House</span> = <span class="title class_">Area</span> &amp; <span class="title class_">Address</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">house</span>:<span class="title class_">House</span> = &#123;</span><br><span class="line">  <span class="attr">height</span>: <span class="number">122</span>,</span><br><span class="line">  <span class="attr">width</span>: <span class="number">222</span>,</span><br><span class="line">  <span class="attr">num</span>: <span class="number">23</span>,</span><br><span class="line">  <span class="attr">cell</span>: <span class="number">3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="特殊情况void-不奏效"><a href="#特殊情况void-不奏效" class="headerlink" title="特殊情况void 不奏效"></a>特殊情况void 不奏效</h2><p><img src="/2024/11/07/TypeScript/9.png"></p><h2 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h2><p>public: 类内部，子类，类外部可以访问<br>protected:类内部，子类可以访问<br>private: 私有的，只有类内部可以访问<br>readonly: 只读属性</p><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><p><strong>抽象类不能实例化，其意义是可以被继承，抽象类里可以有普通方法，也可以有抽象方法</strong><br>类的基本定义</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: string</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name:string</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span>=name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;wyh&#x27;</span>)</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">public name: string</span>) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>抽象类举例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">abstract <span class="keyword">class</span> <span class="title class_">Package</span> &#123;</span><br><span class="line">  <span class="comment">//构造方法</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">public weight: number</span>) &#123; &#125;</span><br><span class="line">  <span class="comment">//抽象方法</span></span><br><span class="line">  abstract <span class="title function_">calculate</span>(): number</span><br><span class="line">  <span class="comment">//具体方法</span></span><br><span class="line">  <span class="title function_">printPackage</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`包裹重量为：<span class="subst">$&#123;<span class="variable language_">this</span>.weight&#125;</span>kg,运费为：<span class="subst">$&#123;<span class="variable language_">this</span>.calculate()&#125;</span>元`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StandardPackage</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Package</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">    weight: number,</span></span><br><span class="line"><span class="params">    public unitPrice: number</span></span><br><span class="line"><span class="params">  </span>) &#123; <span class="variable language_">super</span>(weight) &#125;</span><br><span class="line">  <span class="title function_">calculate</span>(): number &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">weight</span> * <span class="variable language_">this</span>.<span class="property">unitPrice</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> s1 = <span class="keyword">new</span> <span class="title class_">StandardPackage</span>(<span class="number">10</span>, <span class="number">5</span>)</span><br><span class="line">s1.<span class="title function_">printPackage</span>()</span><br></pre></td></tr></table></figure><p>override重写<br>当你创建一个子类并继承自一个父类时，如果父类有一个构造函数，那么子类在构造自身实例时必须通过 <code>super()</code> 调用父类的构造函数。<br>注意：抽象类被继承后子类必须</p><ol><li>实现所有抽象方法：<br>子类必须实现父类中的所有抽象方法。<strong>如果子类没有实现所有抽象方法，那么子类本身也将成为抽象类，不能被实例化。</strong></li><li>构造函数调用：<br>在子类的构造函数中，必须使用 <code>super()</code> 调用父类的构造函数，以确保父类被正确初始化。这是继承机制的一个基本要求。</li><li>访问修饰符：<br>注意父类和子类中属性和方法的访问修饰符。例如，如果父类中的某个抽象方法是 public 的，那么子类在实现这个方法时也必须是 public 的，或者具有更高的访问权限（如 protected 或包内可见性，但通常不会降低权限）。</li><li>抽象类不能被实例化：<br>抽象类本身不能被实例化，只能通过其子类来创建对象。这是抽象类的一个基本特性。<br>5.<strong>子类必须提供具体的实现。</strong></li></ol><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>描述对象的格式</p><h3 id="定义类"><a href="#定义类" class="headerlink" title="定义类"></a>定义类</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">interface <span class="title class_">PersonInterface</span>&#123;</span><br><span class="line">  <span class="attr">name</span>:string</span><br><span class="line">  <span class="attr">age</span>:number</span><br><span class="line">  <span class="title function_">speak</span>(<span class="attr">n</span>:number):<span class="keyword">void</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> implements <span class="title class_">PersonInterface</span>&#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">public name:string,public age:number</span>)&#123;&#125;</span><br><span class="line">  <span class="title function_">speak</span>(<span class="attr">n</span>: number): <span class="keyword">void</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="定义对象"><a href="#定义对象" class="headerlink" title="定义对象"></a>定义对象</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">user</span>: <span class="title class_">PersonInterface</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&#x27;zs&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">19</span>,</span><br><span class="line">  <span class="title function_">speak</span>(<span class="params">n</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(n)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">interface <span class="title class_">CountInterface</span>&#123;</span><br><span class="line">  (<span class="attr">a</span>:number,<span class="attr">b</span>:number):number</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">count</span>: <span class="title class_">CountInterface</span>=<span class="function">(<span class="params">x,y</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x+y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="接口可以继承"><a href="#接口可以继承" class="headerlink" title="接口可以继承"></a>接口可以继承</h3><h3 id="接口自动合并"><a href="#接口自动合并" class="headerlink" title="接口自动合并"></a>接口自动合并</h3><h2 id="interface与type"><a href="#interface与type" class="headerlink" title="interface与type"></a>interface与type</h2><p>interface定义对象和类，支持继承，合并<br>type:可以定义类型别名，联合类型，交叉类型，</p><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> logData&lt;T&gt;(<span class="attr">data</span>: T)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">&#125;</span><br><span class="line">logData&lt;number&gt;(<span class="number">100</span>)</span><br><span class="line">logData&lt;string&gt;(<span class="string">&#x27;abd&#x27;</span>)</span><br></pre></td></tr></table></figure><p>泛型接口</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">interface <span class="title class_">PersonInterface</span>&lt;T&gt;&#123;</span><br><span class="line">  <span class="attr">name</span>:string,</span><br><span class="line">  <span class="attr">age</span>:number,</span><br><span class="line">  <span class="attr">other</span>: T</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>泛型类</p><h2 id="type和interface的区别"><a href="#type和interface的区别" class="headerlink" title="type和interface的区别"></a>type和interface的区别</h2><ol><li><p><code>interface</code>支持声明合并</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">interface <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">age</span>: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">person</span>: <span class="title class_">Person</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Alice&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">25</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>type这样写会报错</p></li><li><p>扩展方式：<code>interface</code>用<code>extends</code>;<code>type</code>用<code>&amp;</code></p></li><li><p>适用范围：<code>interface</code> 主要用于对象的形状和类的结构：</p></li></ol><h2 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h2><p>target指这个类，在类被定义好的时候装饰器被调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">CustomString</span>(<span class="params">target:<span class="built_in">Function</span></span>)&#123;</span><br><span class="line">  target.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="variable language_">this</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">seal</span>(target.<span class="property"><span class="keyword">prototype</span></span>)<span class="comment">//封锁类的原型对象，不允许随意更改</span></span><br><span class="line">&#125;</span><br><span class="line">@<span class="title class_">CustomString</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">  <span class="attr">name</span>:string</span><br><span class="line">  <span class="attr">age</span>:number</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name:string,age:number</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;张三&#x27;</span>,<span class="number">18</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1.<span class="title function_">toString</span>())</span><br></pre></td></tr></table></figure><p><strong>如果一个装饰器有返回值，那么返回的类会把原来的类替换掉</strong></p><p>构造类型<br>new:表示该类型是可以用new操作符调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">type <span class="title class_">Constructor</span> = <span class="title function_">new</span> (...<span class="attr">args</span>:any[])=&gt;&#123;&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">fn:Constructor</span>)&#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;&#125;</span><br><span class="line"><span class="title function_">test</span>(<span class="title class_">Person</span>)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">type <span class="title class_">Constructor</span> =&#123;</span><br><span class="line">  <span class="title function_">new</span> (...<span class="attr">args</span>:any[]):&#123;&#125;</span><br><span class="line">  <span class="attr">wife</span>:string</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">fn:Constructor</span>)&#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line"> <span class="keyword">static</span> <span class="attr">wife</span>:string</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test</span>(<span class="title class_">Person</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue</title>
      <link href="/2024/11/07/Vue/"/>
      <url>/2024/11/07/Vue/</url>
      
        <content type="html"><![CDATA[<h2 id="响应式数据"><a href="#响应式数据" class="headerlink" title="响应式数据"></a>响应式数据</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>姓名：&#123;&#123;student.name&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>年龄：&#123;&#123;student.age&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">v-if</span>=<span class="string">&quot;student.sex&quot;</span>&gt;</span>性别：&#123;&#123;student.sex&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>爱好：<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(value,index) in student.hobby&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;&#123;value&#125;&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>朋友们：<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(value,index) in student.friends&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;&#123;value.name&#125;&#125;--&#123;&#123;value.age&#125;&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">el</span>: <span class="string">&#x27;.container&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">student</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">name</span>: <span class="string">&#x27;tom&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">age</span>: <span class="number">18</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">hobby</span>: [<span class="string">&#x27;抽烟&#x27;</span>, <span class="string">&#x27;喝酒&#x27;</span>, <span class="string">&#x27;烫头&#x27;</span>],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">mysex</span>: <span class="string">&#x27;false&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">friends</span>: [</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#123; <span class="attr">name</span>: <span class="string">&#x27;wyh&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#123; <span class="attr">name</span>: <span class="string">&#x27;zsh&#x27;</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        ]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;) </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;button @click=<span class="string">&quot;student.age++&quot;</span>&gt;年龄+<span class="number">1</span>&lt;/button&gt;&lt;br&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addsex()&quot;</span>&gt;</span>添加性别属性，默认值：男<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>&lt;br&gt;</span><br><span class="line">&lt;!-- <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;student.sex=&#x27;位置&#x27;&quot;</span>&gt;</span>点击切换性别<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>&lt;br&gt; --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;change()&quot;</span>&gt;</span>点击切换性别<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>&lt;br&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addfriends()&quot;</span>&gt;</span>在列表首位添加一个朋友<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>&lt;br&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;student.friends[0].name=&#x27;张三&#x27;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">修改第一个朋友的名字为：张三</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>&lt;br&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addhobby()&quot;</span>&gt;</span>添加一个爱好<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>&lt;br&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changehobby()&quot;</span>&gt;</span>修改第一个爱好为开车<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>&lt;br&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;remove()&quot;</span>&gt;</span>点我移除抽烟<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p> 注意：student.friends[0].name这样修改是响应式的结果因为student.friends[0]看作一个对象，而name就是他的一个属性，name对应的有setter和getter<br>    而student.friends[0]&#x3D;{}，这样修改不是响应式的，因为student.friends[0]并没有对应的setter和getter<br>后面加的方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">  <span class="title function_">addsex</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// Vue.set(this.student, &#x27;sex&#x27;, &#x27;男&#x27;)</span></span><br><span class="line">    <span class="comment">// vm.$set(this.student, &#x27;sex&#x27;, &#x27;男&#x27;)</span></span><br><span class="line">    <span class="variable language_">this</span>.$set(<span class="variable language_">this</span>.<span class="property">student</span>, <span class="string">&#x27;sex&#x27;</span>, <span class="string">&#x27;男&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">change</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">student</span>.<span class="property">mysex</span> = !<span class="variable language_">this</span>.<span class="property">student</span>.<span class="property">mysex</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">student</span>.<span class="property">sex</span> = <span class="variable language_">this</span>.<span class="property">student</span>.<span class="property">mysex</span> === <span class="literal">true</span> ? <span class="string">&#x27;女&#x27;</span> : <span class="string">&#x27;男&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">addfriends</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">student</span>.<span class="property">friends</span>.<span class="title function_">unshift</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;jack&#x27;</span>, <span class="attr">age</span>: <span class="number">56</span> &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">addhobby</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">student</span>.<span class="property">hobby</span>.<span class="title function_">push</span>(<span class="string">&#x27;学习&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">changehobby</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// this.student.hobby.splice(0, 1, &#x27;开车&#x27;)</span></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="title function_">set</span>(<span class="variable language_">this</span>.<span class="property">student</span>.<span class="property">hobby</span>, <span class="number">0</span>, <span class="string">&#x27;开车&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">remove</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">student</span>.<span class="property">hobby</span> = <span class="variable language_">this</span>.<span class="property">student</span>.<span class="property">hobby</span>.<span class="title function_">filter</span>(<span class="function">(<span class="params">h</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> h !== <span class="string">&#x27;抽烟&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>而且vue.set不能添加直接在data上的属性。总的来说就是如果改变的是对象的属性值或增加某一对象，就用this.$set；如果是数组上的增删改，就用提供的7个api<br>4.在Vue修改数组中的某个元素一定要用以下方法：push(),pop(),shift(),unshift(),splice(),sort(),reverse() &#x2F; Vue.set()或者vm.$set()<br>特别注意！Vue.set()或者vm.$set()不能给vm上或者vm.data上添加属性<br>3.如何监测数组中的数据？通过包裹数组更新元素的方法实现，本质是做了两件事：调用原生对应的方法对数组更新；重新解析模板进而更新页面。<br>1.vue会监视data中所有层次的数据<br>2.如何监测对象中的数据？通过setter实现监视，且要在new Vue时就传入要检测的数据<br>对象中后追加的属性，Vue默认不做响应式处理，如果要给后添加的属性做响应式，用<br>Vue.set(target,propertyName&#x2F;index,value)或Vm.$set(target,propertyName&#x2F;index,value)</p><p>Vue.delete</p><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p><img src="/2024/11/07/Vue/image-2.png" alt="alt text"><br><img src="/2024/11/07/Vue/image-3.png" alt="alt text"><br><img src="/2024/11/07/Vue/image-4.png" alt="alt text"><br><img src="/2024/11/07/Vue/image.png" alt="alt text"></p><h3 id="多级路由"><a href="#多级路由" class="headerlink" title="多级路由"></a>多级路由</h3><p>当使用children属性定义子路由时，子路由的path属性前不要带“&#x2F;”，否则会永远以根路径开始请求。子路由的路径是相对于父路由的路径的。<br><code>$route</code>:一般获取路由信息(路径，query,params)<br><code>$router</code>:一般进行编程式导航进行路由跳转(<code>push|replace</code>)</p><h3 id="路由传递参数三种写法"><a href="#路由传递参数三种写法" class="headerlink" title="路由传递参数三种写法"></a>路由传递参数三种写法</h3><ol><li>字符串形式<br><code>this.$router.push(&quot;/search/&quot;+this.keyword+&quot;?k=&quot;+this.keyword.toUpperCase())</code></li><li>模板字符串<br><code>this.$router.push(</code>&#x2F;search&#x2F;${this.keyword}?k&#x3D;${this.keyword.toUpperCase()}<code>)</code></li><li>对象 <em><strong>注意:<code>path</code>不能和<code>params</code>搭配</strong></em>只能和<code>name</code>搭<br><code>this.$router.push(&#123;name:&quot;search&quot;,params:&#123;keyword:this.keyword&#125;,query:&#123;k:this.keyword.toUpperCase()&#125;&#125;)</code></li></ol><h3 id="query-参数"><a href="#query-参数" class="headerlink" title="query 参数"></a>query 参数</h3><p>query参数以键值对的形式出现在URL的问号之后<br>跳转路由并携带query参数。to 的字符串写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- <span class="language-xml"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;`/home/message/detail?id=$&#123;m.id&#125;&amp;title=$&#123;m.title&#125;`&quot;</span>&gt;</span>&#123;&#123; m.title &#125;&#125;<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span> --&gt;</span><br><span class="line">&lt;!-- 跳转路由并携带query参数。to 的对象写法 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123; path: &#x27;/home/message/detail&#x27;, query: &#123; id: m.id,title: m.title,&#125;&#125;&quot;</span>&gt;</span>&#123;&#123; m.title &#125;&#125;<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="params参数"><a href="#params参数" class="headerlink" title="params参数"></a>params参数</h3><p>定义：params参数是路由中的一部分，<em><strong>在配置路由的时候需要占位</strong></em>。它通常用于指定路由的一部分，以标识特定资源。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 跳转路由并携带params参数。to 的字符串写法 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;`/detail/$&#123;m.id&#125;/$&#123;m.title&#125;`&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  &#123;&#123; m.title &#125;&#125;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>注意要有占位符,后面加上问号就表明该<code>params</code>参数可传可不传，如果不加问号且不传参的话，当前路由从<code>/deatil</code>都无法显示</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;/detail/:id/:title?&#x27;</span>,</span><br><span class="line">  <span class="attr">component</span>: <span class="title class_">MeDetail</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>params参数的展示</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; $route.params.id &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; $route.params.title &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><p>如果<code>params</code>传递的是空串如何解决？<br>答：出现的问题会和上面的一样;使用undefined解决<br><code>this.$router.push(&#123;name:&#39;search&#39;,params:&#123;keyword:&#39;&#39;||undefined&#125;&#125;)</code></p><p>router-link是Vue Router提供的用于导航的组件，它可以用来创建链接到不同路由的链接。<br>当用户点击router-link时，它会更新URL并触发路由切换，从而加载并显示新的路由组件。<br>router-view是一个占位符组件，用于在其中渲染匹配到的路由组件。它是Vue Router用于嵌套路由的关键部分。<br>前者相当于导航，指明要去的地址，而后者就是展示的地方</p><h3 id="命名路由"><a href="#命名路由" class="headerlink" title="命名路由"></a>命名路由</h3><p><img src="/2024/11/07/Vue/image-5.png" alt="alt text"><br><code>&lt;router-link :to=&quot;&#123; name: &#39;detail&#39;&#125;&quot;&gt;&#123;&#123; m.title &#125;&#125;&lt;/router-link&gt;</code><br>如果使用<code>name</code>就必须把它写成一个对象的形式</p><h3 id="replace写法"><a href="#replace写法" class="headerlink" title="replace写法"></a>replace写法</h3><p>替换掉浏览记录的最上面一条<br><img src="/2024/11/07/Vue/image-8.png" alt="alt text"><br>可以直接简写为replace</p><h3 id="props"><a href="#props" class="headerlink" title="props"></a>props</h3><p>使路由接收参数时不那么繁琐<br>在配置路由时<br>第一种写法：<br><code>props:&#123;a:1&#125;</code>缺点：数据是死的<br>第二种：<br>若布尔值为真，就会把该路由组件收到的所有<code>params</code>参数以<code>props</code>的形式传递给子组件缺点：无法受到<code>query</code>参数<br><code>props:true</code><br>第三种：值为函数<br><code>props:($route)=&gt; (&#123;keyword:$route.params.keyword,k:$route.query.k&#125;)</code></p><h3 id="缓存路由组件"><a href="#缓存路由组件" class="headerlink" title="缓存路由组件"></a>缓存路由组件</h3><p>加上<code>include</code>属性就是缓存某组件（不进行销毁），不加就是缓存全部</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;keep-alive include=<span class="string">&quot;组件名&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span></span><br><span class="line">&lt;/keep-alive&gt;</span><br></pre></td></tr></table></figure><p><code>exclude</code>：排除匹配的组件（同样可以是字符串、正则表达式或数组）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;keep-alive :include=<span class="string">&quot;[&#x27;ComponentA&#x27;, &#x27;ComponentC&#x27;]&quot;</span> :exclude=<span class="string">&quot;[&#x27;ComponentB&#x27;]&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;currentComponent&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span></span><br><span class="line">&lt;/keep-alive&gt;</span><br></pre></td></tr></table></figure><p>max属性:来限制缓存的组件数量，防止缓存过多导致内存占用过高。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;keep-alive :max=<span class="string">&quot;10&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;currentComponent&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span></span><br><span class="line">&lt;/keep-alive&gt;</span><br></pre></td></tr></table></figure><h3 id="两个路由独有的生命周期钩子"><a href="#两个路由独有的生命周期钩子" class="headerlink" title="两个路由独有的生命周期钩子"></a>两个路由独有的生命周期钩子</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">activated</span>(<span class="params"></span>)&#123;<span class="comment">//被激活</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">deactivated</span>(<span class="params"></span>)&#123;<span class="comment">//失活</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编程式路由"><a href="#编程式路由" class="headerlink" title="编程式路由"></a>编程式路由</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;button @click=<span class="string">&quot;pushShow(m)&quot;</span>&gt;push查看&lt;/button&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;replaceShow(m)&quot;</span>&gt;</span>repalce查看<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">  <span class="title function_">pushShow</span>(<span class="params">m</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&quot;/home/message/detail&quot;</span>,</span><br><span class="line">      <span class="attr">query</span>: &#123;</span><br><span class="line">        <span class="attr">id</span>: m.<span class="property">id</span>,</span><br><span class="line">        <span class="attr">title</span>: m.<span class="property">title</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">replaceShow</span>(<span class="params">m</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">replace</span>(&#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&quot;/home/message/detail&quot;</span>,</span><br><span class="line">      <span class="attr">query</span>: &#123;</span><br><span class="line">        <span class="attr">id</span>: m.<span class="property">id</span>,</span><br><span class="line">        <span class="attr">title</span>: m.<span class="property">title</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p><img src="/2024/11/07/Vue/image-9.png" alt="alt text"><br>前进后退调用的都是this.$router的方法<br>go若传的参数为正则往前走相应的步数，若为负则后退相应的步数</p><p>绝对路径<br>如果你的路径以 &#x2F; 开头，那么它被视为一个绝对路径。这意味着它会从应用的根路由开始解析。<br>例如，<code>router-link to=&quot;/about&quot;</code> 会导航到应用的 <code>/about </code>路由。</p><p>相对路径：<br>如果你的路径不以 &#x2F; 开头，那么它被视为一个相对路径。这意味着它会相对于当前路由的路径进行解析。<br>例如，如果你当前在<code>/user/123</code>路由，那么 <code>router-link to=&quot;edit&quot;</code> 会导航到 <code>/user/123/edit</code>（假设你的路由配置支持这样的解析）。</p><h3 id="关于路径问题"><a href="#关于路径问题" class="headerlink" title="关于路径问题"></a>关于路径问题</h3><p><font color="red">二级路由最好写成绝对路径</font></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>: <span class="string">&#x27;/acl&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/layout/index.vue&#x27;</span>),</span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;Acl&#x27;</span>,</span><br><span class="line"><span class="attr">meta</span>: &#123;</span><br><span class="line"><span class="attr">title</span>: <span class="string">&#x27;权限管理&#x27;</span>,</span><br><span class="line"><span class="attr">icon</span>: <span class="string">&#x27;Lock&#x27;</span>,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">redirect</span>: <span class="string">&#x27;/acl/user&#x27;</span>,</span><br><span class="line"><span class="attr">children</span>: [</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;/acl/user&#x27;</span>,</span><br><span class="line">  <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/api/acl/user/index.vue&#x27;</span>),</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">  <span class="attr">meta</span>: &#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&#x27;用户管理&#x27;</span>,</span><br><span class="line">    <span class="attr">icon</span>: <span class="string">&#x27;User&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;role&#x27;</span>,</span><br><span class="line">  <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/api/acl/role/index.vue&#x27;</span>),</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Role&#x27;</span>,</span><br><span class="line">  <span class="attr">meta</span>: &#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&#x27;角色管理&#x27;</span>,</span><br><span class="line">    <span class="attr">icon</span>: <span class="string">&#x27;UserFilled&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，我们可以看到，两个子路由分别由绝对路径和相对路径规定路径。并且我们想让子路由展现在layout模块中，而不是重新开一个新的页面。但是，如果是第二种写法，当你的路径不是…&#x2F;acl的时候，比如此时在&#x2F;home的路由下，我们要跳转到role，这时，就会新开一个页面，而不是我们预期的在layout的某一模块中呈现。但当你先跳转到&#x2F;acl&#x2F;user，再点击role,此时就会是我们预期的那样，路径变为&#x2F;acl&#x2F;role,因为&#x2F;acl的组件是layout，所以role会在layout的<code>&lt;router-view&gt;&lt;/router-view&gt;</code>中展示。<font color="red"><strong>要特别注意！！！</strong></font></p><h3 id="路由守卫"><a href="#路由守卫" class="headerlink" title="路由守卫"></a>路由守卫</h3><h4 id="全局路由守卫"><a href="#全局路由守卫" class="headerlink" title="全局路由守卫"></a>全局路由守卫</h4><h5 id="路由前置守卫"><a href="#路由前置守卫" class="headerlink" title="路由前置守卫"></a>路由前置守卫</h5><p><em><strong>初始化</strong></em>的时候被调用，每次<em><strong>路由切换</strong></em>之前被调用<br>配置完路由后，再写，且在暴露之前</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="comment">//放行逻辑</span></span><br><span class="line">  <span class="title function_">next</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="路由后置守卫"><a href="#路由后置守卫" class="headerlink" title="路由后置守卫"></a>路由后置守卫</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">afterEach</span>(<span class="function">(<span class="params">to,<span class="keyword">from</span></span>)=&gt;</span>&#123;</span><br><span class="line"> <span class="variable language_">document</span>.<span class="property">title</span> = to.<span class="property">meta</span>.<span class="property">title</span> || <span class="string">&#x27;硅谷系统&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="独享路由守卫"><a href="#独享路由守卫" class="headerlink" title="独享路由守卫"></a>独享路由守卫</h4><p>只有前置<br>在路由规则中写</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">beforeEnter</span>:<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="comment">//放行逻辑</span></span><br><span class="line">  <span class="title function_">next</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="组件内路由守卫"><a href="#组件内路由守卫" class="headerlink" title="组件内路由守卫"></a>组件内路由守卫</h4><p>通过<em><strong>路由规则</strong></em>，进入该组件时被调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">beforeRouteEnter</span>(to,<span class="keyword">from</span>,next)=&gt;&#123;</span><br><span class="line">  <span class="comment">//放行逻辑</span></span><br><span class="line">  <span class="title function_">next</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过路由规则，离开该组件时被调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">beforeRouteLeave</span>(to,<span class="keyword">from</span>,next)=&gt;&#123;</span><br><span class="line">  <span class="comment">//放行逻辑</span></span><br><span class="line">  <span class="title function_">next</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="vuex"><a href="#vuex" class="headerlink" title="vuex"></a>vuex</h2><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>1.多个组件依赖于同一状态（数据）<br>2.来自不同组件的行为需要变更同一状态<br>说白了就是有一个数据放到Vuex中，一个项目里的其他所有组件都可以进行读取，修改<br><img src="/2024/11/07/Vue/image-10.png" alt="alt text"></p><h3 id="工作原理图："><a href="#工作原理图：" class="headerlink" title="工作原理图："></a>工作原理图：</h3><p><img src="/2024/11/07/Vue/image-11.png" alt="alt text"><br><img src="/2024/11/07/Vue/image-12.png" alt="alt text"><br>state:存放数据<br>actions（处理业务逻辑）,mutations（处理数据）,state都是对象<br>vue2中用vuex的3版本<br>vue3中用vuex的4版本</p><h3 id="使用步骤："><a href="#使用步骤：" class="headerlink" title="使用步骤："></a>使用步骤：</h3><ol><li>npm i vuex</li><li>引入，Vue.use(Vuex)，就可以用 store了<br>在src中创建一个store文件夹，index.js 进行创建store<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//该文件用于创建store</span></span><br><span class="line"><span class="comment">//引入vue</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//引入vuex</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="comment">//使用插件，注意，use要在new之前，所以不能写到main.js中</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"><span class="comment">//准备actions 用于响应组件中的动作</span></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">  <span class="title function_">jia</span>(<span class="params">context, value</span>) &#123;</span><br><span class="line">    <span class="comment">//context:一个小型store,包含你可能会用到的方法</span></span><br><span class="line">    <span class="comment">//value:要加的数</span></span><br><span class="line">    <span class="comment">//console.log(context, value)</span></span><br><span class="line">    context.<span class="title function_">commit</span>(<span class="string">&#x27;JIA&#x27;</span>, value)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">jian</span>(<span class="params">context, value</span>) &#123;</span><br><span class="line">    context.<span class="title function_">commit</span>(<span class="string">&#x27;JIAN&#x27;</span>, value)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//准备mutations-用于操作数据(state)</span></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">  <span class="title function_">JIA</span>(<span class="params">state, value</span>) &#123;</span><br><span class="line">    <span class="comment">//相当于_data,</span></span><br><span class="line">    <span class="comment">//console.log(state, value)</span></span><br><span class="line">    state.<span class="property">sum</span> += value</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">JIAN</span>(<span class="params">state, value</span>) &#123;</span><br><span class="line">    state.<span class="property">sum</span> -= value</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//准备state-用于存储数据(state)</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">  <span class="attr">sum</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当state里的数据需要经过加工后再使用，要有返回值！</span></span><br><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line">  <span class="title function_">bigSum</span>(<span class="params">state</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> state.<span class="property">sum</span> * <span class="number">10</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  actions,</span><br><span class="line">  mutations,</span><br><span class="line">  state,</span><br><span class="line">  getters</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>引入store</li></ol><h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h4><p>脚手架会先把所有import执行完再执行其他语句 ，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"><span class="comment">//引入store</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store/index&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  store,</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在store中use(Vuex)<br>3.store<br>4.让所有的vc都能看见store</p><p>context参数，把一些逻辑写到action中。如果逻辑简单，可以直接在组件中调用commit<br><img src="/2024/11/07/Vue/image-16.png" alt="alt text"><br><img src="/2024/11/07/Vue/image-17.png" alt="alt text"></p><h3 id="gettters"><a href="#gettters" class="headerlink" title="gettters"></a>gettters</h3><p>使用场景：state中的数据需要加工并且该加工逻辑会被多次复用<br>state相当于data,getters 相当于computed</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line">  <span class="title function_">bigSum</span>(<span class="params">state</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> state.<span class="property">sum</span> * <span class="number">10</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>和计算属性一样，返回值决定自身的值。$store.getters.bigSum;</p><h3 id="mapState-mapGetters-mapActions-mapMutations"><a href="#mapState-mapGetters-mapActions-mapMutations" class="headerlink" title="mapState,mapGetters,mapActions,mapMutations"></a>mapState,mapGetters,mapActions,mapMutations</h3><p>前两个是对计算属性的优化<br>写起来很麻烦<br><img src="/2024/11/07/Vue/image-18.png" alt="alt text"><br>我们可以通过计算属性进行简写</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line"><span class="title function_">sum</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">sum</span>;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">schoolname</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">schoolname</span>;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">subject</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">subject</span>;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">bigSum</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">getters</span>.<span class="property">bigSum</span>;</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还麻烦<br>借助<code>mapState</code>生成计算属性，从<code>state</code>中读取数据<br>注意，属性名都是字符串可以简写去掉引号，属性值不能简写<br>…对象就相当于把对象中的值依次取出<br>别忘了在组件中引入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapGetters, mapState, mapMutations, mapActions &#125; <span class="keyword">from</span> <span class="string">&quot;vuex&quot;</span>;</span><br></pre></td></tr></table></figure><h4 id="mapState"><a href="#mapState" class="headerlink" title="mapState"></a>mapState</h4><p>对象写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">...<span class="title function_">mapState</span>(&#123;</span><br><span class="line">  <span class="attr">mysum</span>: <span class="string">&quot;sum&quot;</span>,</span><br><span class="line">  <span class="attr">schoolname</span>: <span class="string">&quot;schoolname&quot;</span>,</span><br><span class="line">  <span class="attr">subject</span>: <span class="string">&quot;subject&quot;</span>,</span><br><span class="line">&#125;),</span><br></pre></td></tr></table></figure><p>数组写法（当你计算属性的方法名和<code>store.state</code>的方法名相同时</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">...<span class="title function_">mapState</span>([<span class="string">&quot;sum&quot;</span>, <span class="string">&quot;schoolname&quot;</span>, <span class="string">&quot;subject&quot;</span>]),</span><br></pre></td></tr></table></figure><h4 id="mapGetters"><a href="#mapGetters" class="headerlink" title="mapGetters"></a>mapGetters</h4><p>对象写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">...<span class="title function_">mapGetters</span>(&#123;</span><br><span class="line">  <span class="attr">bigSum</span>: <span class="string">&quot;bigSum&quot;</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>数组写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">...<span class="title function_">mapGetters</span>([<span class="string">&quot;bigSum&quot;</span>]),</span><br></pre></td></tr></table></figure><p>为了简写组件的方法<br><img src="/2024/11/07/Vue/image-19.png" alt="alt text"></p><p><font color="red">注意</font> 用 <code>mapMutations</code> 生成<code>increment</code>时要传参数，否则不知道加的是几；默认传的参数是<code>event</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line"><span class="comment">//借助mapMutations生成对应的方法，方法中会调用commit 去联系mutations(对象写法)</span></span><br><span class="line">...<span class="title function_">mapMutations</span>(&#123; <span class="attr">increment</span>: <span class="string">&quot;JIA&quot;</span>, <span class="attr">decrement</span>: <span class="string">&quot;JIAN&quot;</span> &#125;),</span><br><span class="line"><span class="comment">//数组的写法，别忘了改上面的函数名</span></span><br><span class="line">...<span class="title function_">mapMutations</span>([<span class="string">&quot;JIA&quot;</span>, <span class="string">&quot;JIAN&quot;</span>]),</span><br><span class="line"><span class="comment">//借助mapActions生成对应方法，方法中会调用dispatch去联系acyions</span></span><br><span class="line">...<span class="title function_">mapActions</span>(&#123; <span class="attr">delay</span>: <span class="string">&quot;delayjia&quot;</span>, <span class="attr">incrementodd</span>: <span class="string">&quot;oddjia&quot;</span> &#125;),</span><br><span class="line">...<span class="title function_">mapActions</span>([<span class="string">&quot;delayjia&quot;</span>, <span class="string">&quot;oddjia&quot;</span>]),</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>以上是从各组件的角度读取vuex中共享数据的代码，那么如何实现各组件之间的数据共享呢？其实只需要像读取本组件的数据一样直接读取即可</p><h3 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//求和相关的配置</span></span><br><span class="line"><span class="keyword">const</span> countOptions = &#123;</span><br><span class="line">  <span class="attr">namespaced</span>: <span class="literal">true</span>,<span class="comment">// 命名空间，让mapState的分类名可以被识别</span></span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="title function_">jia</span>(<span class="params">context, value</span>) &#123;</span><br><span class="line">      context.<span class="title function_">commit</span>(<span class="string">&#x27;JIA&#x27;</span>, value)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">jian</span>(<span class="params">context, value</span>) &#123;</span><br><span class="line">      context.<span class="title function_">commit</span>(<span class="string">&#x27;JIAN&#x27;</span>, value)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">    <span class="title function_">JIA</span>(<span class="params">state, value</span>) &#123;</span><br><span class="line">      state.<span class="property">sum</span> += value</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">JIAN</span>(<span class="params">state, value</span>) &#123;</span><br><span class="line">      state.<span class="property">sum</span> -= value</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">sum</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">schoolname</span>: <span class="string">&#x27;尚硅谷&#x27;</span>,</span><br><span class="line">    <span class="attr">subject</span>: <span class="string">&#x27;前端&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="title function_">bigSum</span>(<span class="params">state</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> state.<span class="property">sum</span> * <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//人员管理相关的配置</span></span><br><span class="line"><span class="keyword">const</span> personOptions = &#123;</span><br><span class="line">  <span class="attr">namespaced</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">plist</span>: [&#123; <span class="attr">id</span>: <span class="title class_">Date</span>.<span class="title function_">now</span>(), <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span> &#125;],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="title function_">addWang</span>(<span class="params">context, value</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (value.<span class="property">name</span>.<span class="title function_">indexOf</span>(<span class="string">&#x27;王&#x27;</span>) === <span class="number">0</span>) &#123;</span><br><span class="line">        context.<span class="title function_">commit</span>(<span class="string">&#x27;ADDWANG&#x27;</span>, value)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;只能添加一个姓王的人&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="title function_">firstname</span>(<span class="params">state</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> state.<span class="property">plist</span>[<span class="number">0</span>].<span class="property">name</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">    <span class="title function_">ADD</span>(<span class="params">state, p</span>) &#123;</span><br><span class="line">      state.<span class="property">plist</span>.<span class="title function_">unshift</span>(p)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">ADDWANG</span>(<span class="params">state, value</span>) &#123;</span><br><span class="line">      state.<span class="property">plist</span>.<span class="title function_">unshift</span>(value)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">modules</span>: &#123;</span><br><span class="line">    <span class="attr">countAbout</span>: countOptions,</span><br><span class="line">    <span class="attr">personAbout</span>: personOptions</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">  ...<span class="title function_">mapState</span>(<span class="string">&quot;countAbout&quot;</span>, [<span class="string">&quot;sum&quot;</span>,<span class="string">&quot;schoolname&quot;</span>,<span class="string">&quot;subject&quot;</span>]),</span><br><span class="line">  ...<span class="title function_">mapGetters</span>(<span class="string">&quot;countAbout&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">bigSum</span>: <span class="string">&quot;bigSum&quot;</span>,</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="title function_">firstPersonName</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">getters</span>[<span class="string">&#x27;personAbout/firstPersonName&#x27;</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">  <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&quot;countAbout/jia&quot;</span>, <span class="variable language_">this</span>.<span class="property">n</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">delay</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&quot;countAbout/jia&quot;</span>, <span class="variable language_">this</span>.<span class="property">n</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">decrement</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&quot;countAbout/jian&quot;</span>, <span class="variable language_">this</span>.<span class="property">n</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="props传参"><a href="#props传参" class="headerlink" title="props传参"></a>props传参</h2><p>父组件给子组件传参</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;StudentName&quot;</span>,</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">msg</span>: <span class="string">&quot;我是一个学生&quot;</span>,</span><br><span class="line">      <span class="attr">myage</span>: <span class="variable language_">this</span>.<span class="property">age</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// props: [&quot;name&quot;, &quot;sex&quot;, &quot;age&quot;],</span></span><br><span class="line">  <span class="comment">// 注意大小写</span></span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">      <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="comment">//name和sex这两个prop都被设置了required: true，这意味着在使用这个组件时，父组件必须提供name和sex这两个属性。</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">age</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">Number</span>,</span><br><span class="line">      <span class="attr">default</span>: <span class="number">99</span>,</span><br><span class="line"><span class="comment">//默认值99,这意味着如果父组件没有提供age的值，子组件中的ageprop将自动被设置为99</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">sex</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">      <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;&#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>父组件模板  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">ChildComponent</span> :some-prop=<span class="string">&quot;myFunction&quot;</span> /&gt;</span><br></pre></td></tr></table></figure><p>myFunction 是父组件中定义的一个方法，它将被作为 some-prop（在子组件中对应为 someProp）传递给 ChildComponent 子组件。注意，这里使用的是 :some-prop（或 v-bind:some-prop），因为 some-prop 是一个 prop 的名称，而 myFunction 是一个 JavaScript 表达式的值，该表达式的结果（即函数本身）将被绑定到 some-prop 上。</p><p>也可以子组件给父组件，这时需要父组件给子组件传递一个函数，然后子组件把要传的参数通过该函数传递<br>父组件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">StudentName</span> :getStudentName=<span class="string">&quot;getStudentName&quot;</span>&gt;&lt;/<span class="title class_">StudentName</span>&gt;</span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">  <span class="title function_">getStudentName</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(name);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>子组件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;button @click=<span class="string">&quot;transStudentName&quot;</span>&gt;点我获取学生姓名&lt;/button&gt;</span><br><span class="line"><span class="attr">props</span>: [<span class="string">&quot;getStudentName&quot;</span>],</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">transStudentName</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">getStudentName</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><h3 id="props传参三种写法"><a href="#props传参三种写法" class="headerlink" title="props传参三种写法"></a>props传参三种写法</h3><ul><li><code>props</code>是只读的。如果业务需要修改，就赋值<code>props</code>的内容到<code>data</code>中一份，然后修改<code>data</code>中的数据<br>传递数据<code>&lt;Demo name=&quot;xxx&quot;/&gt;</code><br>接收数据</li></ul><ol><li>只接收<code>props:[&#39;name&#39;]</code></li><li>限制类型<code>props:&#123;name:Number&#125;</code></li><li>限制类型，限制必要性，指定默认值<br>默认值和必要性一般情况下不同时存在<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">props</span>:&#123;</span><br><span class="line">  <span class="attr">name</span>:&#123;</span><br><span class="line">    <span class="attr">type</span>:<span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">required</span>:<span class="literal">true</span>,<span class="comment">//必须传</span></span><br><span class="line">    <span class="attr">default</span>:<span class="string">&#x27;www&#x27;</span><span class="comment">//默认值</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h2><p>自定义事件用于组件</p><h3 id="方式一-通过父组件给子组件传递函数类型的props实现子给父传数据"><a href="#方式一-通过父组件给子组件传递函数类型的props实现子给父传数据" class="headerlink" title="方式一:通过父组件给子组件传递函数类型的props实现子给父传数据"></a>方式一:通过父组件给子组件传递函数类型的props实现子给父传数据</h3><p>父组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">AboutStudent</span> :getStudentName=<span class="string">&quot;getName&quot;</span>&gt;&lt;/<span class="title class_">AboutStudent</span>&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="title class_">AboutStudent</span> <span class="keyword">from</span> <span class="string">&#x27;./components/Student.vue&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title class_">AboutStudent</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">getName</span>(<span class="params">name</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;拿到学生姓名了&#x27;</span>, name)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>子组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sendStudentName&quot;</span>&gt;</span>点我获取学生姓名<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&#x27;AboutStudent&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">props</span>: [<span class="string">&#x27;getStudentName&#x27;</span>],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">sendStudentName</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="title function_">getStudentName</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="方式二-通过父组件给子组件绑定一个自定义事件实现子给父传数据，使用-或v-on"><a href="#方式二-通过父组件给子组件绑定一个自定义事件实现子给父传数据，使用-或v-on" class="headerlink" title="方式二:通过父组件给子组件绑定一个自定义事件实现子给父传数据，使用@或v-on"></a>方式二:通过父组件给子组件绑定一个自定义事件实现子给父传数据，使用@或v-on</h3><p>父组件，注意绑定的是<code>atguigu</code>事件而不是<code>getStudentAge</code>，<code>getStudentAge</code>是父组件中的回调，即触发<code>atguigu</code>事件后会调用<code>getStudentAge</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">AboutStudent</span> v-<span class="attr">on</span>:atguigu=<span class="string">&quot;getStudentAge&quot;</span>&gt;&lt;/<span class="title class_">AboutStudent</span>&gt;</span><br><span class="line"> <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">getStudentAge</span>(<span class="params">age</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;拿到学生年龄了&#x27;</span>, age)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>子组件：<strong>不需要再用<code>props</code>接受</strong>，而是利用<code>this.$emit</code>触发自定义事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sendStudentAge&quot;</span>&gt;</span>点我获取学生年龄<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&#x27;AboutStudent&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">age</span>: <span class="number">18</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">sendStudentAge</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.$emit(<span class="string">&#x27;atguigu&#x27;</span>, <span class="variable language_">this</span>.<span class="property">age</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="方式三：通过父组件给子组件绑定一个自定义事件实现子给父传递数据-第二种写法，使用ref"><a href="#方式三：通过父组件给子组件绑定一个自定义事件实现子给父传递数据-第二种写法，使用ref" class="headerlink" title="方式三：通过父组件给子组件绑定一个自定义事件实现子给父传递数据(第二种写法，使用ref)"></a>方式三：通过父组件给子组件绑定一个自定义事件实现子给父传递数据(第二种写法，使用ref)</h3><p>父组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">AboutStudent</span> ref=<span class="string">&quot;student&quot;</span>&gt;&lt;/<span class="title class_">AboutStudent</span>&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="title class_">AboutStudent</span> <span class="keyword">from</span> <span class="string">&#x27;./components/Student.vue&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title class_">AboutStudent</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">getStudentAge</span>(<span class="params">age, ...params</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;拿到学生年龄了&#x27;</span>, age, params)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">student</span>.$on(<span class="string">&#x27;atguigu&#x27;</span>, <span class="variable language_">this</span>.<span class="property">getStudentAge</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">student</span>.$once(<span class="string">&#x27;atguigu&#x27;</span>, <span class="variable language_">this</span>.<span class="property">getStudentAge</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">student</span>.$on(<span class="string">&#x27;atguigu&#x27;</span>,<span class="keyword">function</span>(<span class="params">age, ...params</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;拿到学生年龄了&#x27;</span>, age, params)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>如果这样写的话，谁触发自定义事件，<code>this</code>就指向谁。<br>解决方案</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">student</span>.$on(<span class="string">&#x27;atguigu&#x27;</span>,<span class="function">(<span class="params">age, ...params</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;拿到学生年龄了&#x27;</span>, age, params)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>子组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sendStudentAge&quot;</span>&gt;</span>点我获取学生年龄<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;AboutStudent&#x27;</span>,</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">      <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">sendStudentAge</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.$emit(<span class="string">&#x27;atguigu&#x27;</span>, <span class="variable language_">this</span>.<span class="property">age</span>, <span class="number">888</span>, <span class="number">9999</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解绑自定义事件"><a href="#解绑自定义事件" class="headerlink" title="解绑自定义事件"></a>解绑自定义事件</h3><p><code>this.$off(&#39;atguigu&#39;)</code>解绑一个<br><code>this.$off([&#39;atguigu&#39;,&#39;demo&#39;])</code>解绑多个<br><code>this.$off()</code>解绑全部</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><img src="/2024/11/07/Vue/image-24.png" alt="alt text"></p><p><img src="/2024/11/07/Vue/image-25.png" alt="alt text"></p><h2 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h2><h3 id="默认插槽"><a href="#默认插槽" class="headerlink" title="默认插槽"></a>默认插槽</h3><p>父组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">AboutStudent</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>abc<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/<span class="title class_">AboutStudent</span>&gt;</span><br></pre></td></tr></table></figure><p>子组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;slot&gt;&lt;/slot&gt;</span><br></pre></td></tr></table></figure><h3 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h3><p>父组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">AboutStudent</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">template</span> #<span class="attr">bcd</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>abc<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">&quot;abc&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>bcd<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line">&lt;/<span class="title class_">AboutStudent</span>&gt;</span><br></pre></td></tr></table></figure><p>子组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;slot name=<span class="string">&quot;abc&quot;</span>&gt;&lt;/slot&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;bcd&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h3><p>将子组件中的数据传给父组件<br>父组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">MyComponent</span> v-slot=<span class="string">&quot;slotProps&quot;</span>&gt;</span><br><span class="line">  &#123;&#123; slotProps.<span class="property">text</span> &#125;&#125; &#123;&#123; slotProps.<span class="property">count</span> &#125;&#125;</span><br><span class="line">&lt;/<span class="title class_">MyComponent</span>&gt;</span><br></pre></td></tr></table></figure><p>子组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;slot :text=<span class="string">&quot;greetingMessage&quot;</span> :count=<span class="string">&quot;1&quot;</span>&gt;&lt;/slot&gt;</span><br></pre></td></tr></table></figure><h2 id="消息订阅与发布"><a href="#消息订阅与发布" class="headerlink" title="消息订阅与发布"></a>消息订阅与发布</h2><p>用于任意组件间的通信</p><ol><li>安装pubsub <code>npm i pubsub-js</code></li><li><code>import pubsub from &#39;pubsub-js&#39;</code></li><li>接收数据，A组件想接收数据，则在A组件订阅消息，订阅的回调留在A组件自身<br>注意！如果在订阅消息时直接写回调函数，回调函数中的<code>this</code>指向<code>undefined</code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">methods</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="title function_">demo</span>(<span class="params">data</span>)&#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">pid</span> = pubsub.<span class="title function_">subscribe</span>(<span class="string">&#x27;消息名&#x27;</span>,<span class="variable language_">this</span>.<span class="property">demo</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>提供数据<code>pubsub.publish(&#39;消息名&#39;,数据)</code></li><li>取消订阅和取消定时器的方法一样，最好在<code>beforeDestroy</code>钩子中<br><code>pubsub.unsubcribe(pid)</code></li></ol><h2 id="mixin-混入"><a href="#mixin-混入" class="headerlink" title="mixin(混入)"></a>mixin(混入)</h2><p>功能：可以把多个组件公用的配置提取成一个混入对象</p><ol><li>定义混合<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>)&#123;&#125;,</span><br><span class="line">  <span class="attr">methods</span>:&#123;&#125;,</span><br><span class="line">  <span class="attr">computed</span>:&#123;&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>使用混入<ul><li>全局混入：<code>Vue.mixin(xxx)</code></li><li>局部混入：<code>mixins[&#39;xxx&#39;]</code></li></ul></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>About Vue3</title>
      <link href="/2024/11/07/About-Vue3/"/>
      <url>/2024/11/07/About-Vue3/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="创建一个vue3的项目"><a href="#创建一个vue3的项目" class="headerlink" title="创建一个vue3的项目"></a>创建一个vue3的项目</h2><h3 id="用vite"><a href="#用vite" class="headerlink" title="用vite"></a>用vite</h3><p>1.npm init vite@latest<br>2.进入vue3_vite文件夹，安装依赖npm i<br>3.启动项目 npm run dev</p><h3 id="vue-cli"><a href="#vue-cli" class="headerlink" title="vue-cli"></a>vue-cli</h3><p>1.vue create vue_test<br>2.cd ,npm run serve</p><p><img src="/2024/11/07/About-Vue3/image.png" alt="alt text"><br><img src="/2024/11/07/About-Vue3/image-1.png" alt="alt text"><br><img src="/2024/11/07/About-Vue3/image-2.png" alt="alt text"><br>如果用ref监测一个对象类型的数据，那么ref 会求助reactive 把数据转换为 proxy类型的，<br>用reactive的话，数据直接就是proxy对象，就不用.value</p><p><img src="/2024/11/07/About-Vue3/image-3.png" alt="alt text"><br>下面为vue3内部的响应式的配置，Vue3可以直接对数据进行增删改查<br><img src="/2024/11/07/About-Vue3/image-4.png" alt="alt text"><br>其中，target 指 person,propName指所改的属性值<br><img src="/2024/11/07/About-Vue3/image-5.png" alt="alt text"></p><h2 id="ref和reactive对比："><a href="#ref和reactive对比：" class="headerlink" title="ref和reactive对比："></a>ref和reactive对比：</h2><p><img src="/2024/11/07/About-Vue3/image-6.png" alt="alt text"><br>为什么reactive监视数组不能直接反映出变化？<br>数组方法：Vue 3的响应式系统能够检测到对数组元素的直接修改（如arr[index] &#x3D; newValue）以及通过push、pop、shift、unshift、splice和sort、reverse这些内置方法进行的修改。然而，如果你使用非响应式的方法（如直接改变数组长度arr.length &#x3D; newLength或通过非响应式API如Array.prototype.filter、map等创建新数组），Vue可能无法检测到这些变化。<br>深度响应性：虽然reactive可以创建深度响应的对象，但对于数组中的对象元素，只有这些对象的顶层属性是响应式的。如果对象内部有嵌套对象或数组，并且你修改了这些嵌套对象或数组的属性，Vue可能无法自动检测到这些变化，除非这些嵌套对象或数组也被转换成响应式的。</p><h3 id="vue2-props，插槽-补充"><a href="#vue2-props，插槽-补充" class="headerlink" title="vue2 props，插槽 补充"></a>vue2 props，插槽 补充</h3><p>如果用props传数据的话，并且接收的话，那么会在vc实例对象上出现，但是不接收的话，就会出现在$attrs上<br>如果没有接收插槽的话，页面只是不显示，但是确实已经出现在组件实例对象的vc身上的$slots中<br><img src="/2024/11/07/About-Vue3/image-9.png" alt="alt text"><br><img src="/2024/11/07/About-Vue3/image-7.png" alt="alt text"><br>外部给组件传参时，并且数据是响应式的<br><img src="/2024/11/07/About-Vue3/image-8.png" alt="alt text"></p><p><img src="/2024/11/07/About-Vue3/image-10.png" alt="alt text"></p><h2 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h2><p>计算属性（computed properties）的定义是通过一个函数来创建的，但这个函数返回一个对象，这个对象描述了计算属性的 getter 和可选的 setter。</p><h4 id="简写形式"><a href="#简写形式" class="headerlink" title="简写形式"></a>简写形式</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>一个人的信息<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">  姓：&lt;input type=<span class="string">&quot;text&quot;</span> v-model=<span class="string">&quot;person.firstname&quot;</span>&gt;</span><br><span class="line">  名：&lt;input type=<span class="string">&quot;text&quot;</span> v-model=<span class="string">&quot;person.lastname&quot;</span>&gt;</span><br><span class="line">  全名：&lt;h4&gt;&#123;&#123;person.<span class="property">fullName</span>&#125;&#125;&lt;/h4&gt;</span><br><span class="line">  全名：&lt;input type=<span class="string">&quot;text&quot;</span> v-model=<span class="string">&quot;person.fullName&quot;</span>&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> &#123;reactive&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;computed&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> person = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">      <span class="attr">firstname</span>: <span class="string">&#x27;张&#x27;</span>,</span><br><span class="line">      <span class="attr">lastname</span>: <span class="string">&#x27;三&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">let</span> fullName = <span class="title function_">computed</span>(</span><br><span class="line">      <span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> person.<span class="property">firstname</span> + <span class="string">&#x27;-&#x27;</span> + person.<span class="property">lastname</span></span><br><span class="line">      &#125;</span><br><span class="line">    ) </span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      person,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的计算属性只可读，不可更改，也就是说最后一个文本框里的值不可以输入或删除<br>还可以这样写，相当于直接给person追加了一个属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">person.<span class="property">fullName</span> = <span class="title function_">computed</span>(</span><br><span class="line"><span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> person.<span class="property">firstname</span> + <span class="string">&#x27;-&#x27;</span> + person.<span class="property">lastname</span></span><br><span class="line">&#125;) </span><br></pre></td></tr></table></figure><h4 id="完整版"><a href="#完整版" class="headerlink" title="完整版"></a>完整版</h4><p>完整版中fullName不再是person中的属性，因此在组件中引用时不必再加上person.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fullName=<span class="title function_">computed</span>(&#123;</span><br><span class="line"><span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> person.<span class="property">firstname</span> + <span class="string">&#x27;-&#x27;</span> + person.<span class="property">lastname</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">set</span>(<span class="params">value</span>)&#123;</span><br><span class="line">  <span class="keyword">const</span> nameArr = value.<span class="title function_">split</span>(<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">  person.<span class="property">firstname</span>=nameArr[<span class="number">0</span>]</span><br><span class="line">  person.<span class="property">lastname</span>=nameArr[<span class="number">1</span>]</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">  person,</span><br><span class="line">  fullName</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="watch监视"><a href="#watch监视" class="headerlink" title="watch监视"></a>watch监视</h2><p>watch写在setup()里面<br>基本代码<br>这里面注意两个容易出错的点：<br>1.函数直接定义即可<br>2.ref类型的数据需要加.value</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前求和为：&#123;&#123;sum&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sum++&quot;</span>&gt;</span>点我+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  &lt;hr&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前的信息为&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changemsg&quot;</span>&gt;</span>修改信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  &lt;hr&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>姓名：&#123;&#123; person.name &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>年龄：&#123;&#123; person.age &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>薪资：&#123;&#123; person.salary &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changename&quot;</span>&gt;</span>修改姓名<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;person.age++&quot;</span>&gt;</span>增长年龄<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;person.salary++&quot;</span>&gt;</span>涨薪<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123;reactive,watch,ref&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">setup</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">let</span> sum=<span class="title function_">ref</span>(<span class="number">0</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">let</span> msg=<span class="title function_">ref</span>(<span class="string">&#x27;你好&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">let</span> person=<span class="title function_">reactive</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">age</span>:<span class="number">18</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">salary</span>:<span class="number">20</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">let</span> <span class="title function_">changemsg</span> =(<span class="params"></span>)=&gt;msg.<span class="property">value</span> += <span class="string">&#x27;!&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">let</span> <span class="title function_">changename</span> =(<span class="params"></span>)=&gt;person.<span class="property">name</span> += <span class="string">&#x27;!&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      sum,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      msg,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      changemsg,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      changename,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      person</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="1-监视ref-所定义的一个响应式数据"><a href="#1-监视ref-所定义的一个响应式数据" class="headerlink" title="1.监视ref 所定义的一个响应式数据"></a>1.监视ref 所定义的一个响应式数据</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">watch</span>(sum,<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;sum变了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;,&#123;<span class="attr">immediate</span>:<span class="literal">true</span>&#125;)</span><br></pre></td></tr></table></figure><p><img src="/2024/11/07/About-Vue3/image-11.png"></p><h4 id="2-监视ref-所定义的多个响应式数据"><a href="#2-监视ref-所定义的多个响应式数据" class="headerlink" title="2.监视ref 所定义的多个响应式数据"></a>2.监视ref 所定义的多个响应式数据</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">watch</span>([sum,msg],<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;sum,msg变了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;,&#123;<span class="attr">immediate</span>:<span class="literal">true</span>&#125;)</span><br></pre></td></tr></table></figure><p><img src="/2024/11/07/About-Vue3/image-12.png" alt="alt text"></p><h4 id="3-监视reactive-所定义的一个响应式数据的全部属性"><a href="#3-监视reactive-所定义的一个响应式数据的全部属性" class="headerlink" title="3.监视reactive 所定义的一个响应式数据的全部属性"></a>3.监视reactive 所定义的一个响应式数据的全部属性</h4><h5 id="注意1-此处无法正确的获取oldValue-2-强制开启了深度监视"><a href="#注意1-此处无法正确的获取oldValue-2-强制开启了深度监视" class="headerlink" title="注意1.此处无法正确的获取oldValue  2.强制开启了深度监视"></a>注意1.此处无法正确的获取oldValue  2.强制开启了深度监视</h5><p>就算person中还有一个对象，也会被监视到</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">watch</span>(person,<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;person变了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;,&#123;<span class="attr">deep</span>:<span class="literal">false</span>&#125;)</span><br></pre></td></tr></table></figure><p><img src="/2024/11/07/About-Vue3/image-13.png" alt="alt text"></p><h4 id="4-监视reactive-所定义的一个响应式数据的某个属性—写成函数的形式"><a href="#4-监视reactive-所定义的一个响应式数据的某个属性—写成函数的形式" class="headerlink" title="4.监视reactive 所定义的一个响应式数据的某个属性—写成函数的形式"></a>4.监视reactive 所定义的一个响应式数据的某个属性—写成函数的形式</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">watch</span>(<span class="function">()=&gt;</span>person.<span class="property">age</span>,<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;person  age变了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="5-监视reactive-所定义的一个响应式数据的某些属性"><a href="#5-监视reactive-所定义的一个响应式数据的某些属性" class="headerlink" title="5.监视reactive 所定义的一个响应式数据的某些属性"></a>5.监视reactive 所定义的一个响应式数据的某些属性</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">watch</span>([<span class="function">()=&gt;</span>person.<span class="property">name</span>,<span class="function">()=&gt;</span>person.<span class="property">age</span>],<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;name age变了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="特殊情况"><a href="#特殊情况" class="headerlink" title="特殊情况"></a>特殊情况</h4><p>更改一下配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">setup</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">let</span> sum=<span class="title function_">ref</span>(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">let</span> msg=<span class="title function_">ref</span>(<span class="string">&#x27;你好&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> person=<span class="title function_">reactive</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>:<span class="number">18</span>,</span><br><span class="line">  <span class="attr">salary</span>:<span class="number">20</span>,</span><br><span class="line">  <span class="attr">job</span>:&#123;</span><br><span class="line">    <span class="attr">j1</span>:&#123;</span><br><span class="line">      <span class="attr">j1s</span>:<span class="number">9999</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里必须加上{deep:true}，否则监视不到</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">watch</span>(<span class="function">()=&gt;</span>person.<span class="property">job</span>,<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;job变了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;,&#123;<span class="attr">deep</span>:<span class="literal">true</span>&#125;)</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><img src="/2024/11/07/About-Vue3/image-14.png" alt="alt text"><br>监视ref普通数据类型时，不用加.value,但如果是person（对象）就要加注意是ref类型时</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//法一：ref监视的对象仍然会被转化为reactive所定义的对象</span></span><br><span class="line"><span class="title function_">watch</span>(person.<span class="property">value</span>,<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;person变了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;,&#123;<span class="attr">deep</span>:<span class="literal">false</span>&#125;)<span class="comment">//false不起作用</span></span><br><span class="line"><span class="comment">//法二：</span></span><br><span class="line"><span class="title function_">watch</span>(person.<span class="property">value</span>,<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;person变了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;,&#123;<span class="attr">deep</span>:<span class="literal">true</span>&#125;)</span><br></pre></td></tr></table></figure><h3 id="watchEffect"><a href="#watchEffect" class="headerlink" title="watchEffect"></a>watchEffect</h3><p><img src="/2024/11/07/About-Vue3/image-15.png" alt="alt text"></p><h2 id="hook"><a href="#hook" class="headerlink" title="hook"></a>hook</h2><p><img src="/2024/11/07/About-Vue3/image-16.png" alt="alt text"><br>就是把一些api封装，复用</p><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p><img src="/2024/11/07/About-Vue3/image-17.png" alt="alt text"><br>组合API就是把生命周期钩子写到setup中还要引入，如果写到setup外，就写箭头前面的名字<br>组合式API生命钩子的使用时期，比配置项的方法写优先级更高</p><p><img src="/2024/11/07/About-Vue3/image-18.png" alt="alt text"></p><h2 id="props"><a href="#props" class="headerlink" title="props"></a>props</h2><p><img src="/2024/11/07/About-Vue3/image-19.png" alt="alt text"></p><h2 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h2><h4 id="原生dom事件"><a href="#原生dom事件" class="headerlink" title="原生dom事件"></a>原生dom事件</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;pre @click=<span class="string">&quot;handler&quot;</span>&gt;<span class="number">12345</span>&lt;/pre&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">pre</span> @<span class="attr">click</span>=<span class="string">&quot;handler1(1,2,3,4,$event)&quot;</span>&gt;</span>12345<span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>注意，必须是$event</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">handler</span> = (<span class="params">event</span>)=&gt;&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(event)</span><br><span class="line">&#125;   </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handler1</span>(<span class="params">p1,p2,p3,p4,p5</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(p1,p2,p3,p4,p5)</span><br><span class="line">  <span class="comment">//第五个参数是事件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="组件也可以绑定原生DOM事件"><a href="#组件也可以绑定原生DOM事件" class="headerlink" title="组件也可以绑定原生DOM事件"></a>组件也可以绑定原生DOM事件</h4><p>但如果子组件接收了的话，就是自定义事件<br>注意一个问题，父组件给子组件绑定一个自定义事件，实际上是给子组件的<font color="Red">根组件</font>绑定，在本例中就是给.son绑定,所以你点击子组件的任意一处都会触发事件，利用了事件委托</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">FirstChild</span> @click=<span class="string">&quot;handler2&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">handler2</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">123</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>子组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>姓名1是:&#123;&#123; name &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;get&quot;</span>&gt;</span>点我获取姓名<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h4 id="自定义事件：子给父传递数组"><a href="#自定义事件：子给父传递数组" class="headerlink" title="自定义事件：子给父传递数组"></a>自定义事件：子给父传递数组</h4><p>父组件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">SecChild</span> @xxx=<span class="string">&quot;handler3&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><p>父组件中的回调</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">handler3</span>(<span class="params">p1</span>)&#123;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(p1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>子组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son2&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>22222<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;handler&quot;</span>&gt;</span>自定义<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>利用defineEmits方法返回<font color="Purple">函数</font>触发自定义事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="comment">//不需要引入</span></span><br><span class="line"><span class="keyword">let</span> emit=<span class="title function_">defineEmits</span>([<span class="string">&#x27;xxx&#x27;</span>])</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handler</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="title function_">emit</span>(<span class="string">&#x27;xxx&#x27;</span>,<span class="string">&#x27;xs&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>其中可以利用emit给父组件回传参数，</p><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>在Vue3中，子组件给父组件传递数据需要通过自定义事件进行。在父组件中，形式和Vue2相同，就是在组件实例对象上绑定一个事件并且让他的值等于父组件的一个回调函数。<br>而在子组件中，我们需要通过emit&#x3D;defineEmits([‘xxx’])得到在父组件中绑定的事件，然后就可以直接传参。父组件的回调函数接受的参数就是子组件调用自定义事件所传的参数<br>@xxx&#x3D;”handler3”<br>这里的 xxx 并不是一个变量或响应式属性，而是一个事件名。当子组件通过 this.$emit(‘xxx’, …) 触发这个事件时，不管 xxx 这个字符串本身是否变化，只要事件名匹配，父组件中对应的监听器就会触发，并调用 handler3 方法。</p><h2 id="全局事件总线"><a href="#全局事件总线" class="headerlink" title="全局事件总线"></a>全局事件总线</h2><ol><li>npm install mitt –save</li><li>在main.js中<br>import mitt from ‘mitt’<br>const $bus &#x3D; mitt()<br>export default $bus<br>组件一：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> $bus <span class="keyword">from</span> <span class="string">&#x27;../main&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; onMounted &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="title function_">onMounted</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">  $bus.<span class="title function_">on</span>(<span class="string">&#x27;car&#x27;</span>,<span class="function">(<span class="params">car</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(car)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>组件2:<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son2&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是2<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;send&quot;</span>&gt;</span>给我姐姐<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> $bus <span class="keyword">from</span> <span class="string">&#x27;../main&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">function</span> <span class="title function_">send</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  $bus.<span class="title function_">emit</span>(<span class="string">&#x27;car&#x27;</span>,&#123;<span class="attr">car</span>:<span class="string">&#x27;123&#x27;</span>&#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>vue2中</li><li>安装全局事件总线<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="title function_">beforeCreate</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$bus</span>=<span class="variable language_">this</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li>使用<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">methods</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="title function_">demo</span>(<span class="params">data</span>)&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">$bus</span>.$on(<span class="string">&#x27;abc&#x27;</span>,demo)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$bus</span>.$emit(<span class="string">&#x27;abc&#x27;</span>,<span class="number">666</span>)</span><br></pre></td></tr></table></figure></li><li>解绑<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">brforeDestory</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">$bus</span>.$off(<span class="string">&#x27;abc&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="transition"><a href="#transition" class="headerlink" title="transition"></a>transition</h2><p>详情见：<a href="https://cn.vuejs.org/guide/built-ins/transition.html">https://cn.vuejs.org/guide/built-ins/transition.html</a><br><a href="./About-Vue3/20.png"></a><br><font color="red">注<font>：<code>&lt;Transition&gt;</code>仅支持单个元素或组件作为其插槽内容。如果内容是一个组件，这个组件必须仅有一个根元素。</font></font></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.<span class="property">v</span>-enter-active,</span><br><span class="line">.<span class="property">v</span>-leave-active &#123;</span><br><span class="line">  <span class="attr">transition</span>: opacity <span class="number">0.</span>5s ease;</span><br><span class="line">&#125;</span><br><span class="line">.<span class="property">v</span>-enter-<span class="keyword">from</span>,</span><br><span class="line">.<span class="property">v</span>-leave-to &#123;</span><br><span class="line">  <span class="attr">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>&lt;transition-group&gt;&lt;/transition-group&gt;</code>里面的每个都要指定key值</p><h2 id="插槽slot"><a href="#插槽slot" class="headerlink" title="插槽slot"></a>插槽slot</h2><p><a href="https://cn.vuejs.org/guide/components/slots.html#slots">https://cn.vuejs.org/guide/components/slots.html#slots</a><br><code>&lt;slot&gt;</code>元素是一个插槽出口，标示了父元素提供的插槽内容将在哪里被渲染。就是如果想通过父组件在子组件中写内容，需要在子组件中加插槽</p><h3 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h3><p><strong>具名插槽需要在父组件中用template</strong><br><code>&lt;slot&gt;</code>元素可以有一个特殊的name，<code>&lt;slot name=&quot;header&quot;&gt;&lt;/slot&gt;</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;template v-<span class="attr">slot</span>:header&gt;</span><br><span class="line">  &lt;!-- header 插槽的内容放这里 --&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>v-slot 有对应的简写 #，因此<code>&lt;template v-slot:header&gt;</code>可以简写为<code>&lt;template #header&gt;</code>,其意思就是“将这部分模板片段传入子组件的 header 插槽中”</p><h3 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h3><p>插槽的内容可能想要同时使用父组件域内和子组件域内的数据。<br>子组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">slot</span> <span class="attr">:text</span>=<span class="string">&quot;greetingMessage&quot;</span> <span class="attr">:count</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>父组件<br>通过子组件标签上的 v-slot 指令，直接接收到了一个插槽 props 对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">MyComponent</span> v-slot=<span class="string">&quot;slotProps&quot;</span>&gt;</span><br><span class="line">  &#123;&#123; slotProps.<span class="property">text</span> &#125;&#125; &#123;&#123; slotProps.<span class="property">count</span> &#125;&#125;</span><br><span class="line">&lt;/<span class="title class_">MyComponent</span>&gt;</span><br></pre></td></tr></table></figure><p>使用解构：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">MyComponent</span> v-slot=<span class="string">&quot;&#123; text, count &#125;&quot;</span>&gt;</span><br><span class="line">  &#123;&#123; text &#125;&#125; &#123;&#123; count &#125;&#125;</span><br><span class="line">&lt;/<span class="title class_">MyComponent</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="具名作用域插槽"><a href="#具名作用域插槽" class="headerlink" title="具名作用域插槽"></a>具名作用域插槽</h3><p>插槽 props 可以作为 v-slot 指令的值被访问到：v-slot:name&#x3D;”slotProps”。当使用缩写时是这样：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">MyComponent</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">template</span> #<span class="attr">header</span>=<span class="string">&quot;headerProps&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;&#123; headerProps &#125;&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line">&lt;/<span class="title class_">MyComponent</span>&gt;</span><br></pre></td></tr></table></figure><p>向具名插槽中传入 props：注意插槽上的 name 是一个 Vue 特别保留的 attribute，<strong>不会</strong>作为 props 传递给插槽</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;slot name=<span class="string">&quot;header&quot;</span> message=<span class="string">&quot;hello&quot;</span>&gt;&lt;/slot&gt;</span><br></pre></td></tr></table></figure><p>如果你同时使用了具名插槽与默认插槽，则需要为默认插槽使用显式的<code>&lt;template&gt;</code>标签。尝试直接为组件添加 v-slot 指令将导致编译错误。这是为了避免因默认插槽的 props 的作用域而困惑。举例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">slot</span> <span class="attr">:message</span>=<span class="string">&quot;hello&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;footer&quot;</span> /&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"><span class="comment">// template</span></span><br><span class="line">&lt;!-- 该模板无法编译 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">MyComponent</span> <span class="attr">v-slot</span>=<span class="string">&quot;&#123; message &#125;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">template</span> #<span class="attr">footer</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- message 属于默认插槽，此处不可用 --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">MyComponent</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>为默认插槽使用显式的 <template> 标签有助于更清晰地指出 message 属性在其他插槽中不可用：</template></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">MyComponent</span>&gt;</span><br><span class="line">  &lt;!-- 使用显式的默认插槽 --&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">template</span> #<span class="attr">default</span>=<span class="string">&quot;&#123; message &#125;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">template</span> #<span class="attr">footer</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Here&#x27;s some contact info<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line">&lt;/<span class="title class_">MyComponent</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><h3 id="Vue-Router和组合式-API"><a href="#Vue-Router和组合式-API" class="headerlink" title="Vue Router和组合式 API"></a>Vue Router和组合式 API</h3><p>我们需要使用一些新的函数来代替访问 this 和组件内导航守卫。</p><h4 id="使用路由，路由器"><a href="#使用路由，路由器" class="headerlink" title="使用路由，路由器"></a>使用路由，路由器</h4><p>因为我们在 setup 里面没有访问 this，所以我们不能直接访问 this.$router 或 this.$route。作为替代，我们使用 useRouter 和 useRoute 函数：<br><code>import &#123; useRouter, useRoute &#125; from &#39;vue-router&#39;</code><br><code>const router = useRouter()</code><br><code>const route = useRoute()</code><br>route.matched:可以获取当前路由的各种信息</p><h4 id="路由守卫"><a href="#路由守卫" class="headerlink" title="路由守卫"></a>路由守卫</h4><p><code>import &#123; onBeforeRouteLeave, onBeforeRouteUpdate &#125; from &#39;vue-router&#39;</code></p><h3 id="使用流程"><a href="#使用流程" class="headerlink" title="使用流程"></a>使用流程</h3><ul><li>Vue3</li></ul><ol><li>安装<code>Vue Router</code>:<code>npm install vue-router</code></li><li>创建路由组件(在src&#x2F;router目录下并命名为index.js)</li><li>在该文件中<code>import &#123; createRouter, createWebHistory, RouteRecordRaw &#125; from &#39;vue-router&#39;;</code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">routes</span>: = [</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;Home&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>: <span class="title class_">Home</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 可以继续添加更多的路由</span></span><br><span class="line">];</span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line"><span class="attr">history</span>: <span class="title function_">createWebHistory</span>(),</span><br><span class="line">routes,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure></li><li>在vue3的入口文件中导入并使用Vue Router<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>);</span><br><span class="line">app.<span class="title function_">use</span>(router);</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li>使用路由：可以使用<code>useRouter</code>获取路由实例，并通过<code>router.push</code>方法来进行页面跳转<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;useRouter&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">useRouter</span>()</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handler</span>(<span class="params"></span>)&#123;</span><br><span class="line">  router.<span class="title function_">push</span>(<span class="string">&#x27;/login&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><ul><li>Vue2</li></ul><ol><li>前两步同上</li><li>引入插件<code>import VueRouter from &#39;vue-router&#39;</code></li><li>使用插件<code>Vue.use(VueRouter)</code></li><li><code>const routers = []</code>,<code>export default routers</code></li></ol><h2 id="reactive和ref对比"><a href="#reactive和ref对比" class="headerlink" title="reactive和ref对比"></a>reactive和ref对比</h2><ul><li>定义数据的角度<br><code>ref</code>通常用来定义基本数据类型<br><code>reactive</code>用来定义对象(或数组)类型数据<br><code>ref</code>可以用来定义对象(或数组)类型数据，它内部会自动通过<code>reactive</code>转为代理对象</li><li>原理的角度<ul><li><code>ref</code>通过<code>Object.defineProperty()</code>的<code>get</code>和<code>set</code>实现响应式(数据劫持)</li><li><code>reactive</code>通过<code>Proxy</code>来实现响应式(数据劫持)，并通过<code>Reflect</code>操作源对象内部的数据</li></ul></li><li>从使用角度<ul><li><code>.value</code></li></ul></li></ul><h2 id="响应式实现的原理"><a href="#响应式实现的原理" class="headerlink" title="响应式实现的原理"></a>响应式实现的原理</h2><ul><li>通过<code>Proxy</code>：属性值的读写，属性的添加删除等<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Proxy</span>(data,&#123;</span><br><span class="line">  <span class="comment">//拦截读取属性值</span></span><br><span class="line">  <span class="title function_">get</span>(<span class="params">target,prop</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target,prop)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//拦截设置属性值或添加新属性</span></span><br><span class="line">  <span class="title function_">set</span>(<span class="params">target,prop,value</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">set</span>(target,prop,value)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//拦截删除属性</span></span><br><span class="line">  <span class="title function_">deleteProperty</span>(<span class="params">target,prop</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">deleteProperty</span>(target,prop)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇博客~</title>
      <link href="/2024/11/06/MyFirstBlog/"/>
      <url>/2024/11/06/MyFirstBlog/</url>
      
        <content type="html"><![CDATA[<p>在隔窗老师的帮助下，我的博客终于搭建完毕！感谢隔窗老师！！！</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
